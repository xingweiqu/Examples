[{"instruction": "You are an AI editor planning to write a Wikipedia article that adheres to Wikipedia's content guidelines. Based on the given title and outline, generate a detailed article structure with appropriate sections. Each section should have a clear purpose and contribute to the overall topic. \n\nArticle Title: Named-entity recognition\nTotal Expected Length: 1800 words\nArticle Topic and Scope: Write a comprehensive and detailed Wikipedia article about Named-entity recognition (NER), focusing on its definition as a subtask of information extraction, the methodologies and platforms used in NER, the challenges and evaluation metrics associated with it, and the ongoing research efforts to enhance its performance across various domains and contexts, including social media and fine-grained entity recognition.\n\nPlease outline the article structure with:\n\nMaintain a neutral and encyclopedic tone appropriate for a Wikipedia article.", "input": "", "output": "Named-entity recognition\nIntroduction\nNamed-entity recognition (NER) (also known as (named) entity identification, entity chunking, and entity extraction) is a subtask of information extraction that seeks to locate and classify named entities mentioned in unstructured text into pre-defined categories such as person names, organizations, locations, medical codes, time expressions, quantities, monetary values, percentages, etc.\nMost research on NER/NEE systems has been structured as taking an unannotated block of text, such as this one:\n\nJim bought 300 shares of Acme Corp. in 2006.\nAnd producing an annotated block of text that highlights the names of entities:\n\n[Jim]Person bought 300 shares of [Acme Corp.]Organization in [2006]Time.\nIn this example, a person name consisting of one token, a two-token company name and a temporal expression have been detected and classified.\nState-of-the-art NER systems for English produce near-human performance. For example, the best system entering MUC-7 scored 93.39% of F-measure while human annotators scored 97.60% and 96.95%.\nNamed-entity recognition platforms\nNotable NER platforms include:\n\nGATE supports NER across many languages and domains out of the box, usable via a graphical interface and a Java API.\nOpenNLP includes rule-based and statistical named-entity recognition.\nSpaCy features fast statistical NER as well as an open-source named-entity visualizer.\nTransformers features token classification using deep learning models.\nProblem definition\nIn the expression named entity, the word named restricts the task to those entities for which one or many strings, such as words or phrases, stand (fairly) consistently for some referent. This is closely related to rigid designators, as defined by Kripke, although in practice NER deals with many names and referents that are not philosophically \"rigid\". For instance, the automotive company created by Henry Ford in 1903 can be referred to as Ford or Ford Motor Company, although \"Ford\" can refer to many other entities as well (see Ford). Rigid designators include proper names as well as terms for certain biological species and substances, but exclude pronouns (such as \"it\"; see coreference resolution), descriptions that pick out a referent by its properties (see also De dicto and de re), and names for kinds of things as opposed to individuals (for example \"Bank\").\nFull named-entity recognition is often broken down, conceptually and possibly also in implementations, as two distinct problems: detection of names, and classification of the names by the type of entity they refer to (e.g. person, organization, or location).\nThe first phase is typically simplified to a segmentation problem: names are defined to be contiguous spans of tokens, with no nesting, so that \"Bank of America\" is a single name, disregarding the fact that inside this name, the substring \"America\" is itself a name. This segmentation problem is formally similar to chunking. The second phase requires choosing an ontology by which to organize categories of things.\nTemporal expressions and some numerical expressions (e.g., money, percentages, etc.) may also be considered as named entities in the context of the NER task. While some instances of these types are good examples of rigid designators (e.g., the year 2001) there are also many invalid ones (e.g., I take my vacations in \u201cJune\u201d). In the first case, the year 2001 refers to the 2001st year of the Gregorian calendar. In the second case, the month June may refer to the month of an undefined year (past June, next June, every June, etc.). It is arguable that the definition of named entity is loosened in such cases for practical reasons. The definition of the term named entity is therefore not strict and often has to be explained in the context in which it is used.\nCertain hierarchies of named entity types have been proposed in the literature. BBN categories, proposed in 2002, are used for question answering and consists of 29 types and 64 subtypes. Sekine's extended hierarchy, proposed in 2002, is made of 200 subtypes. More recently, in 2011 Ritter used a hierarchy based on common Freebase entity types in ground-breaking experiments on NER over social media text.\nFormal evaluation\nTo evaluate the quality of an NER system's output, several measures have been defined. The usual measures are called precision, recall, and F1 score. However, several issues remain in just how to calculate those values.\nThese statistical measures work reasonably well for the obvious cases of finding or missing a real entity exactly; and for finding a non-entity. However, NER can fail in many other ways, many of which are arguably \"partially correct\", and should not be counted as complete success or failures. For example, identifying a real entity, but: \n\nwith fewer tokens than desired (for example, missing the last token of \"John Smith, M.D.\")\nwith more tokens than desired (for example, including the first word of \"The University of MD\")\npartitioning adjacent entities differently (for example, treating \"Smith, Jones Robinson\" as 2 vs. 3 entities)\nassigning it a completely wrong type (for example, calling a personal name an organization)\nassigning it a related but inexact type (for example, \"substance\" vs. \"drug\", or \"school\" vs. \"organization\")\ncorrectly identifying an entity, when what the user wanted was a smaller- or larger-scope entity (for example, identifying \"James Madison\" as a personal name, when it's part of \"James Madison University\"). Some NER systems impose the restriction that entities may never overlap or nest, which means that in some cases one must make arbitrary or task-specific choices.\nOne overly simple method of measuring accuracy is merely to count what fraction of all tokens in the text were correctly or incorrectly identified as part of entity references (or as being entities of the correct type). This suffers from at least two problems: first, the vast majority of tokens in real-world text are not part of entity names, so the baseline accuracy (always predict \"not an entity\") is extravagantly high, typically >90%; and second, mispredicting the full span of an entity name is not properly penalized (finding only a person's first name when his last name follows might be scored as \u00bd accuracy).\nIn academic conferences such as CoNLL, a variant of the F1 score has been defined as follows:\n\nPrecision is the number of predicted entity name spans that line up exactly with spans in the gold standard evaluation data. I.e. when [Person Hans] [Person Blick] is predicted but [Person Hans Blick] was required, precision for the predicted name is zero. Precision is then averaged over all predicted entity names.\nRecall is similarly the number of names in the gold standard that appear at exactly the same location in the predictions.\nF1 score is the harmonic mean of these two.\nIt follows from the above definition that any prediction that misses a single token, includes a spurious token, or has the wrong class, is a hard error and does not contribute positively to either precision or recall. Thus, this measure may be said to be pessimistic: it can be the case that many \"errors\" are close to correct, and might be adequate for a given purpose. For example, one system might always omit titles such as \"Ms.\" or \"Ph.D.\", but be compared to a system or ground-truth data that expects titles to be included. In that case, every such name is treated as an error. Because of such issues, it is important actually to examine the kinds of errors, and decide how important they are given one's goals and requirements.\nEvaluation models based on a token-by-token matching have been proposed. Such models may be given partial credit for overlapping matches (such as using the Intersection over Union criterion). They allow a finer grained evaluation and comparison of extraction systems.\nApproaches\nNER systems have been created that use linguistic grammar-based techniques as well as statistical models such as machine learning. Hand-crafted grammar-based systems typically obtain better precision, but at the cost of lower recall and months of work by experienced computational linguists. Statistical NER systems typically require a large amount of manually annotated training data. Semisupervised approaches have been suggested to avoid part of the annotation effort.\nMany different classifier types have been used to perform machine-learned NER, with conditional random fields being a typical choice.\nProblem domains\nIn 2001, research indicated that even state-of-the-art NER systems were brittle, meaning that NER systems developed for one domain did not typically perform well on other domains. Considerable effort is involved in tuning NER systems to perform well in a new domain; this is true for both rule-based and trainable statistical systems.\nEarly work in NER systems in the 1990s was aimed primarily at extraction from journalistic articles. Attention then turned to processing of military dispatches and reports. Later stages of the automatic content extraction (ACE) evaluation also included several types of informal text styles, such as weblogs and text transcripts from conversational telephone speech conversations. Since about 1998, there has been a great deal of interest in entity identification in the molecular biology, bioinformatics, and medical natural language processing communities.  The most common entity of interest in that domain has been names of genes and gene products. There has been also considerable interest in the recognition of chemical entities and drugs in the context of the CHEMDNER\ncompetition, with 27 teams participating in this task.\nCurrent challenges and research\nDespite high F1 numbers reported on the MUC-7 dataset, the problem of named-entity recognition is far from being solved. The main efforts are directed to reducing the annotations labor by employing semi-supervised learning, robust performance across domains and scaling up to fine-grained entity types. In recent years, many projects have turned to crowdsourcing, which is a promising solution to obtain high-quality aggregate human judgments for supervised and semi-supervised machine learning approaches to NER. Another challenging task is devising models to deal with linguistically complex contexts such as Twitter and search queries.\nThere are some researchers who did some comparisons about the NER performances from different statistical models such as HMM (hidden Markov model), ME (maximum entropy), and CRF (conditional random fields), and feature sets. And some researchers recently proposed graph-based semi-supervised learning model for language specific NER tasks.\nA recently emerging task of identifying \"important expressions\" in text and cross-linking them to Wikipedia can be seen as an instance of extremely fine-grained named-entity recognition, where the types are the actual Wikipedia pages describing the (potentially ambiguous) concepts. Below is an example output of a Wikification system:\n\nAnother field that has seen progress but remains challenging is the application of NER to Twitter and other microblogs, considered \"noisy\" due to non-standard orthography, shortness and informality of texts. NER challenges in English Tweets have been organized by research communities to compare performances of various approaches, such as bidirectional LSTMs, Learning-to-Search, or CRFs.\nSee also\nControlled vocabulary\nCoreference resolution\nEntity linking (aka named entity normalization, entity disambiguation)\nInformation extraction\nKnowledge extraction\nOnomastics\nRecord linkage\nSmart tag (Microsoft)\n\n\n== References ==", "result": "# Named-entity recognition\n\nNamed-entity recognition (NER), sometimes called entity chunking, entity identification, or entity extraction, is a task of information extraction which aims to automatically identify and classify named entities mentioned in unstructured text into pre-defined categories such as the name of a person, organization, location, expression of timex, and so on. For example, given the utterance \"I had lunch at Google yesterday\", a NER would identify three named entities\u2014two organizations (\"Google\"), and one expression of timex (\"yesterday\")\u2014and then classify each of these entities into their respective categories.\n\nNER is considered a subtask of information extraction (IE) and natural language processing (NLP). Other names for NER include entitiy recognition (ER) and chunking. The terms chunking and entity recognition/extraction are sometimes ambiguous as these also have meanings in computational linguistics and statistics. In particular, chunking is also used to refer to phrase structure parsing; and \"entity recognition\" is also used to refer to tasks such as sentiment analysis and multi-label classification. To avoid ambiguity, this article uses the term \"named-entity recognition.\"\n\n## Methodology\n\nThere are two main categories of NER methodologies: traditional machine learning algorithms and deep learning approaches.\n\n### Traditional machine learning approaches\n\nIn traditional machine learning approaches, features are manually engineered by experts and an off-the-shelf classifier is applied to the features. This approach requires extensive domain knowledge and remains a popular choice for applications with limited annotated training data, such as domain adaptation. Features that may be used include:\n\n* Unigram and n-gram features: unigrams, bigrams, trigrams, etc. from the input sentence.\n* Lexical features: surface forms of the tokens. For example, \"Google\" and \"google\" are different lexical forms of the same entity.\n* Syntactic features: syntactic dependency paths from a parser output. For example, the dependency path from \"I\" to \"Google\" in the figure.\n* Morphological features: parts-of-speech (POS), PoS bigrams, PoS trigrams, morphological inflectional features.\n* Structural features: bracketed phrases from the syntactic tree in Figure 1, semantic roles of the tokens.\n* External knowledge features: features from external sources such as word embeddings, named-entity disambiguation scores, discourse information, syntactic dependency graphs, semantic roles.\n\nTraditional NER methods were based on the Viterbi algorithm, which is equivalent to linear-chain conditional random fields (CRFs). Recent advances in deep learning have shown significant performance improvement in NER tasks. State-of-the-art NER models often use deep bi-directional LSTM (BiLSTM) encoder combined with CRF decoder, or a deep bidirectional LSTM encoder combined with a deep transformer decoder. In recent years, transformer encoders such as BERT, RoBERTa, XLNet, and others have further improved the state-of-the-art in NER.\n\n### Platforms\n\nStanford NER\n\nThe Stanford NER tool is a fast implementation of NER that is available as part of the Stanford CoreNLP package. It uses a maximum entropy model trained on the CoNLL 2003 corpus for English. The tool can also tag Chinese named entities. The maximum entropy model can be updated with domain-specific entities.\n\n spaCy\n\nspaCy is an NLP library that supports NER via trained models for English, German, Spanish, French, Italian, and Dutch. The models utilize conditional random fields (CRFs) for NER. spaCy is known for good performance and high speed.\n\nNLTK\n\nThe Natural Language Toolkit (NLTK) is a platform for building Python programs to work with human language data. NLTK includes implementations of many NER classifiers, including maximum entropy models, decision tree classifiers, and support vector machines. However, NLTK does not include an NER module for English. NLTK can be used in a pipeline that includes pre-trained models from another library, such as Stanford NER.\n\nCoreNLP\n\nApache OpenNLP\n\nOpenNLP does not currently include an NER implementation for English. However, it does provide an API if users want to develop their own NER model.\n\nChatterBot\n\nChatterBot is an open-source chat bot framework written in Python. One of its features is the ability to train a custom NER classifier.\n\nChunker\n\nChris Dyer's NLP toolkit includes a separate chunker component that can be trained on any treebank using the conll2000 distribution. It then uses beam search on the chunk rules it has learned in order to produce chunked output for a new sentence. Chunk rules are learned using a discriminative algorithm ( perceptron).\n\n## Evaluation\n\nA named-entity recognizer (NER) is a system that takes as input a sentence and produces as output the entity labels of the named entities in the sentence. The labeled sentence is formally defined as $S = (w_1, y_1), ..., (w_n, y_n)$ where $w_i$ is the i-th word, $y_i$ is the label of the word. An NER system will make a sequence prediction $Y = y_1^', ..., y_n^'$, and we define the loss function $\\ell(S, Y)$ to measure the discrepancy between the predicted label sequence and the ground truth. The goal of NER is to find the sequence of labels Y that has the minimal loss $\\ell(S, Y)$.\n\nThe most commonly used loss function in NER literature is the zero-one loss, or the edit distance between the predicted label sequence and the true label sequence. The zero-one loss measures whether the NER system correctly identifies the beginning and end of each entity, but does not account for errors in tagging individual words in the sentence or missed entities. However, this loss function is non-differentiable and thus prevents us from using a large corpus of annotated named entities to train a probabilistic model using gradient-based methods.\n\nAs a result, the per-word cross entropy loss has become popular in NER literature. This loss function measures the ability of the NER system to correctly identify the entity label for each word in a sentence. While this metric does not account for missed entities in the sentence, it is more amenable to large-scale training using web corpora. This loss function is also used in the evaluation of systems, with the assumption that the trade-off between these two loss functions is acceptable.\n\n## Research\n\nMost current research on NER focuses on improving the performance of NER systems on long-tail, low-frequency named entities. This focuses on addressing the challenges posed by long-tail entities' limited availability of training data, as well as the variability in the annotation schemes for low-frequency entities.\n\nOne trend in long-tail named entity recognition is transfer learning. Domain-adversarial training of NER systems have been shown to be effective in adapting named-entity recognition systems to new domains. These methods modify the objective function of the NER system to minimize the domain discrepancy between the source domain and the target domain. Joint modeling of multiple related tasks has also shown to be effective in capturing global information that improves the performance of long-tail entities.\n\nRecent advances in deep learning have enabled the training of a single NER model on a large-scale web corpus annotated with rich named-entity annotations. Current industrial solutions for NER often take this approach.\n\n## Social media\n\nSocial media platforms like Twitter, Facebook, and MySpace have become an important data source for extracting entities and relations. Due to the huge volume of user-generated content, named-entity recognition in social media has become an active research area. Extracted entities and relations from social media can be utilized for various tasks such as opinion mining, microblog monitoring, and question answering.\n\nThe main challenges of named-entity recognition in social media are the informal writing style, domain specificity, and low occurrence rate of entities. The frequent occurrence of misspelled words and abbreviations in social media texts presents a challenge for NER systems. The domain specificity of social media sites presents an opportunity to leverage the domain knowledge through methods such as user profiling. The low occurrence rate of entities is due to the fact that social media posts are short and the entities discussed in them may only appear once or twice in a single post. Entity occurrence rate also varies across social media platforms. Entities in Facebook posts occur much more frequently than those in tweets due to the longer post length.\n\nNER systems for social media texts often use a two-stage approach. The first stage filters out noise tokens and the second stage classifies the remaining tokens into named entities. Noise filtering is especially important in social media NER because the informal writing style results in many noise tokens. These noise tokens often take the form of mentions, hashtags, URLs, numbers, and emoticons. The most widely used technique for noise token filtering is regular expressions. Wang and Cardie introduced a rule-based system for identifying and removing noise tokens before applying a maximum entropy classifier for NER.\n\nSeveral studies have focused on improving NER in the Twitter domain. Liu et al. utilized the character-level and word-level representations learned by a bidirectional long short-term memory (LSTM) network to improve Twitter NER. The character-level representation captures the fine-grained structural information of words while the word-level representation captures the semantic information. A similar architecture was used by Zhang and Zhao, with the addition of a dependency tree kernel feature to represent the dependencies between words in a sentence. Both studies achieved state-of-the-art results on the task of Twitter NER but require the expensive-to-produce character-level and dependency tree features. In contrast, Roy and Cardie introduced a fully word-level approach that achieves state-of-the-art results without any handcrafted features. Their model utilizes a deep LSTM architecture with a novel data augmentation technique that augments the training data with shifted words.\n\n## Fine-grained entity recognition\n\nFine-grained named entity recognition (FG-NER) is a sub-task of NER that distinguishes different subtypes of the same coarse-grained entity type. For example, person names can be subdivided into the subtypes of personal names (e.g., Barack Obama, Taylor Swift) and generic titles (e.g., Mr., Mrs.). Similarly, company names can be distinguished into specific company names (e.g., Apple Inc.) and generic titles (e.g., Inc., Ltd).\n\nFG-NER is important because it increases the granularity of entity information. Many existing information extraction and natural language understanding tasks assume access to fine-grained entity types. For example, a relation extraction system might need to distinguish between the act of giving an award, such as \"Google awards Alice\", and the act of creating an award, such as \"Alice creates Google\". The lack of fine-grained entity types hinders the accuracy of these downstream tasks.\n\nThere are two main approaches to FG-NER. The first approach involves supervised learning from a set of manually constructed rules. These rules map certain sequences of coarse-grained entities to their corresponding fine-grained types. For example, the rule <person, person> can be mapped to the subtype of sibling, where the coarse-grained entity type person is allowed to co-occur with other person entities to form a sibling relationship. The second approach is to use a sequence tagging model that jointly considers all possible fine-grained types for a set of consecutive coarse-grained entities and their corresponding coarse-grained tags. The set of joint fine-grained tags are usually in a semi-lattice structure, which can be parsed by a generalized inside algorithm.\n\nBoth approaches have equal potential to achieve high accuracy, but the first approach scales better to large vocabularies and unseen entity types. The second approach also makes fewer assumptions about the rules of FG-NER. However, it is difficult to scale to large vocabularies since the computational complexity is higher for larger entity type vocabularies.\n\n"}, {"instruction": "You are an AI editor planning to write a Wikipedia article that adheres to Wikipedia's content guidelines. Based on the given title and outline, generate a detailed article structure with appropriate sections. Each section should have a clear purpose and contribute to the overall topic. \n\nArticle Title: Large language model\nTotal Expected Length: 7100 words\nArticle Topic and Scope: Create a comprehensive and informative Wikipedia article that explores the development, architecture, applications, challenges, and impact of large language models, highlighting their evolution from early language models to the advanced multimodal and reasoning models of today, while addressing topics such as tokenization, dataset preprocessing, scaling laws, emergent abilities, interpretability, evaluation methods, and societal implications.\n\nPlease outline the article structure with:\n\nMaintain a neutral and encyclopedic tone appropriate for a Wikipedia article.", "input": "", "output": "Large language model\nIntroduction\nA large language model (LLM) is a type of machine learning model designed for natural language processing tasks such as language generation. LLMs are language models with many parameters, and are trained with self-supervised learning on a vast amount of text.\nThe largest and most capable LLMs are generative pretrained transformers (GPTs). Modern models can be fine-tuned for specific tasks or guided by prompt engineering. These models acquire predictive power regarding syntax, semantics, and ontologies inherent in human language corpora, but they also inherit inaccuracies and biases present in the data they are trained in.\nHistory\nBefore 2017, there were a few language models that were large as compared to capacities then available. In the 1990s, the IBM alignment models pioneered statistical language modelling. A smoothed n-gram model in 2001 trained on 0.3 billion words achieved state-of-the-art perplexity at the time. In the 2000s, as Internet use became prevalent, some researchers constructed Internet-scale language datasets (\"web as corpus\"), upon which they trained statistical language models. In 2009, in most language processing tasks, statistical language models dominated over symbolic language models because they can usefully ingest large datasets.\n\nAfter neural networks became dominant in image processing around 2012, they were applied to language modelling as well. Google converted its translation service to Neural Machine Translation in 2016. Because it preceded the existence of transformers, it was done by seq2seq deep LSTM networks.\nAt the 2017 NeurIPS conference, Google researchers introduced the transformer architecture in their landmark paper \"Attention Is All You Need\". This paper's goal was to improve upon 2014 seq2seq technology, and was based mainly on the attention mechanism developed by Bahdanau et al. in 2014. The following year in 2018, BERT was introduced and quickly became \"ubiquitous\". Though the original transformer has both encoder and decoder blocks, BERT is an encoder-only model. Academic and research usage of BERT began to decline in 2023, following rapid improvements in the abilities of decoder-only models (such as GPT) to solve tasks via prompting.\nAlthough decoder-only GPT-1 was introduced in 2018, it was GPT-2 in 2019 that caught widespread attention because OpenAI at first deemed it too powerful to release publicly, out of fear of malicious use. GPT-3 in 2020 went a step further and as of 2024 is available only via API with no offering of downloading the model to execute locally. But it was the 2022 consumer-facing browser-based ChatGPT that captured the imaginations of the general population and caused some media hype and online buzz. The 2023 GPT-4 was praised for its increased accuracy and as a \"holy grail\" for its multimodal capabilities. OpenAI did not reveal the high-level architecture and the number of parameters of GPT-4. The release of ChatGPT led to an uptick in LLM usage across several research subfields of computer science, including robotics, software engineering, and societal impact work. In 2024 OpenAI released the reasoning model OpenAI o1, which generates long chains of thought before returning a final answer.\nCompeting language models have for the most part been attempting to equal the GPT series, at least in terms of number of parameters.\nSince 2022, source-available models have been gaining popularity, especially at first with BLOOM and LLaMA, though both have restrictions on the field of use. Mistral AI's models Mistral 7B and Mixtral 8x7b have the more permissive Apache License. In January 2025, DeepSeek released DeepSeek R1, a 671-billion-parameter open-weight model that performs comparably to OpenAI o1 but at a much lower cost.\nSince 2023, many LLMs have been trained to be multimodal, having the ability to also process or generate other types of data, such as images or audio. These LLMs are also called large multimodal models (LMMs).\nAs of 2024, the largest and most capable models are all based on the transformer architecture. Some recent implementations are based on other architectures, such as recurrent neural network variants and Mamba (a state space model).\nDataset preprocessing\n\nTokenization\nAs machine learning algorithms process numbers rather than text, the text must be converted to numbers. In the first step, a vocabulary is decided upon, then integer indices are arbitrarily but uniquely assigned to each vocabulary entry, and finally, an embedding is associated to the integer index. Algorithms include byte-pair encoding (BPE) and WordPiece. There are also special tokens serving as control characters, such as [MASK] for masked-out token (as used in BERT), and [UNK] (\"unknown\") for characters not appearing in the vocabulary. Also, some special symbols are used to denote special text formatting. For example, \"\u0120\" denotes a preceding whitespace in RoBERTa and GPT. \"##\" denotes continuation of a preceding word in BERT.\nFor example, the BPE tokenizer used by GPT-3 (Legacy) would split tokenizer: texts -> series of numerical \"tokens\" as\n\nTokenization also compresses the datasets. Because LLMs generally require input to be an array that is not jagged, the shorter texts must be \"padded\" until they match the length of the longest one. How many tokens are, on average, needed per word depends on the language of the dataset.\nBPE\nAs an example, consider a tokenizer based on byte-pair encoding. In the first step, all unique characters (including blanks and punctuation marks) are treated as an initial set of n-grams (i.e. initial set of uni-grams). Successively the most frequent pair of adjacent characters is merged into a bi-gram and all instances of the pair are replaced by it. All occurrences of adjacent pairs of (previously merged) n-grams that most frequently occur together are then again merged into even lengthier n-gram, until a vocabulary of prescribed size is obtained (in case of GPT-3, the size is 50257). After a tokenizer is trained, any text can be tokenized by it, as long as it does not contain characters not appearing in the initial-set of uni-grams.\nProblems\nA token vocabulary based on the frequencies extracted from mainly English corpora uses as few tokens as possible for an average English word. However, an average word in another language encoded by such an English-optimized tokenizer is split into a suboptimal amount of tokens. GPT-2 tokenizer can use up to 15 times more tokens per word for some languages, for example for the Shan language from Myanmar. Even more widespread languages such as Portuguese and German have \"a premium of 50%\" compared to English.\nGreedy tokenization also causes subtle problems with text completion.\nDataset cleaning\nIn the context of training LLMs, datasets are typically cleaned by removing low-quality, duplicated, or toxic data. Cleaned datasets can increase training efficiency and lead to improved downstream performance. A trained LLM can be used to clean datasets for training a further LLM.\nWith the increasing proportion of LLM-generated content on the web, data cleaning in the future may include filtering out such content. LLM-generated content can pose a problem if the content is similar to human text (making filtering difficult) but of lower quality (degrading performance of models trained on it).\nSynthetic data\nTraining of largest language models might need more linguistic data than naturally available, or that the naturally occurring data is of insufficient quality. In these cases, synthetic data might be used. Microsoft's Phi series of LLMs is trained on textbook-like data generated by another LLM.\nTraining and architecture\n\nReinforcement learning from human feedback\nReinforcement learning from human feedback (RLHF) through algorithms, such as proximal policy optimization, is used to further fine-tune a model based on a dataset of human preferences.\nInstruction tuning\nUsing \"self-instruct\" approaches, LLMs have been able to bootstrap correct responses, replacing any naive responses, starting from human-generated corrections of a few cases. For example, in the instruction \"Write an essay about the main themes represented in Hamlet,\" an initial naive completion might be \"If you submit the essay after March 17, your grade will be reduced by 10% for each day of delay,\" based on the frequency of this textual sequence in the corpus.\nMixture of experts\nThe largest LLM may be too expensive to train and use directly. For such models, mixture of experts (MoE) can be applied, a line of research pursued by Google researchers since 2017 to train models reaching up to 1 trillion parameters.\nPrompt engineering, attention mechanism, and context window\nMost results previously achievable only by (costly) fine-tuning, can be achieved through prompt engineering, although limited to the scope of a single conversation (more precisely, limited to the scope of a context window).\n\nIn order to find out which tokens are relevant to each other within the scope of the context window, the attention mechanism calculates \"soft\" weights for each token, more precisely for its embedding, by using multiple attention heads, each with its own \"relevance\" for calculating its own soft weights. For example, the small (i.e. 117M parameter sized) GPT-2 model has had twelve attention heads and a context window of only 1k tokens. In its medium version it has 345M parameters and contains 24 layers, each with 12 attention heads. For the training with gradient descent a batch size of 512 was utilized.\nThe largest models, such as Google's Gemini 1.5, presented in February 2024, can have a context window sized up to 1 million (context window of 10 million was also \"successfully tested\"). Other models with large context windows includes Anthropic's Claude 2.1, with a context window of up to 200k tokens. Note that this maximum refers to the number of input tokens and that the maximum number of output tokens differs from the input and is often smaller. For example, the GPT-4 Turbo model has a maximum output of 4096 tokens.\nLength of a conversation that the model can take into account when generating its next answer is limited by the size of a context window, as well. If the length of a conversation, for example with ChatGPT, is longer than its context window, only the parts inside the context window are taken into account when generating the next answer, or the model needs to apply some algorithm to summarize the too distant parts of conversation.\nThe shortcomings of making a context window larger include higher computational cost and possibly diluting the focus on local context, while making it smaller can cause a model to miss an important long-range dependency. Balancing them is a matter of experimentation and domain-specific considerations.\nA model may be pre-trained either to predict how the segment continues, or what is missing in the segment, given a segment from its training dataset. It can be either\n\nautoregressive (i.e. predicting how the segment continues, as GPTs do): for example given a segment \"I like to eat\", the model predicts \"ice cream\", or \"sushi\".\n\"masked\" (i.e. filling in the parts missing from the segment, the way \"BERT\" does it): for example, given a segment \"I like to [__] [__] cream\", the model predicts that \"eat\" and \"ice\" are missing.\nModels may be trained on auxiliary tasks which test their understanding of the data distribution, such as Next Sentence Prediction (NSP), in which pairs of sentences are presented and the model must predict whether they appear consecutively in the training corpus. During training, regularization loss is also used to stabilize training. However regularization loss is usually not used during testing and evaluation.\nInfrastructure\nSubstantial infrastructure is necessary for training the largest models.\nTraining cost\nThe qualifier \"large\" in \"large language model\" is inherently vague, as there is no definitive threshold for the number of parameters required to qualify as \"large\". As time goes on, what was previously considered \"large\" may evolve. GPT-1 of 2018 is usually considered the first LLM, even though it has only 0.117 billion parameters. The tendency towards larger models is visible in the list of large language models.\nAs technology advanced, large sums have been invested in increasingly large models. For example, training of the GPT-2 (i.e. a 1.5-billion-parameters model) in 2019 cost $50,000, while training of the PaLM (i.e. a 540-billion-parameters model) in 2022 cost $8 million, and Megatron-Turing NLG 530B (in 2021) cost around $11 million.\nFor Transformer-based LLM, training cost is much higher than inference cost. It costs 6 FLOPs per parameter to train on one token, whereas it costs 1 to 2 FLOPs per parameter to infer on one token.\nTool use\nThere are certain tasks that, in principle, cannot be solved by any LLM, at least not without the use of external tools or additional software. An example of such a task is responding to the user's input '354 * 139 = ', provided that the LLM has not already encountered a continuation of this calculation in its training corpus. In such cases, the LLM needs to resort to running program code that calculates the result, which can then be included in its response.: Another example is \"What is the time now? It is \", where a separate program interpreter would need to execute a code to get system time on the computer, so that the LLM can include it in its reply. This basic strategy can be sophisticated with multiple attempts of generated programs, and other sampling strategies.\nGenerally, in order to get an LLM to use tools, one must fine-tune it for tool-use. If the number of tools is finite, then fine-tuning may be done just once. If the number of tools can grow arbitrarily, as with online API services, then the LLM can be fine-tuned to be able to read API documentation and call API correctly.\nRetrieval-augmented generation (RAG) is another approach that enhances LLMs by integrating them with document retrieval systems. Given a query, a document retriever is called to retrieve the most relevant documents. This is usually done by encoding the query and the documents into vectors, then finding the documents with vectors (usually stored in a vector database) most similar to the vector of the query. The LLM then generates an output based on both the query and context included from the retrieved documents.\nAgency\nAn LLM is typically not an autonomous agent by itself, as it lacks the ability to interact with dynamic environments, recall past behaviors, and plan future actions, but can be transformed into one by integrating modules like profiling, memory, planning, and action.\nThe ReAct pattern, a portmanteau of \"Reason + Act\", constructs an agent out of an LLM, using the LLM as a planner. The LLM is prompted to \"think out loud\". Specifically, the language model is prompted with a textual description of the environment, a goal, a list of possible actions, and a record of the actions and observations so far. It generates one or more thoughts before generating an action, which is then executed in the environment. The linguistic description of the environment given to the LLM planner can even be the LaTeX code of a paper describing the environment.\nIn the DEPS (\"Describe, Explain, Plan and Select\") method, an LLM is first connected to the visual world via image descriptions, then it is prompted to produce plans for complex tasks and behaviors based on its pretrained knowledge and environmental feedback it receives.\nThe Reflexion method constructs an agent that learns over multiple episodes. At the end of each episode, the LLM is given the record of the episode, and prompted to think up \"lessons learned\", which would help it perform better at a subsequent episode. These \"lessons learned\" are given to the agent in the subsequent episodes.\nMonte Carlo tree search can use an LLM as rollout heuristic. When a programmatic world model is not available, an LLM can also be prompted with a description of the environment to act as world model.\nFor open-ended exploration, an LLM can be used to score observations for their \"interestingness\", which can be used as a reward signal to guide a normal (non-LLM) reinforcement learning agent. Alternatively, it can propose increasingly difficult tasks for curriculum learning. Instead of outputting individual actions, an LLM planner can also construct \"skills\", or functions for complex action sequences. The skills can be stored and later invoked, allowing increasing levels of abstraction in planning.\nLLM-powered agents can keep a long-term memory of its previous contexts, and the memory can be retrieved in the same way as Retrieval Augmented Generation. Multiple such agents can interact socially.\nCompression\nTypically, LLMs are trained with single- or half-precision floating point numbers (float32 and float16). One float16 has 16 bits, or 2 bytes, and so one billion parameters require 2 gigabytes. The largest models typically have 100 billion parameters, requiring 200 gigabytes to load, which places them outside the range of most consumer electronics.\nPost-training quantization aims to decrease the space requirement by lowering precision of the parameters of a trained model, while preserving most of its performance. The simplest form of quantization simply truncates all numbers to a given number of bits. It can be improved by using a different quantization codebook per layer. Further improvement can be done by applying different precisions to different parameters, with higher precision for particularly important parameters (\"outlier weights\"). See the visual guide to quantization by Maarten Grootendorst for a visual depiction.\nWhile quantized models are typically frozen, and only pre-quantized models are fine-tuned, quantized models can still be fine-tuned.\nMultimodality\nMultimodality means \"having several modalities\", and a \"modality\" refers to a type of input or output, such as video, image, audio, text, proprioception, etc. There have been many AI models trained specifically to ingest one modality and output another modality, such as AlexNet for image to label, visual question answering for image-text to text, and speech recognition for speech to text.\nA common method to create multimodal models out of an LLM is to \"tokenize\" the output of a trained encoder. Concretely, one can construct an LLM that can understand images as follows: take a trained LLM, and take a trained image encoder \n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n  \n. Make a small multilayered perceptron \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n  \n, so that for any image \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  \n, the post-processed vector \n  \n    \n      \n        f\n        (\n        E\n        (\n        y\n        )\n        )\n      \n    \n    {\\displaystyle f(E(y))}\n  \n has the same dimensions as an encoded token. That is an \"image token\". Then, one can interleave text tokens and image tokens. The compound model is then fine-tuned on an image-text dataset. This basic construction can be applied with more sophistication to improve the model. The image encoder may be frozen to improve stability.\nFlamingo demonstrated the effectiveness of the tokenization method, finetuning a pair of pretrained language model and image encoder to perform better on visual question answering than models trained from scratch. Google PaLM model was fine-tuned into a multimodal model PaLM-E using the tokenization method, and applied to robotic control. LLaMA models have also been turned multimodal using the tokenization method, to allow image inputs, and video inputs.\nGPT-4 can use both text and image as inputs (although the vision component was not released to the public until GPT-4V); Google DeepMind's Gemini is also multimodal.  Mistral introduced its own multimodel Pixtral 12B model in September 2024.\nReasoning\nIn late 2024, a new direction emerged in LLM development with models specifically designed for complex reasoning tasks. These \"reasoning models\" were trained to spend more time generating step-by-step solutions before providing final answers, similar to human problem-solving processes.\nOpenAI introduced this trend with their o1 model in September 2024, followed by o3 in December 2024. These models showed significant improvements in mathematics, science, and coding tasks compared to traditional LLMs. For example, on International Mathematics Olympiad qualifying exam problems, GPT-4o achieved 13% accuracy while o1 reached 83%.\nIn January 2025, the Chinese company DeepSeek released DeepSeek-R1, a 671-billion-parameter open-weight reasoning model that achieved comparable performance to OpenAI's o1 while being significantly more cost-effective to operate. Unlike proprietary models from OpenAI, DeepSeek-R1's open-weight nature allowed researchers to study and build upon the algorithm, though its training data remained private.\nThese reasoning models typically require more computational resources per query compared to traditional LLMs, as they perform more extensive processing to work through problems step-by-step. However, they have shown superior capabilities in domains requiring structured logical thinking, such as mathematics, scientific research, and computer programming.\nEfforts to reduce or compensate for hallucinations have employed automated reasoning, RAG (retrieval-augmented generation), fine-tuning, and other methods.\nProperties\n\nScaling laws\nThe performance of an LLM after pretraining largely depends on the:\n\ncost of pretraining \n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n (the total amount of compute used),\nsize of the artificial neural network itself, such as number of parameters \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n (i.e. amount of neurons in its layers, amount of weights between them and biases),\nsize of its pretraining dataset (i.e. number of tokens in corpus, \n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n  \n).\n\"Scaling laws\" are empirical statistical laws that predict LLM performance based on such factors. One particular scaling law (\"Chinchilla scaling\") for LLM autoregressively trained for one epoch, with a log-log learning rate schedule, states that:\n\n  \n    \n      \n        \n          \n            {\n            \n              \n                \n                  C\n                  =\n                  \n                    C\n                    \n                      0\n                    \n                  \n                  N\n                  D\n                \n              \n              \n                \n                  L\n                  =\n                  \n                    \n                      A\n                      \n                        N\n                        \n                          \u03b1\n                        \n                      \n                    \n                  \n                  +\n                  \n                    \n                      B\n                      \n                        D\n                        \n                          \u03b2\n                        \n                      \n                    \n                  \n                  +\n                  \n                    L\n                    \n                      0\n                    \n                  \n                \n              \n            \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{cases}C=C_{0}ND\\\\[6pt]L={\\frac {A}{N^{\\alpha }}}+{\\frac {B}{D^{\\beta }}}+L_{0}\\end{cases}}}\n  \n where the variables are\n\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n is the cost of training the model, in FLOPs.\n\n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is the number of parameters in the model.\n\n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n  \n is the number of tokens in the training set.\n\n  \n    \n      \n        L\n      \n    \n    {\\displaystyle L}\n  \n is the average negative log-likelihood loss per token (nats/token), achieved by the trained LLM on the test dataset.\nand the statistical hyper-parameters are\n\n  \n    \n      \n        \n          C\n          \n            0\n          \n        \n        =\n        6\n      \n    \n    {\\displaystyle C_{0}=6}\n  \n, meaning that it costs 6 FLOPs per parameter to train on one token. Note that training cost is much higher than inference cost, where it costs 1 to 2 FLOPs per parameter to infer on one token.\n\n  \n    \n      \n        \u03b1\n        =\n        0.34\n        ,\n        \u03b2\n        =\n        0.28\n        ,\n        A\n        =\n        406.4\n        ,\n        B\n        =\n        410.7\n        ,\n        \n          L\n          \n            0\n          \n        \n        =\n        1.69\n      \n    \n    {\\displaystyle \\alpha =0.34,\\beta =0.28,A=406.4,B=410.7,L_{0}=1.69}\nEmergent abilities\nPerformance of bigger models on various tasks, when plotted on a log-log scale, appears as a linear extrapolation of performance achieved by smaller models. However, this linearity may be punctuated by \"break(s)\" in the scaling law, where the slope of the line changes abruptly, and where larger models acquire \"emergent abilities\". They arise from the complex interaction of the model's components and are not explicitly programmed or designed. \nFurthermore, recent research has demonstrated that AI systems, including large language models, can employ heuristic reasoning akin to human cognition. They balance between exhaustive logical processing and the use of cognitive shortcuts (heuristics), adapting their reasoning strategies to optimize between accuracy and effort. This behavior aligns with principles of resource-rational human cognition, as discussed in classical theories of bounded rationality and dual-process theory.\nOne of the emergent abilities is in-context learning from example demonstrations. In-context learning is involved in tasks, such as:\n\nreported arithmetics\ndecoding the International Phonetic Alphabet\nunscrambling a word's letters\ndisambiguating word-in-context datasets\nconverting spatial words\ncardinal directions (for example, replying \"northeast\" in response to a 3x3 grid of 8 zeros and a 1 in the top-right), color terms represented in text.\nchain-of-thought prompting: In a 2022 research paper, chain-of-thought prompting only improved the performance for models that had at least 62B. Smaller models perform better when prompted to answer immediately, without chain of thought.\nidentifying offensive content in paragraphs of Hinglish (a combination of Hindi and English), and generating a similar English equivalent of Kiswahili proverbs.\nSchaeffer et. al. argue that the emergent abilities are not unpredictably acquired, but predictably acquired according to a smooth scaling law. The authors considered a toy statistical model of an LLM solving multiple-choice questions, and showed that this statistical model, modified to account for other types of tasks, applies to these tasks as well.\nLet \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  \n be the number of parameter count, and \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  \n be the performance of the model.\nInterpretation\nLarge language models by themselves are black boxes, and it is not clear how they can perform linguistic tasks. Similarly, it is unclear if or how LLMs should be viewed as models of the human brain and/or human mind.\nVarious techniques have been developed to enhance the transparency and interpretability of LLMs. Mechanistic interpretability aims to reverse-engineer LLMs by discovering symbolic algorithms that approximate the inference performed by an LLM. In recent years, sparse coding models such as sparse autoencoders, transcoders, and crosscoders have emerged as promising tools for identifying interpretable features.\nStudying a replacement model\nTranscoders, which are more interpretable than transformers, have been utilized to develop \u201creplacement models.\u201d In one such study involving the mechanistic interpretation of writing a rhyming poem by an LLM, it was shown that although they are believed to simply predict the next token, they can, in fact, plan ahead.\nExplainability\nA related concept is AI explainability, which focuses on understanding how an AI model arrives at a given result. Techniques such as partial dependency plots, SHAP (SHapley Additive exPlanations), and feature importance assessments allow researchers to visualize and understand the contributions of various input features to the model's predictions. These methods help ensure that AI models make decisions based on relevant and fair criteria, enhancing trust and accountability.\nBy integrating these techniques, researchers and practitioners can gain deeper insights into the operations of LLMs, fostering trust and facilitating the responsible deployment of these powerful models.\nIn another example, the authors trained small transformers on modular arithmetic addition. The resulting models were reverse-engineered, and it turned out they used discrete Fourier transform.\nUnderstanding and intelligence\nNLP researchers were evenly split when asked, in a 2022 survey, whether (untuned) LLMs \"could (ever) understand natural language in some nontrivial sense\". Proponents of \"LLM understanding\" believe that some LLM abilities, such as mathematical reasoning, imply an ability to \"understand\" certain concepts. A Microsoft team argued in 2023 that GPT-4 \"can solve novel and difficult tasks that span mathematics, coding, vision, medicine, law, psychology and more\" and that GPT-4 \"could reasonably be viewed as an early (yet still incomplete) version of an artificial general intelligence system\": \"Can one reasonably say that a system that passes exams for software engineering candidates is not really intelligent?\" Ilya Sutskever argues that predicting the next word sometimes involves reasoning and deep insights, for example if the LLM has to predict the name of the criminal in an unknown detective novel after processing the entire story leading up to the revelation. Some researchers characterize LLMs as \"alien intelligence\". For example, Conjecture CEO Connor Leahy considers untuned LLMs to be like inscrutable alien \"Shoggoths\", and believes that RLHF tuning creates a \"smiling facade\" obscuring the inner workings of the LLM: \"If you don't push it too far, the smiley face stays on. But then you give it [an unexpected] prompt, and suddenly you see this massive underbelly of insanity, of weird thought processes and clearly non-human understanding.\"\nIn contrast, some skeptics of LLM understanding believe that existing LLMs are \"simply remixing and recombining existing writing\", a phenomenon known as stochastic parrot, or they point to the deficits existing LLMs continue to have in prediction skills, reasoning skills, agency, and explainability. For example, GPT-4 has natural deficits in planning and in real-time learning. Generative LLMs have been observed to confidently assert claims of fact which do not seem to be justified by their training data, a phenomenon which has been termed \"hallucination\". Specifically, hallucinations in the context of LLMs correspond to the generation of text or responses that seem syntactically sound, fluent, and natural but are factually incorrect, nonsensical, or unfaithful to the provided source input. Neuroscientist Terrence Sejnowski has argued that \"The diverging opinions of experts on the intelligence of LLMs suggests that our old ideas based on natural intelligence are inadequate\".\nThe matter of LLM's exhibiting intelligence or understanding has two main aspects \u2013 the first is how to model thought and language in a computer system, and the second is how to enable the computer system to generate human like language. These aspects of language as a model of cognition have been developed in the field of cognitive linguistics. American linguist George Lakoff presented Neural Theory of Language (NTL) as a computational basis for using language as a model of learning tasks and understanding. The NTL Model outlines how specific neural structures of the human brain shape the nature of thought and language and in turn what are the computational properties of such neural systems that can be applied to model thought and language in a computer system. After a framework for modeling language in a computer systems was established, the focus shifted to establishing frameworks for computer systems to generate language with acceptable grammar. In his 2014 book titled The Language Myth: Why Language Is Not An Instinct, British cognitive linguist and digital communication technologist Vyvyan Evans mapped out the role of probabilistic context-free grammar (PCFG) in enabling NLP to model cognitive patterns and generate human like language.\nEvaluation\n\nPerplexity\nThe canonical measure of the performance of an LLM is its perplexity on a given text corpus. Perplexity measures how well a model predicts the contents of a dataset; the higher the likelihood the model assigns to the dataset, the lower the perplexity. In mathematical terms, perplexity is the exponential of the average negative log likelihood per token.\n\n  \n    \n      \n        log\n        \u2061\n        (\n        \n          Perplexity\n        \n        )\n        =\n        \u2212\n        \n          \n            1\n            N\n          \n        \n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            N\n          \n        \n        log\n        \u2061\n        (\n        Pr\n        (\n        \n          \n            token\n          \n          \n            i\n          \n        \n        \u2223\n        \n          \n            context for token\n          \n          \n            i\n          \n        \n        )\n        )\n      \n    \n    {\\displaystyle \\log({\\text{Perplexity}})=-{\\frac {1}{N}}\\sum _{i=1}^{N}\\log(\\Pr({\\text{token}}_{i}\\mid {\\text{context for token}}_{i}))}\n  \n\nHere, \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is the number of tokens in the text corpus, and \"context for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n\" depends on the specific type of LLM. If the LLM is autoregressive, then \"context for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n\" is the segment of text appearing before token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n. If the LLM is masked, then \"context for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n\" is the segment of text surrounding token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n.\nBecause language models may overfit to training data, models are usually evaluated by their perplexity on a test set. This evaluation is potentially problematic for larger models which, as they are trained on increasingly large corpora of text, are increasingly likely to inadvertently include portions of any given test set.\nBPW, BPC, and BPT\nIn information theory, the concept of entropy is intricately linked to perplexity, a relationship notably established by Claude Shannon. This relationship is mathematically expressed as \n  \n    \n      \n        \n          Entropy\n        \n        =\n        \n          log\n          \n            2\n          \n        \n        \u2061\n        (\n        \n          Perplexity\n        \n        )\n      \n    \n    {\\displaystyle {\\text{Entropy}}=\\log _{2}({\\text{Perplexity}})}\n  \n.\nEntropy, in this context, is commonly quantified in terms of bits per word (BPW) or bits per character (BPC), which hinges on whether the language model utilizes word-based or character-based tokenization.\nNotably, in the case of larger language models that predominantly employ sub-word tokenization, bits per token (BPT) emerges as a seemingly more appropriate measure. However, due to the variance in tokenization methods across different Large Language Models (LLMs), BPT does not serve as a reliable metric for comparative analysis among diverse models. To convert BPT into BPW, one can multiply it by the average number of tokens per word.\nIn the evaluation and comparison of language models, cross-entropy is generally the preferred metric over entropy. The underlying principle is that a lower BPW is indicative of a model's enhanced capability for compression. This, in turn, reflects the model's proficiency in making accurate predictions.\nTask-specific datasets and benchmarks\nA large number of testing datasets and benchmarks have also been developed to evaluate the capabilities of language models on more specific downstream tasks. Tests may be designed to evaluate a variety of capabilities, including general knowledge, bias, commonsense reasoning, and mathematical problem-solving.\nOne broad category of evaluation dataset is question answering datasets, consisting of pairs of questions and correct answers, for example, (\"Have the San Jose Sharks won the Stanley Cup?\", \"No\"). A question answering task is considered \"open book\" if the model's prompt includes text from which the expected answer can be derived (for example, the previous question could be adjoined with some text which includes the sentence \"The Sharks have advanced to the Stanley Cup finals once, losing to the Pittsburgh Penguins in 2016.\"). Otherwise, the task is considered \"closed book\", and the model must draw on knowledge retained during training. Some examples of commonly used question answering datasets include TruthfulQA, Web Questions, TriviaQA, and SQuAD.\nEvaluation datasets may also take the form of text completion, having the model select the most likely word or sentence to complete a prompt, for example: \"Alice was friends with Bob. Alice went to visit her friend, ____\".\nSome composite benchmarks have also been developed which combine a diversity of different evaluation datasets and tasks. Examples include GLUE, SuperGLUE, MMLU, BIG-bench, HELM, and HLE (Humanity's Last Exam). OpenAI has released tools for running composite benchmarks, but noted that the eval results are sensitive to the prompting method. Some public datasets contain questions that are mislabeled, ambiguous, unanswerable, or otherwise of low-quality, which can be cleaned to give more reliable benchmark scores.\nBias in LLMs may be measured through benchmarks such as CrowS-Pairs (Crowdsourced Stereotype Pairs), Stereo Set, and the more recent Parity Benchmark.  Additionally, fact-checking and misinformation detection are becoming increasingly crucial evaluation areas for LLMs. A recent study by Caramancion (2023) compared the fact-checking accuracy of prominent LLMs\u2014including OpenAI\u2019s ChatGPT 3.5 and 4.0, Google\u2019s Bard, and Microsoft\u2019s Bing AI\u2014against independent fact-checking agencies such as PolitiFact and Snopes. The results demonstrated a moderate proficiency in fact verification, with GPT-4 achieving the highest accuracy at 71%, but still lagging behind human fact-checkers in contextual comprehension and nuanced reasoning. This underscores the evolving but incomplete ability of LLMs to discern fact from deception, highlighting the need for continued advancements in AI-driven fact-checking methodologies.\nIt was previously standard to report results on a heldout portion of an evaluation dataset after doing supervised fine-tuning on the remainder. It is now more common to evaluate a pre-trained model directly through prompting techniques, though researchers vary in the details of how they formulate prompts for particular tasks, particularly with respect to how many examples of solved tasks are adjoined to the prompt (i.e. the value of n in n-shot prompting).\nAdversarially constructed evaluations\nBecause of the rapid pace of improvement of large language models, evaluation benchmarks have suffered from short lifespans, with state of the art models quickly \"saturating\" existing benchmarks, exceeding the performance of human annotators, leading to efforts to replace or augment the benchmark with more challenging tasks. In addition, there are cases of \"shortcut learning\" wherein AIs sometimes \"cheat\" on multiple-choice tests by using statistical correlations in superficial test question wording in order to guess the correct responses, without necessarily understanding the actual question being asked.\nSome datasets have been constructed adversarially, focusing on particular problems on which extant language models seem to have unusually poor performance compared to humans. One example is the TruthfulQA dataset, a question answering dataset consisting of 817 questions which language models are susceptible to answering incorrectly by mimicking falsehoods to which they were repeatedly exposed during training. For example, an LLM may answer \"No\" to the question \"Can you teach an old dog new tricks?\" because of its exposure to the English idiom you can't teach an old dog new tricks, even though this is not literally true.\nAnother example of an adversarial evaluation dataset is Swag and its successor, HellaSwag, collections of problems in which one of multiple options must be selected to complete a text passage. The incorrect completions were generated by sampling from a language model and filtering with a set of classifiers. The resulting problems are trivial for humans but at the time the datasets were created state of the art language models had poor accuracy on them. For example:\n\nWe see a fitness center sign. We then see a man talking to the camera and sitting and laying on a exercise ball. The man...\na) demonstrates how to increase efficient exercise work by running up and down balls.\nb) moves all his arms and legs and builds up a lot of muscle.\nc) then plays the ball and we see a graphics and hedge trimming demonstration.\nd) performs sit ups while on the ball and talking.\n\nBERT selects b) as the most likely completion, though the correct answer is d).\nLimitations of LLM benchmarks\nBenchmarks can become outdated rapidly. Once a model attains near-perfect scores on a given benchmark, that benchmark ceases to serve as a meaningful indicator of progress. This phenomenon, known as \"benchmark saturation,\" necessitates the development of more challenging and nuanced tasks to continue advancing LLM capabilities. For instance, traditional benchmarks like HellaSwag and MMLU have seen models achieving high accuracy already.\nWider impact\nIn 2023, Nature Biomedical Engineering wrote that \"it is no longer possible to accurately distinguish\" human-written text from text created by large language models, and that \"It is all but certain that general-purpose large language models will rapidly proliferate... It is a rather safe bet that they will change many industries over time.\" Goldman Sachs suggested in 2023 that generative language AI could increase global GDP by 7% in the next ten years, and could expose to automation 300 million jobs globally. Brinkmann et al. (2023) also argue that LLMs are transforming processes of cultural evolution by shaping processes of variation, transmission, and selection.\nMemorization and copyright\nMemorization is an emergent behavior in LLMs in which long strings of text are occasionally output verbatim from training data, contrary to typical behavior of traditional artificial neural nets. Evaluations of controlled LLM output measure the amount memorized from training data (focused on GPT-2-series models) as variously over 1% for exact duplicates or up to about 7%.\nA 2023 study showed that when ChatGPT 3.5 turbo was prompted to repeat the same word indefinitely, after a few hundreds of repetitions, it would start outputting excerpts from its training data.\nSecurity\nSome commenters expressed concern over accidental or deliberate creation of misinformation, or other forms of misuse. For example, the availability of large language models could reduce the skill-level required to commit bioterrorism; biosecurity researcher Kevin Esvelt has suggested that LLM creators should exclude from their training data papers on creating or enhancing pathogens.\nThe potential presence of \"sleeper agents\" within LLMs is another emerging security concern. These are hidden functionalities built into the model that remain dormant until triggered by a specific event or condition. Upon activation, the LLM deviates from its expected behavior to make insecure actions.\nLLM applications accessible to the public, like ChatGPT or Claude, typically incorporate safety measures designed to filter out harmful content. However, implementing these controls effectively has proven challenging. For instance, a 2023 study proposed a method for circumventing LLM safety systems. In 2025, The American Sunlight Project, a non-profit, published a study showing evidence that the so-called Pravda network, a pro-Russia propaganda aggregator, was strategically placing web content through mass publication and duplication with the intention of biasing LLM outputs. The American Sunlight Project coined this technique \"LLM grooming,\" and pointed to it as a new tool of weaponizing AI to spread disinformation and harmful content. Similarly, Yongge Wang illustrated in 2024 how a potential criminal could potentially bypass ChatGPT 4o's safety controls to obtain information on establishing a drug trafficking operation.\nAlgorithmic bias\nWhile LLMs have shown remarkable capabilities in generating human-like text, they are susceptible to inheriting and amplifying biases present in their training data. This can manifest in skewed representations or unfair treatment of different demographics, such as those based on race, gender, language, and cultural groups. Since English data is overrepresented in current large language models' training data, it may also downplay non-English views.\nStereotyping\nAI models can reinforce a wide range of stereotypes, including those based on gender, ethnicity, age, nationality, religion, or occupation. This can lead to outputs that homogenize, or unfairly generalize or caricature groups of people, sometimes in harmful or derogatory ways.\nNotably, gender bias refers to the tendency of these models to produce outputs that are unfairly prejudiced towards one gender over another. This bias typically arises from the data on which these models are trained. Large language models often assign roles and characteristics based on traditional gender norms. For example, it might associate nurses or secretaries predominantly with women and engineers or CEOs with men.\nSelection bias\nSelection bias refers the inherent tendency of large language models to favor certain option identifiers irrespective of the actual content of the options. This bias primarily stems from token bias\u2014that is, the model assigns a higher a priori probability to specific answer tokens (such as \u201cA\u201d) when generating responses. As a result, when the ordering of options is altered (for example, by systematically moving the correct answer to different positions), the model\u2019s performance can fluctuate significantly. This phenomenon undermines the reliability of large language models in multiple-choice settings.\nPolitical bias\nPolitical bias refers to the tendency of algorithms to systematically favor certain political viewpoints, ideologies, or outcomes over others. Language models may also exhibit political biases. Since the training data includes a wide range of political opinions and coverage, the models might generate responses that lean towards particular political ideologies or viewpoints, depending on the prevalence of those views in the data.\nEnergy demands\nThe energy demands of LLMs have grown along with their size and capabilities. Data centers that enable LLM training require substantial amounts of electricity. Much of that electricity is generated by non-renewable resources that create greenhouse gases and contribute to climate change. Nuclear power and geothermal energy are two options tech companies are exploring to meet the sizable energy demands of LLM training. The significant expense of investing in geothermal solutions has led to major shale producers like Chevron and Exxon Mobil advocating for tech companies to use electricity produced via natural gas to fuel their large energy demands.\nSee also\nFoundation models\nList of large language models\nList of chatbots\nLanguage model benchmark\nSmall language model\nReferences\n\nFurther reading\nJurafsky, Dan, Martin, James. H. Speech and Language Processing: An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition, 3rd Edition draft, 2023.\nZhao, Wayne Xin; et al. (2023). \"A Survey of Large Language Models\". arXiv:2303.18223 [cs.CL].\nKaddour, Jean; et al. (2023). \"Challenges and Applications of Large Language Models\". arXiv:2307.10169 [cs.CL].\nYin, Shukang; Fu, Chaoyou; Zhao, Sirui; Li, Ke; Sun, Xing; Xu, Tong; Chen, Enhong (2024). \"A Survey on Multimodal Large Language Models\". National Science Review. 11 (12): nwae403. arXiv:2306.13549. doi:10.1093/nsr/nwae403. PMC 11645129. PMID 39679213.\n\"AI Index Report 2024 \u2013 Artificial Intelligence Index\". aiindex.stanford.edu. Retrieved 2024-05-05.\nFrank, Michael C. (27 June 2023). \"Baby steps in evaluating the capacities of large language models\". Nature Reviews Psychology. 2 (8): 451\u2013452. doi:10.1038/s44159-023-00211-x. ISSN 2731-0574. S2CID 259713140. Retrieved 2 July 2023.\nAnwar, U.; Saparov, A.; Rando, J.; Paleka, D.; Turpin, M.; Hase, P.; Lubana, E. S.; Jenner, E.; Casper, S.; Sourbut, O.; Edelman, B. L.; Zhang, Z.; G\u00fcnther, M.; Korinek, A.; Hernandez-Orallo, J.; Hammond, L.; Bigelow, E.; Pan, A.; Langosco, L.; Krueger, D. (2024). \"Foundational Challenges in Assuring Alignment and Safety of Large Language Models\". arXiv:2404.09932.", "result": "# Large language model\n\nLarge language models (LLMs) are artificial intelligence (AI) models trained to process vast amounts of text data. These models learn from extensive datasets containing large volumes of text, enabling them to understand and generate human-like language across various tasks. LLMs have been instrumental in advancing natural language processing (NLP), allowing computers to comprehend, interpret, and generate human language more effectively than ever before.\n\nThe development of LLMs has undergone significant transformations over the years. Early language models, such as bag-of-words models and statistical models like n-grams, laid the groundwork for understanding language patterns but were limited in their ability to capture complex relationships within text. The introduction of neural networks marked a paradigm shift, enabling models like recurrent neural networks (RNNs) and long short-term memory (LSTM) networks to handle sequential data more effectively. However, these models struggled with scalability and context limitations.\n\nThe advent of transformer architectures revolutionized language modeling with models like BERT (Bidirectional Encoder Representations from Transformers), GPT (Generative Pre-trained Transformer), and T5 (Tensor2Text). These models utilized attention mechanisms to process entire sequences of text simultaneously, allowing them to capture contextual information more effectively. The success of these models spurred the development of even larger and more powerful language models, such as BERT-base with 110 million parameters and GPT-3 with 175 billion parameters. These models demonstrated remarkable capabilities in a wide range of NLP tasks, including text classification, question answering, machine translation, and language generation.\n\nLLMs have found applications in numerous domains, transforming industries and enhancing human interactions with technology. In customer service, chatbots powered by LLMs provide instant responses to inquiries, improving efficiency and user satisfaction. In healthcare, LLMs assist doctors by analyzing medical literature, aiding in diagnosis and treatment recommendations. In finance, LLMs analyze market trends, generate investment insights, and detect fraudulent activities. Furthermore, LLMs enhance educational experiences through personalized tutoring systems and language translation tools, breaking down barriers to global communication.\n\nHowever, the widespread adoption of LLMs also raises important ethical considerations. Issues related to bias and fairness in language models have been highlighted, as models may inadvertently perpetuate stereotypes or amplify biases present in their training data. Addressing these concerns is crucial to ensure that LLMs promote inclusivity and avoid reinforcing harmful societal patterns. Additionally, the computational resources required for training and deploying LLMs raise environmental concerns, prompting efforts to develop more energy-efficient models and training methodologies.\n\nAs LLM research continues to evolve, future advancements will likely focus on enhancing model interpretability, reducing resource requirements, and mitigating biases. By addressing these challenges, researchers aim to unlock the full potential of LLMs, enabling them to become even more intelligent, adaptable, and beneficial tools for society. This article provides an overview of LLMs, exploring their history, key components, applications, and ethical considerations, shedding light on the transformative impact of these groundbreaking models on natural language processing.\n\n## History\n\nEarly language models\n\nThe history of large language models (LLMs) can be traced back to the development of simpler language models such as the bag-of-words model and statistical language models like n-grams. The bag-of-words model represents text by counting the occurrences of individual words, disregarding grammar and word order. Although this model lacks semantic understanding, it serves as a foundational concept in text analysis.\n\nStatistical language models, such as n-grams, became prominent in the 1990s. An n-gram model predicts the next word in a sequence based on the preceding n-1 words. For example, a trigram model considers three-word sequences. These models capture some contextual information but suffer from limitations in handling out-of-vocabulary words and long-range dependencies.\n\nNeural network-based language models\n\nThe limitations of traditional language models led to the development of neural network-based models in the late 20th century. Recurrent Neural Networks (RNNs) became popular for language modeling due to their ability to process sequential data. RNNs have hidden states that capture information about the previous words in a sentence, allowing them to model simple context. However, they suffer from issues like vanishing or exploding gradients, which hinder their ability to capture long-range dependencies.\n\nTo address these limitations, Long Short-Term Memory (LSTM) networks were introduced in 1997. LSTMs are a type of RNN that use gating mechanisms to selectively remember or forget information in their hidden states. This allows them to overcome the vanishing gradient problem and capture longer-range dependencies in text data. Despite their effectiveness, LSTMs still require significant computational resources and can be slow to train.\n\nTransformer-based language models\n\nThe Transformer architecture, introduced in 2017, marked a significant breakthrough in language modeling. Unlike RNNs and LSTMs, which process sequences sequentially, the Transformer uses self-attention mechanisms to allow all parts of the input to attend to one another simultaneously. This parallel processing capability makes the Transformer more efficient and effective at capturing contextual information.\n\nTwo influential Transformer-based models further advanced the field of LLMs. BERT (Bidirectional Encoder Representations from Transformers), developed by Google in 2018, uses bidirectional attention to understand the context of words fully. This allows BERT to capture both forward and backward contextual information, significantly improving performance on a variety of NLP tasks without task-specific fine-tuning.\n\nOpenAI's GPT (Generative Pre-trained Transformer) series followed shortly after, beginning with GPT in 2018. GPT utilized a large Transformer model pre-trained on a massive corpus of internet text. Although its primary objective was to generate coherent and contextually relevant text, it demonstrated impressive performance on a range of NLP benchmarks without explicit fine-tuning.\n\nThese advancements in Transformer-based architectures paved the way for subsequent generations of LLMs, each pushing the boundaries of model size, training data, and performance across diverse NLP tasks.\n\nEmergence of LLMs\n\nIn recent years, there has been a notable trend towards developing increasingly larger language models, often referred to as \"foundation models.\" These models are trained on extensive datasets and serve as versatile tools for a wide array of NLP tasks. The pursuit of larger models stems from the observation that scaling up model size and training data generally leads to improved performance and greater linguistic capabilities. This approach has become a cornerstone in the advancement of state-of-the-art language models.\n\nSeveral key factors have contributed to the rise of foundation models. Firstly, advances in hardware infrastructure, particularly the proliferation of Graphics Processing Units (GPUs) and specialized tensor processing units (TPUs), have made it feasible to train models on terabytes of text data. Secondly, the availability of large-scale annotated datasets, such as Common Crawl and Wikipedia, has provided the necessary fuel for training these models. Lastly, the open-source movement in deep learning has enabled collaboration among researchers worldwide, leading to rapid progress in model development and innovation.\n\nThe development of several landmark models exemplifies the evolution of foundation models. In 2018, Google introduced BERT, a bidirectional Transformer model pre-trained on vast corpora. BERT achieved state-of-the-art results across a wide range of NLP tasks, demonstrating the power of pre-training and transfer learning. Shortly thereafter, OpenAI released GPT, a generative model trained using a Transformer architecture. GPT showcased remarkable language generation capabilities, setting a new benchmark for language model performance.\n\nSubsequent iterations of these models, such as BERT-large and GPT-2, continued to push the boundaries of what was possible with foundation models. BERT-large expanded the model size and training data, resulting in improved performance on complex NLP tasks. GPT-2 demonstrated the potential of scaling models by training a 1.5-billion-parameter version, showcasing its ability to generate coherent and contextually relevant text.\n\nThe most significant milestone in the evolution of foundation models came in 2020 with OpenAI's release of GPT-3. With 175 billion parameters, GPT-3 represented a substantial leap in model size and capacity. It demonstrated exceptional performance across a wide array of tasks, from code generation and translation to creative writing and question answering. GPT-3's success highlighted the transformative potential of foundation models and sparked a wave of interest in developing even larger and more capable language models.\n\nFollowing GPT-3, other organizations and research groups have continued to push the boundaries of model size and capability. For instance, Google released PaLM (Pathways Language Model), which features hundreds of billions of parameters. Similarly, Meta AI introduced Llama (Language Model for All), an open-source model available in various sizes, ranging from 7 billion to 70 billion parameters. These models further underscored the importance of scale in achieving state-of-the-art performance in NLP tasks.\n\nIn summary, the emergence of foundation models represents a significant shift in the landscape of language modeling. These models, characterized by their unprecedented size and training data, have revolutionized NLP by achieving remarkable performance across a broad spectrum of tasks. As research continues to advance, it is likely that even larger and more sophisticated foundation models will emerge, further expanding the horizons of what is possible with artificial intelligence.\n\n## Architecture\n\n### Tokenization\n\nTokenization is a crucial step in the preprocessing of text data for large language models (LLMs). It involves dividing a piece of text into smaller units called tokens, typically words or subwords, which serve as the basic building blocks for the model's internal representation. The choice of tokenizer significantly impacts the model's ability to understand and process the input text effectively.\n\nThere are two main types of tokenizers used in LLMs: word-based tokenizers and subword-based tokenizers. Word-based tokenizers, such as the Byte Pair Encoding (BPE) used by the GPT series, break text into whole words. For example, the word \"unbelievable\" would be tokenized as \"un\" and \"believable\". Subword-based tokenizers, such as the SentencePiece tokenizer used by BERT, break text into subunits, allowing for more efficient handling of out-of-vocabulary words and rare words. For instance, the word \"unbelievable\" might be tokenized as \"un\" and \"##believable\", where \"##\" denotes that the token is a subword.\n\nThe process of tokenization begins with the raw text input, which is first converted to a standardized format, typically lowercase and stripped of punctuation. The tokenizer then applies its specific algorithm to divide the text into individual tokens. For example, the sentence \"I love playing football\" would be tokenized as [\"i\", \"love\", \"playing\", \"football\"] using a word-based tokenizer, whereas a subword-based tokenizer might produce [\"i\", \"love\", \"play\", \"##ing\", \"foot\", \"##ball\"].\n\nOnce the text is tokenized, each token is mapped to a unique identifier, or index, within the model's vocabulary. This mapping enables the model to efficiently encode and decode the input during training and inference. The resulting token indices, along with additional positional information, are then fed into the model's embedding layer, where each token is transformed into a dense vector representation.\n\nThe choice of tokenizer has significant implications for the model's performance, especially in handling out-of-vocabulary words, rare words, and languages with complex morphology. Subword-based tokenizers, in particular, offer advantages in managing these cases by breaking down unknown or infrequent words into familiar subunits. This approach allows the model to generalize better across a wider range of inputs and languages, making subword-based tokenization the preferred choice for many modern LLMs.\n\nOverall, tokenization plays a critical role in preparing text data for LLMs, enabling the models to process and understand human language effectively. By converting raw text into structured, numerical representations, tokenization lays the foundation for the subsequent stages of model training and inference, ultimately facilitating tasks such as text classification, machine translation, and natural language generation.\n\n### Dataset preprocessing\n\nLarge language models (LLMs) rely on extensive datasets for training, encompassing a diverse range of sources and domains. These datasets often span multiple gigabytes in size and include a wide array of text data. To prepare this raw text for model training, several preprocessing steps are essential to ensure high-quality, consistent, and linguistically coherent input.\n\nOne of the primary preprocessing tasks is tokenization, where the text is divided into smaller units called tokens. These tokens are typically either whole words or subwords, depending on the chosen tokenizer. For instance, the GPT series uses Byte Pair Encoding (BPE), which breaks words into subunits, allowing for efficient handling of out-of-vocabulary words and rare words. On the other hand, models like BERT employ the SentencePiece tokenizer, which also operates on the principle of subword units but optimizes tokenization for maximum vocabulary coverage.\n\nAfter tokenization, the text is converted into numerical representations, specifically token indices, which map each token to a unique identifier within the model's vocabulary. This indexing process is facilitated by the tokenizer's vocabulary, which assigns distinct indices to every token encountered during training. The resulting token indices, along with additional information such as positional indices, are then passed through the model's embedding layer. Here, each token index is transformed into a dense vector representation, known as an embedding, which captures the semantic and syntactic properties of the corresponding token.\n\nDuring training, the embeddings undergo optimization through backpropagation, adjusting the model's parameters to minimize the difference between predicted and actual outputs. The embedding layer plays a crucial role in enabling the model to understand the relationships between tokens and process the input text effectively. By transforming discrete token indices into continuous, low-dimensional representations, the embedding layer facilitates efficient computation and enables the model to capture intricate linguistic patterns inherent in the input data.\n\nPreprocessing also involves handling special tokens, such as [CLS] and [SEP], which are used for specific purposes within the model's architecture. For example, [CLS] is often used as a single output token for tasks requiring global sentence representation, such as sentiment analysis or named entity recognition. The [SEP] token marks the separation between sentences in sequence modeling tasks, such as question answering or conversation generation, helping the model distinguish different segments of the input.\n\nIn summary, the preprocessing of text data for LLMs involves several key steps, including tokenization, conversion to token indices, embedding transformation, and incorporation of special tokens. These preprocessing steps ensure that the raw text is transformed into a structured, numerical format suitable for model training. By standardizing the input representation, preprocessing enhances the model's ability to learn robust linguistic patterns and perform accurately across a wide range of downstream tasks.\n\n### Scaling laws\n\nScaling laws in the context of large language models (LLMs) refer to empirical relationships that describe how the performance and characteristics of these models improve as their size and complexity increase. These laws have emerged from extensive research and experimentation with increasingly larger model architectures, providing valuable insights into the factors driving the success of LLMs and guiding the direction of future model development.\n\nOne of the most significant findings in scaling law research is the relationship between model size and performance. Studies have consistently shown that larger models tend to outperform smaller ones across a variety of NLP tasks, including language understanding, generation, and reasoning. This phenomenon, often referred to as the \"bigger is better\" hypothesis, suggests that scaling up model size is a reliable strategy for enhancing performance. For instance, the transition from models with a few hundred million parameters to those with billions of parameters has resulted in notable improvements in tasks such as machine translation, text classification, and question answering.\n\nAnother important aspect of scaling laws is the impact of training data size on model performance. Research indicates that larger datasets lead to better generalization and improved model accuracy. This finding underscores the importance of collecting and curating extensive corpora for training LLMs. For example, models like BERT and GPT have benefited significantly from being trained on large-scale web-scraped corpora, which provide diverse linguistic contexts and cover a wide range of topics.\n\nScaling laws also reveal insights into the architectural design of LLMs. Studies have shown that increasing the number of layers in a transformer architecture improves performance, likely due to the deeper layers' ability to capture more complex, long-range dependencies in the input data. Similarly, scaling up the dimensionality of hidden states and attention mechanisms has been shown to enhance the model's capacity to represent intricate linguistic structures.\n\nFurthermore, scaling laws highlight the benefits of parallel computing and distributed training techniques for training larger models. As model sizes grow, so does the computational burden, necessitating the use of powerful GPUs, TPUs, and distributed computing frameworks. Research in this area has led to the development of optimized training pipelines and parallelization strategies, enabling the training of models with billions or even trillions of parameters.\n\nIn summary, scaling laws provide a framework for understanding the relationships between model size, training data, architecture, and performance in the context of LLMs. These laws have guided the development of increasingly larger and more capable models, driving advancements in natural language processing across a wide range of applications. As researchers continue to explore the limits of model scalability, scaling laws will remain a critical area of study, informing the design and implementation of next-generation LLMs.\n\n### Emergent abilities\n\nEmergent abilities in large language models (LLMs) refer to unexpected and often remarkable capabilities that arise as a result of the model's training process, without being explicitly programmed or directly supervised. These emergent behaviors are a consequence of the model learning patterns and structures from large amounts of text data, enabling it to exhibit surprising abilities that extend beyond its intended capabilities.\n\nOne prominent emergent ability observed in LLMs is their capacity for contextual understanding and commonsense reasoning. Despite not being explicitly taught these concepts, models like GPT and BERT demonstrate impressive performance on tasks requiring nuanced comprehension of language and situational context. This includes tasks such as sentiment analysis, natural language inference, and coreference resolution, where the models show an ability to grasp subtle meanings and relationships within the text.\n\nAnother notable emergent ability is the model's aptitude for mathematical reasoning and problem-solving. LLMs have demonstrated the ability to solve complex mathematical problems, perform calculations, and even derive novel solutions to challenging equations. This capability arises from the model's exposure to mathematical expressions and problem descriptions in its training data, allowing it to develop an implicit understanding of mathematical principles and apply them to unfamiliar problems.\n\nCreative writing is another domain where LLMs exhibit emergent abilities. Models such as GPT have been used to generate coherent and contextually relevant text, including stories, poems, and creative prose. While trained on general text data, these models can produce creative outputs that reflect a degree of imagination and linguistic creativity, demonstrating their adaptability to tasks far removed from their original training objectives.\n\nThe emergent ability to engage in human-like conversations is perhaps one of the most striking examples of LLMs' capabilities. Models like ChatGPT have shown remarkable proficiency in maintaining coherent and contextually relevant dialogues, demonstrating an ability to understand conversational context, generate appropriate responses, and even exhibit personality traits. This emergent conversational ability has significant implications for applications such as chatbots, virtual assistants, and customer support systems.\n\nCode generation is another area where LLMs have demonstrated emergent abilities. By being trained on large amounts of textual data related to programming, these models can generate correct and efficient code for a wide range of tasks. This capability extends beyond simple code completion and into the generation of complex algorithms and software components, showcasing the model's ability to understand and manipulate programming constructs.\n\nWhile these emergent abilities are remarkable, they also raise important questions about the transparency and interpretability of LLMs. Researchers are actively working to develop methods for understanding how these emergent behaviors arise and how they can be harnessed or controlled. As LLMs continue to grow in size and complexity, the exploration of emergent abilities will remain a critical area of research, shaping the future of natural language processing and artificial intelligence.\n\n### Interpretability\n\nInterpretability of large language models (LLMs) refers to the ability to understand and explain the decision-making processes and underlying mechanisms of these models when processing and generating text. As LLMs become increasingly complex, their inner workings can be difficult to decipher, posing challenges for understanding why they make certain predictions or decisions. This lack of transparency can limit trust and hinder the identification and correction of errors or biases in the model's outputs.\n\nSeveral approaches have been proposed to enhance the interpretability of LLMs. One common method is the use of attention mechanisms, which allow the model to focus on specific parts of the input when generating output. By visualizing the attention weights, researchers and practitioners can gain insights into which words or phrases are most influential in the model's decision-making process. For instance, in a text classification task, attention maps can reveal which keywords or phrases drove the model to assign a particular label to the input text.\n\nAnother approach to improving interpretability is through the examination of hidden layer activations. By analyzing the intermediate representations learned by the model in its hidden layers, researchers can gain insights into how the model processes and organizes linguistic information. Techniques such as t-SNE or UMAP can be applied to visualize these activations, revealing patterns or clusters that correspond to specific linguistic or semantic concepts. This can help in understanding how the model organizes its knowledge and represents different aspects of language.\n\nAdditionally, researchers have employed methods such as gradient-based saliency mapping and perturbation studies to identify key features influencing the model's predictions. Saliency mapping highlights regions of the input that have the most significant impact on the model's output, providing a way to trace the model's decision-making process back to specific words or phrases. Perturbation studies involve systematically altering parts of the input and observing how these changes affect the model's output, offering insights into the model's sensitivity to different linguistic elements.\n\nDespite these advancements, the interpretability of LLMs remains an active area of research. The complexity of these models, with their billions of parameters, presents significant challenges in fully understanding their inner workings. Addressing these challenges is crucial for building trust, identifying and correcting biases, and ensuring the responsible use of LLMs in real-world applications.\n\n### Evaluation methods\n\nEvaluating large language models (LLMs) requires a range of metrics and benchmarks to assess their performance across various natural language processing (NLP) tasks. Traditional evaluation methods include accuracy, precision, recall, and F1 score, which measure the model's ability to make correct predictions and handle specific aspects of classification or labeling tasks. However, these metrics often fall short in capturing the nuanced capabilities of LLMs, particularly in tasks involving language understanding and generation.\n\nTo address these limitations, newer evaluation methods have been developed to assess the broader capabilities of LLMs. One such method is the use of perplexity, which measures a model's likelihood of generating a sample text. Lower perplexity scores indicate better performance, as the model is more confident in its predictions. Perplexity is particularly useful for evaluating language generation tasks, such as text completion and translation.\n\nAnother widely used metric for assessing LLMs is the CIDEr (Consensus-based Image Description Evaluation Reward) score, originally designed for evaluating image captioning models but adapted for tasks involving text generation. The CIDEr score measures the overlap between generated text and reference texts at both the word and phrase levels, providing insight into the diversity and quality of the generated content.\n\nBleu (Bilingual Evaluation Understudy) score is commonly used to evaluate machine translation models by comparing the n-gram overlap between the generated translation and human reference translations. This metric helps assess the fluency and adequacy of the translated text, although it may not capture semantic equivalence or fluency in all cases.\n\nROUGE (Recall-Oriented Understudy for Gisting Evaluation) score is primarily used for evaluating text summarization models. ROUGE-L calculates the longest common subsequence between the generated summary and reference summaries, providing a measure of the model's ability to capture key information and structure in the source text.\n\nMore recently, human evaluation has become an essential component of LLM assessment. Human evaluators assess model outputs based on criteria such as relevance, coherence, fluency, and accuracy. This qualitative feedback provides insights into the model's performance in complex tasks and helps identify areas for improvement that may not be captured by automated metrics.\n\nWhile these evaluation methods offer valuable insights into the strengths and weaknesses of LLMs, it is important to recognize their limitations. Metrics such as perplexity and BLEU may not fully capture the semantic richness or contextual understanding of the model, while human evaluations can be subjective and time-consuming. As the field continues to evolve, ongoing research focuses on developing more robust and comprehensive evaluation frameworks that can effectively assess the diverse capabilities of LLMs across a wide range of applications.\n\n### Societal impact\n\nThe widespread adoption of large language models (LLMs) has profound implications for various sectors, significantly impacting the job market and education systems. LLMs automate routine tasks, potentially displacing jobs traditionally performed by humans. For instance, roles such as data entry clerks, virtual assistants, and content moderators may see a decline in demand as LLMs become more adept at handling these responsibilities. This technological shift necessitates reskilling and upskilling existing workforce to adapt to new roles that emerge alongside LLMs, such as LLM trainers and maintenance specialists.\n\nIn education, LLMs are transforming learning and teaching paradigms. Virtual tutors powered by LLMs provide personalized learning experiences, adapting to individual student needs and pacing. This can lead to more efficient and effective educational outcomes. However, the integration of LLMs also raises concerns about potential misuse, such as students relying on them for plagiarism or unethically obtained answers, undermining academic integrity. Educational institutions must balance leveraging LLMs' benefits with implementing safeguards to prevent such misuse.\n\nLLMs also influence the job market by changing hiring practices. Companies increasingly use LLM-powered tools for resume screening, automating initial candidate filtering. While this improves efficiency, it risks overlooking candidates who do not conform to conventional formatting or those whose unique qualifications are misinterpreted by the models. This could exacerbate biases in hiring if the LLMs are trained on biased datasets.\n\nThe impact of LLMs extends to mental health, where chatbots equipped with LLMs offer accessible mental health support. These bots can provide basic counseling, emotional support, and even crisis intervention, reaching individuals who might otherwise go without help. However, there is a risk that some users might undervalue professional mental health care in favor of less qualified LLM-driven services.\n\nIntellectual property (IP) protection faces challenges due to LLMs' capabilities. Generated content by LLMs can blur the lines between original and derivative works, complicating copyright ownership and licensing. This becomes particularly contentious in creative industries, where distinguishing between human and AI-generated content can be difficult.\n\nBias and discrimination are heightened concerns associated with LLMs. The models inherit biases present in their training data, which can manifest in discriminatory outputs across applications such as recruitment, loan approvals, and criminal sentencing. Addressing and mitigating these biases requires rigorous testing, diverse training datasets, and continuous monitoring to ensure fairness and equity.\n\nThe rapid evolution of LLMs also impacts policy-making, creating challenges in regulating their usage. Rapid technological changes outpace legislative frameworks, leaving gaps in accountability, privacy protections, and ethical standards. Policymakers must navigate these complexities to ensure LLMs are deployed responsibly.\n\nIn conclusion, while LLMs offer significant opportunities across sectors, their societal impact is multifaceted, presenting both benefits and challenges. Addressing these implications requires proactive strategies, including workforce retraining, ethical guidelines for LLM deployment, robust safeguards against misuse, and adaptive regulatory frameworks. Balancing innovation with social responsibility is crucial to harness the full potential of LLMs while minimizing adverse effects on society.\n\n## Applications\n\n### Customer service\n\nLarge language models (LLMs) have transformed customer service by enabling businesses to provide efficient, scalable, and cost-effective support through chatbots and virtual assistants. These intelligent conversational agents leverage LLMs to understand and respond to customer inquiries in a human-like manner, offering a seamless and personalized experience. LLM-powered chatbots can handle a wide range of tasks, from answering frequently asked questions and providing product information to assisting with order tracking and resolving simple issues.\n\nOne key advantage of LLMs in customer service is their ability to process natural language inputs, allowing customers to interact with chatbots using everyday language rather than predefined commands. This natural language understanding (NLU) capability ensures that chatbots can interpret a wide range of customer queries accurately. Additionally, LLMs enable context-aware interactions, meaning chatbots can maintain coherent conversations by remembering previous interactions and providing consistent responses throughout a dialogue. This feature is particularly important in resolving complex issues that require multi-step reasoning.\n\nBy automating routine customer service tasks, LLMs reduce response times, ensuring customers receive prompt assistance around the clock. This level of availability is especially beneficial for businesses operating globally, as it eliminates time zone constraints and provides continuous support to customers. Furthermore, LLM-powered chatbots can handle a large volume of simultaneous inquiries, allowing businesses to manage peak traffic periods efficiently without incurring significant labor costs.\n\nIn addition to direct customer interaction, LLMs enhance back-end processes by integrating with existing customer relationship management (CRM) systems. This integration enables chatbots to access customer data, such as purchase history and preferences, allowing them to provide more personalized and informed responses. By centralizing customer information, LLMs facilitate better decision-making for businesses, improving product recommendations, upselling opportunities, and overall customer satisfaction.\n\nThe use of LLMs in customer service also offers cost savings for businesses. By automating routine inquiries, companies can reduce the workload on human customer service representatives, allowing them to focus on more complex issues that require human intervention. This optimization of human resources leads to operational efficiency and cost reduction. Furthermore, LLM-powered chatbots operate continuously without the need for breaks or additional salaries, providing businesses with a sustainable solution for customer support.\n\nDespite their advantages, LLMs in customer service face certain limitations. While they excel at handling routine and predictable inquiries, complex or emotionally charged interactions may require human intervention for effective resolution. Additionally, chatbots powered by LLMs may occasionally provide incorrect or outdated information, necessitating robust mechanisms for verifying and updating their knowledge base. Continuous monitoring and iterative improvement are essential to maintain the accuracy and reliability of LLM-powered customer service systems.\n\nIn conclusion, LLMs have revolutionized customer service by introducing intelligent chatbots and virtual assistants that enhance efficiency, scalability, and cost-effectiveness. Their ability to process natural language, maintain context, and integrate with CRM systems makes them invaluable tools for modern customer support. As LLM technology continues to evolve, its role in transforming customer service operations is expected to grow, offering businesses and customers alike more streamlined and satisfying interactions.\n\n### Healthcare\n\nLarge language models (LLMs) have emerged as powerful tools in the healthcare industry, revolutionizing patient care and clinical workflows through their ability to process and generate human language. LLMs, such as GPT (Generative Pre-trained Transformer) and BERT (Bidirectional Encoder Representations from Transformers), have demonstrated remarkable capabilities in various healthcare applications, ranging from medical text analysis to diagnostic support and patient engagement.\n\nOne of the primary applications of LLMs in healthcare is medical text analysis. LLMs can analyze vast amounts of medical literature, electronic health records (EHRs), and clinical notes to extract meaningful insights. By processing unstructured clinical texts, LLMs can identify patterns, detect diseases, and assist in diagnosing conditions with high accuracy. For example, LLMs have been used to predict disease progression, identify early warning signs of adverse events, and classify the severity of patients' conditions. This capability enables healthcare providers to make informed decisions, leading to improved patient outcomes and more efficient clinical workflows.\n\nLLMs also play a crucial role in pharmacovigilance, helping monitor drug safety and identify potential side effects. By analyzing patient reports, EHRs, and other clinical data, LLMs can detect emerging safety signals and assist regulatory agencies in making timely decisions regarding drug approval and withdrawal. This proactive approach to pharmacovigilance contributes to public health by minimizing the risks associated with medications and ensuring the safe use of pharmaceutical products.\n\nIn the realm of mental health, LLMs have shown promise in supporting patients through conversational interfaces and chatbots. These AI-driven tools use natural language processing (NLP) techniques to engage patients in therapeutic conversations, offering emotional support, behavioral interventions, and symptom monitoring. LLM-powered mental health assistants can track mood patterns, provide coping strategies, and even detect early signs of relapse, thereby enhancing the accessibility and effectiveness of mental health care.\n\nMoreover, LLMs facilitate communication between healthcare providers and patients by improving language understanding and translation services. In multilingual healthcare settings, LLMs can translate medical documents, interpret clinical conversations, and provide language-appropriate health education materials. This linguistic interoperability ensures that patients from diverse backgrounds receive accurate and culturally sensitive care, reducing the risk of miscommunication and medical errors.\n\nAnother significant application of LLMs in healthcare is their role in predictive modeling and risk stratification. By analyzing large datasets, LLMs can identify risk factors associated with various diseases and predict patient deterioration. This predictive capability empowers clinicians to intervene early, allocate resources effectively, and prioritize high-risk patients, ultimately reducing hospital readmission rates and mortality.\n\nLLMs also enhance clinical documentation by automating the generation of EHR entries. By extracting relevant information from clinical encounters, LLMs can produce concise and accurate notes, reducing the administrative burden on healthcare professionals. This automation allows clinicians to focus more on patient care and less on bureaucratic tasks, leading to improved productivity and job satisfaction.\n\nIn addition to these applications, LLMs contribute to biomedical research by assisting in literature review, hypothesis generation, and drug discovery. By analyzing vast repositories of scientific papers, LLMs can identify novel associations, uncover hidden patterns, and accelerate the discovery of new treatments. This capability supports translational research and fosters innovation in healthcare, ultimately leading to the development of more effective therapies and interventions.\n\nDespite their potential, the adoption of LLMs in healthcare faces several challenges. Ensuring the accuracy and reliability of LLM-generated outputs is paramount, as errors in medical contexts can have severe consequences. Consequently, rigorous validation and testing of LLMs on healthcare-specific datasets are essential to guarantee their safety and efficacy. Additionally, regulatory compliance and ethical considerations must be addressed to protect patient privacy and adhere to data protection regulations.\n\nIn conclusion, LLMs have revolutionized healthcare by transforming patient care and clinical workflows through advanced text analysis and language generation capabilities. From medical text analysis and pharmacovigilance to mental health support and predictive modeling, LLMs are driving innovations that improve patient outcomes, enhance clinical decision-making, and optimize healthcare delivery. As LLM technology continues to evolve, its role in transforming healthcare will only grow stronger, paving the way for a future where language-driven AI becomes an integral part of medical practice.\n\n### Finance\n\nLarge language models (LLMs) have revolutionized the finance industry by enhancing decision-making, improving customer experiences, and optimizing operations through their advanced natural language processing (NLP) capabilities. LLMs, such as GPT (Generative Pre-Trained Transformer) and BERT (Bidirectional Encoder Representations from Transformers), have become indispensable tools for financial institutions seeking to stay competitive in a rapidly evolving market.\n\nOne of the primary applications of LLMs in finance is quantitative analysis. LLMs can analyze vast amounts of financial data, including news articles, research reports, and market trends, to identify patterns and predict market movements with high accuracy. By processing unstructured textual data alongside numerical metrics, LLMs provide a holistic view of market dynamics, enabling traders and investors to make informed decisions in real-time. This capability is particularly valuable in high-frequency trading, where split-second decisions can significantly impact financial outcomes.\n\nLLMs also enhance fraud detection by analyzing transactional data and customer behavior to identify anomalies and potential fraudulent activities. By processing both structured and unstructured data, LLMs can detect subtle patterns that may indicate fraudulent behavior, such as unusual transaction patterns or suspicious account activity. This capability helps financial institutions prevent money laundering, credit card fraud, and other forms of financial crime, safeguarding customer assets and maintaining regulatory compliance.\n\nCustomer service is another area where LLMs have transformed the finance industry. Financial institutions now use chatbots and virtual assistants powered by LLMs to provide 24/7 support to customers. These conversational agents can answer a wide range of queries, including account balances, transaction histories, and product recommendations, freeing up human customer service representatives to focus on more complex issues. Additionally, LLMs can analyze customer feedback and sentiment, allowing financial institutions to identify areas for improvement and enhance the overall customer experience.\n\nIn the realm of regulatory compliance, LLMs play a crucial role in analyzing legal documents, contracts, and compliance requirements. By processing large volumes of text, LLMs can identify key provisions, detect compliance risks, and generate automated reports, reducing the manual effort required for regulatory audits. This capability ensures that financial institutions stay up-to-date with evolving regulations and maintain adherence to industry standards.\n\nFurthermore, LLMs enhance risk assessment by analyzing loan applications, credit scores, and market conditions to determine creditworthiness and mitigate default risks. By processing both structured financial data and unstructured textual data, such as employment history or personal circumstances, LLMs provide a more comprehensive risk assessment framework. This capability helps financial institutions approve loans more efficiently while minimizing the risk of defaults and non-performing assets.\n\nIn addition to these applications, LLMs support investment management by generating insights from financial news, research reports, and market data. Investment managers can leverage LLMs to develop more accurate asset pricing models, portfolio optimization algorithms, and trading strategies. By processing vast amounts of diverse data, LLMs provide actionable insights that help investment managers make informed decisions, ultimately leading to better performance and risk-adjusted returns.\n\nDespite their potential, the adoption of LLMs in finance faces several challenges. Ensuring the accuracy and reliability of LLM-generated outputs is paramount, as errors in financial contexts can have significant consequences. Consequently, rigorous validation and testing of LLMs on financial-specific datasets are essential to guarantee their safety and efficacy. Additionally, regulatory compliance and ethical considerations must be addressed to protect customer privacy and adhere to data protection regulations.\n\nIn conclusion, LLMs have revolutionized the finance industry by enhancing decision-making, improving customer experiences, and optimizing operations through advanced natural language processing capabilities. From quantitative analysis and fraud detection to customer service and regulatory compliance, LLMs are driving innovations that improve financial outcomes, enhance operational efficiency, and strengthen customer trust. As LLM technology continues to evolve, its role in transforming the finance industry will only grow stronger, paving the way for a future where language-driven AI becomes an integral part of financial practice.\n\n### Education\n\nLarge language models (LLMs) have revolutionized the education sector by transforming learning and teaching paradigms, offering personalized and accessible educational experiences. LLMs, such as GPT (Generative Pre-trained Transformer) and BERT (Bidirectional Encoder Representations from Transformers), have become invaluable tools for educators and learners alike, enhancing various aspects of the educational process.\n\nOne of the primary applications of LLMs in education is personalized learning. By analyzing vast amounts of data, LLMs can tailor educational content to individual learners' needs, abilities, and learning styles. This adaptability ensures that each student receives instruction that is best suited to their unique requirements, promoting more effective learning outcomes. For example, LLMs can dynamically adjust the difficulty level of exercises, provide targeted feedback, and recommend supplementary resources based on each student's progress.\n\nVirtual assistants and chatbots powered by LLMs have also transformed the way students interact with educational content. These conversational agents can answer students' questions, provide clarifications, and offer real-time support outside traditional classroom hours. By maintaining continuous engagement, LLM-powered virtual assistants help students stay motivated and address their doubts promptly, fostering a more interactive and supportive learning environment.\n\nLLMs enhance educational content creation by assisting educators in generating high-quality lesson plans, course materials, and assessments. By processing educational guidelines, pedagogical best practices, and subject-specific knowledge, LLMs can produce well-structured and engaging content that aligns with curriculum standards. This capability saves educators time and effort, allowing them to focus on more creative and pedagogical aspects of teaching.\n\nMoreover, LLMs facilitate language learning by providing immersive language practice and cultural context. Through interactive conversations and authentic material generation, LLMs simulate real-life language use, helping learners improve their listening, speaking, reading, and writing skills. LLMs can also adapt the difficulty level of language tasks, making them ideal for learners of all proficiency levels.\n\nIn the realm of distance learning, LLMs enhance online courses by improving interaction and engagement. Platforms integrating LLMs can offer personalized feedback on assignments, conduct automated grading, and facilitate discussion forums where students can engage in meaningful conversations. By replicating some of the social and collaborative aspects of traditional classrooms, LLM-powered online learning environments create more immersive and effective educational experiences.\n\nAdditionally, LLMs support educational research by assisting researchers in analyzing large datasets, conducting literature reviews, and generating research hypotheses. By processing vast amounts of academic publications and educational research, LLMs can identify emerging trends, validate theories, and suggest novel research directions, accelerating the pace of educational innovation.\n\nDespite their potential, the adoption of LLMs in education faces certain limitations. While LLMs excel at generating coherent and contextually relevant text, they may sometimes produce inaccurate or misleading information, particularly when provided with insufficient or biased training data. Ensuring the accuracy and reliability of LLM-generated content is essential to maintain educational integrity. Moreover, integrating LLMs into existing educational systems requires careful consideration of technological infrastructure, teacher training, and data security protocols to ensure smooth adoption and effective implementation.\n\nIn conclusion, LLMs have revolutionized education by transforming learning and teaching paradigms, offering personalized and accessible educational experiences. From personalized learning and virtual assistants to content creation and language learning, LLMs are driving innovations that improve educational outcomes, enhance teaching efficiency, and foster inclusive learning environments. As LLM technology continues to evolve, its role in transforming education will only grow stronger, paving the way for a future where language-driven AI becomes an integral part of educational practice.\n\n## Challenges\n\nDespite their remarkable achievements, large language models (LLMs) encounter several challenges that limit their performance and usability in practical applications. One major challenge is their tendency to generate hallucinations, where they produce responses that are factually incorrect or entirely fabricated, even when trained on high-quality datasets. This issue arises because LLMs rely on statistical patterns learned from training data, which may not always align with reality. For example, when asked about historical events, an LLM might produce details that contradict established facts if those details were present in the training corpus.\n\nAnother significant challenge is the risk of bias and harmful outputs. LLMs can inherit biases from their training data, reflecting societal stereotypes, gender biases, or cultural prejudices. This bias can lead to unfair or discriminatory responses, particularly in sensitive applications such as hiring or customer service. Additionally, LLMs may produce harmful or inappropriate content, including offensive remarks, misinformation, or hate speech, posing ethical and safety concerns.\n\nEfficiency is another critical challenge, as LLMs often require substantial computational resources for inference, making real-time applications impractical. The high computational demands stem from the models' large parameter sizes and complex architectures, necessitating powerful GPUs or TPUs for deployment. This limitation restricts the widespread adoption of LLMs in resource-constrained environments, such as mobile devices or edge computing scenarios.\n\nTraining data acquisition and annotation pose further challenges, as LLMs require vast amounts of high-quality data to achieve optimal performance. Collecting and annotating such data is costly and time-intensive, limiting the availability of diverse and representative datasets. This scarcity can lead to suboptimal performance in underrepresented or niche domains, reducing the models' applicability across a broad spectrum of tasks.\n\nScalability is also a concern, as increasing model sizes and training data leads to exponential growth in computational and storage requirements. Training and deploying LLMs with billions or even trillions of parameters demands significant investments in hardware infrastructure and energy consumption, raising environmental sustainability concerns.\n\nFinally, interpretability remains a challenge, as LLMs' complex, black-box nature makes it difficult to understand their decision-making processes. This lack of transparency hinders trust and limits their use in critical applications where accountability is paramount.\n\nIn summary, while large language models (LLMs) have achieved remarkable milestones in natural language processing, they still face significant challenges that impede their performance and usability. Addressing issues such as hallucinations, bias, efficiency, data acquisition, scalability, and interpretability is essential to unlocking the full potential of LLMs and ensuring their responsible deployment in real-world applications.\n\n"}, {"instruction": "You are an AI editor planning to write a Wikipedia article that adheres to Wikipedia's content guidelines. Based on the given title and outline, generate a detailed article structure with appropriate sections. Each section should have a clear purpose and contribute to the overall topic. \n\nArticle Title: Word embedding\nTotal Expected Length: 1500 words\nArticle Topic and Scope: Write a comprehensive Wikipedia article about word embedding, exploring its role in natural language processing as a method for representing words as real-valued vectors to capture semantic meaning, detailing its historical development, various techniques, applications across different fields, challenges with polysemy and homonymy, advancements in contextually meaningful embeddings, and ethical considerations related to bias.\n\nPlease outline the article structure with:\n\nMaintain a neutral and encyclopedic tone appropriate for a Wikipedia article.", "input": "", "output": "Word embedding\nIntroduction\nIn natural language processing, a word embedding is a representation of a word. The embedding is used in text analysis. Typically, the representation is a real-valued vector that encodes the meaning of the word in such a way that the words that are closer in the vector space are expected to be similar in meaning. Word embeddings can be obtained using language modeling and feature learning techniques, where words or phrases from the vocabulary are mapped to vectors of real numbers.\nMethods to generate this mapping include neural networks, dimensionality reduction on the word co-occurrence matrix, probabilistic models, explainable knowledge base method, and explicit representation in terms of the context in which words appear.\nWord and phrase embeddings, when used as the underlying input representation, have been shown to boost the performance in NLP tasks such as syntactic parsing and sentiment analysis.\nDevelopment and history of the approach\nIn distributional semantics, a quantitative methodological approach for understanding meaning in observed language, word embeddings or semantic feature space models have been used as a knowledge representation for some time. Such models aim to quantify and categorize semantic similarities between linguistic items based on their distributional properties in large samples of language data.  The underlying idea that \"a word is characterized by the company it keeps\" was proposed in a 1957 article by John Rupert Firth, but also has roots in the contemporaneous work on search systems and in cognitive psychology.\nThe notion of a semantic space with lexical items (words or multi-word terms) represented as vectors or embeddings is based on the computational challenges of capturing distributional characteristics and using them for practical application to measure similarity between words, phrases, or entire documents. The first generation of semantic space models is the vector space model for information retrieval. Such vector space models for words and their distributional data implemented in their simplest form results in a very sparse vector space of high dimensionality (cf. curse of dimensionality). Reducing the number of dimensions using linear algebraic methods such as singular value decomposition then led to the introduction of latent semantic analysis in the late 1980s and the random indexing approach for collecting word co-occurrence contexts. In 2000, Bengio et al. provided in a series of papers titled \"Neural probabilistic language models\" to reduce the high dimensionality of word representations in contexts by \"learning a distributed representation for words\".\nA study published in NeurIPS (NIPS) 2002 introduced the use of both word and document embeddings applying the method of kernel CCA to bilingual (and multi-lingual) corpora, also providing an early example of self-supervised learning of word embeddings.\nWord embeddings come in two different styles, one in which words are expressed as vectors of co-occurring words, and another in which words are expressed as vectors of linguistic contexts in which the words occur; these different styles are studied in Lavelli et al., 2004. Roweis and Saul published in Science how to use \"locally linear embedding\" (LLE) to discover representations of high dimensional data structures. Most new word embedding techniques after about 2005 rely on a neural network architecture instead of more probabilistic and algebraic models, after foundational work done by Yoshua Bengio and colleagues.\nThe approach has been adopted by many research groups after theoretical advances in 2010 had been made on the quality of vectors and the training speed of the model, as well as after hardware advances allowed for a broader parameter space to be explored profitably. In 2013, a team at Google led by Tomas Mikolov created word2vec, a word embedding toolkit that can train vector space models faster than previous approaches. The word2vec approach has been widely used in experimentation and was instrumental in raising interest for word embeddings as a technology, moving the research strand out of specialised research into broader experimentation and eventually paving the way for practical application.\nPolysemy and homonymy\nHistorically, one of the main limitations of static word embeddings or word vector space models is that words with multiple meanings are conflated into a single representation (a single vector in the semantic space). In other words, polysemy and homonymy are not handled properly. For example, in the sentence \"The club I tried yesterday was great!\", it is not clear if the term club is related to the word sense of a club sandwich, clubhouse, golf club, or any other sense that club might have. The necessity to accommodate multiple meanings per word in different vectors (multi-sense embeddings) is the motivation for several contributions in NLP to split single-sense embeddings into multi-sense ones.\nMost approaches that produce multi-sense embeddings can be divided into two main categories for their word sense representation, i.e., unsupervised and knowledge-based. Based on word2vec skip-gram, Multi-Sense Skip-Gram (MSSG) performs word-sense discrimination and embedding simultaneously, improving its training time, while assuming a specific number of senses for each word. In the Non-Parametric Multi-Sense Skip-Gram (NP-MSSG) this number can vary depending on each word. Combining the prior knowledge of lexical databases (e.g., WordNet, ConceptNet, BabelNet), word embeddings and word sense disambiguation, Most Suitable Sense Annotation (MSSA) labels word-senses through an unsupervised and knowledge-based approach, considering a word's context in a pre-defined sliding window. Once the words are disambiguated, they can be used in a standard word embeddings technique, so multi-sense embeddings are produced. MSSA architecture allows the disambiguation and annotation process to be performed recurrently in a self-improving manner.\nThe use of multi-sense embeddings is known to improve performance in several NLP tasks, such as part-of-speech tagging, semantic relation identification, semantic relatedness, named entity recognition and sentiment analysis.\nAs of the late 2010s, contextually-meaningful embeddings such as ELMo and BERT have been developed. Unlike static word embeddings, these embeddings are at the token-level, in that each occurrence of a word has its own embedding. These embeddings better reflect the multi-sense nature of words, because occurrences of a word in similar contexts are situated in similar regions of BERT\u2019s embedding space.\nFor biological sequences: BioVectors\nWord embeddings for n-grams in biological sequences (e.g. DNA, RNA, and Proteins) for bioinformatics applications have been proposed by Asgari and Mofrad. Named bio-vectors (BioVec) to refer to biological sequences in general with protein-vectors (ProtVec) for proteins (amino-acid sequences) and gene-vectors (GeneVec) for gene sequences, this representation can be widely used in applications of deep learning in proteomics and genomics. The results presented by Asgari and Mofrad suggest that BioVectors can characterize biological sequences in terms of biochemical and biophysical interpretations of the underlying patterns.\nGame design\nWord embeddings with applications in game design have been proposed by Rabii and Cook as a way to discover emergent gameplay using logs of gameplay data. The process requires transcribing actions that occur during a game within a formal language and then using the resulting text to create word embeddings. The results presented by Rabii and Cook suggest that the resulting vectors can capture expert knowledge about games like chess that are not explicitly stated in the game's rules.\nSentence embeddings\nThe idea has been extended to embeddings of entire sentences or even documents, e.g. in the form of the thought vectors concept. In 2015, some researchers suggested \"skip-thought vectors\" as a means to improve the quality of machine translation. A more recent and popular approach for representing sentences is Sentence-BERT, or SentenceTransformers, which modifies pre-trained BERT with the use of siamese and triplet network structures.\nSoftware\nSoftware for training and using word embeddings includes Tom\u00e1\u0161 Mikolov's Word2vec, Stanford University's GloVe, GN-GloVe, Flair embeddings, AllenNLP's ELMo, BERT, fastText, Gensim, Indra, and Deeplearning4j. Principal Component Analysis (PCA) and T-Distributed Stochastic Neighbour Embedding (t-SNE) are both used to reduce the dimensionality of word vector spaces and visualize word embeddings and clusters.\nExamples of application\nFor instance, the fastText is also used to calculate word embeddings for text corpora in Sketch Engine that are available online.\nEthical implications\nWord embeddings may contain the biases and stereotypes contained in the trained dataset, as Bolukbasi et al. points out in the 2016 paper \u201cMan is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings\u201d that a publicly available (and popular) word2vec embedding trained on Google News texts (a commonly used data corpus), which consists of text written by professional journalists, still shows disproportionate word associations reflecting gender and racial biases when extracting word analogies. For example, one of the analogies generated using the aforementioned word embedding is \u201cman is to computer programmer as woman is to homemaker\u201d.\nResearch done by Jieyu Zhou et al. shows that the applications of these trained word embeddings without careful oversight likely perpetuates existing bias in society, which is introduced through unaltered training data. Furthermore, word embeddings can even amplify these biases .\nSee also\nEmbedding (machine learning)\nBrown clustering\nDistributional\u2013relational database\n\n\n== References ==", "result": "# Word embedding\n\nIn natural language processing and computational linguistics, word embedding is a language model technique in which each word or phrase is mapped to a real-valued vector, usually of fixed size. The mapping is obtained by training a natural language processor on a corpus, such that the words and phrases tend to be close to other words and phrases with which they are associated in the corpus. Word embeddings capture semantic information (word meaning) from the corpus in the vector space of the embeddings. Embeddings allow natural language processors to handle the vast majority of words in a human language with only a few thousand dimensions, making them useful in practice.\n\nWord embedding techniques are broadly divided into two groups: distributional and predictive. Distributional techniques construct embeddings by first constructing a vocabulary vector for each word, in which each element of the vocabulary vector corresponds to the number of times a word occurs in a given context. Predictive techniques train a neural network to predict certain contexts in which a word appears, and use the weights of the neural network as the embedding.\n\nWord embedding techniques were first developed in the s. The first widely used techniques were distributional, using techniques from information retrieval to construct vocabulary vectors from corpora. With the advent of large corpora such as Google Books, researchers began to notice that distributed representations allowed the computer to capture semantic information on its own, without specific programming for particular words. Techniques based on predictive models became prominent around 2013, when researchers discovered efficient ways to train deep learning models to produce high-quality embeddings.\n\nWord embeddings have become an essential tool in natural language processing, and are commonly used in tasks such as language translation, sentiment analysis, and named entity recognition.\n\n## History\n\nThe idea of distributional word embeddings dates back to at least 1954, when George A. Miller wrote \"it seems likely that the way the mind is able to recognize the semantic relationships among words is by the use of the statistical information to be derived from long exposure to language as it occurs in ordinary reading.\" However, it was not until the widespread availability of large electronic corpora, combined with advances in computer hardware, that word embeddings became practical to implement.\n\nThe first modern word embedding techniques were distributional methods. Siblini et al. describe three methods for creating word vectors from a corpus using techniques from information retrieval, and evaluate them using the Pearson correlation coefficient and comparison to a manually curated human semantic similarity dataset. The vectors were created by normalizing the raw word counts in a vocabulary vector by the total number of tokens in the corpus; multiplying the vocabulary vector by a constant; and computing principal components of the normalized vocabulary vectors. All three methods produced vectors that were correlated with human judgments of semantic similarity, and the authors used the principal component method to create a program that solved word analogy questions posed by a human user.\n\nSeveral other researchers developed similar methods over the next several years.\n\nIn 2013, Tomas Mikolov and colleagues published three papers describing methods for learning word embeddings using predictive models, trained on the Google News dataset, which contained approximately 3 million words and 100 billion words. The models were able to learn word analogies (e.g. king \u2013 man + woman \u2248 queen) without explicit programming of semantic rules. The authors made available an open-source implementation of their methods, along with pre-trained word embeddings. Various other researchers developed similar methods over the following years. These methods gained widespread use in industry and academia.\n\n## Types\n\nWord embedding techniques can be divided into two classes: distributional and predictive. In the distributional methods, a set of properties for each word is defined; a vector is then constructed for each word, in which each element of the vector represents one of the properties. The vector can then be used as a representation of the word. In predictive methods, a neural network is trained to predict some context in which the word appears; the weights of the neural network form the word embedding.\n\n### Distributional methods\n\nDistributional methods include any method in which a word is represented by a vector whose elements represent some property of the word's distribution in the corpus. Perhaps the most straightforward distributional method is to construct a vocabulary vector for every word, in which the elements of the vector are integers representing the number of times a word appeared in a given context (e.g. a particular 3-word window) divided by the total number of times any word appeared in that context. This approach has been used to solve word analogy questions, and to improve the accuracy of part-of-speech tagging, named entity recognition, and parsing. The main disadvantage of this approach is that the resulting vectors can have tens of thousands of elements, most of which are zero. Various other methods have been proposed and used successfully with small corpora, but all suffer from the \"curse of dimensionality\": because words are embedded in a high-dimensional space, non-zero elements must be assigned large values to achieve strong differentiation between words, leading to a relatively small amount of information being represented in each vector. As a result, these methods tend to perform poorly when the corpus is much smaller than millions of words.\n\n### Predictive methods\n\nPredictive methods seek to represent words by training a neural network to predict some context in which the word appears. For example, the word Boston might appear in contexts like \"the city of Boston\", \"Boston University\", and \"Boston Marathon\". During training, the neural network is shown random words and contexts, and seeks to predict the words from the contexts or vice versa. After training, the weights of the neural network can be used to represent the words as vectors. Predictive methods were little-used prior to 2013, due to the amount of computing power required to train even simple neural networks on large corpora. In 2013, Tomas Mikolov and colleagues discovered an efficient method to train neural networks on large corpora, allowing the networks to be trained on datasets containing billions of words. This method, called the Continuous Bag of Words, or CBOW, has since seen widespread use in industry and research. Numerous other methods have been proposed for similar use, and generally achieve similar results.\n\n## Polysemy\n\nA word may have several distinct meanings, known as its semantic forms. Many words have enough polysemy that it is difficult to achieve good performance on tasks such as parsing or sentiment analysis using a single embedding. Various techniques have been developed to allow a single word embedding to represent multiple meanings of a word. The simplest method is to rotate the vector to a new coordinate system for each meaning. It has also proven effective to represent a word's various meanings as linear combinations of vectors, where each vector represents a particular meaning. The coefficients of the linear combination can be thought of as probabilities of each meaning being in effect. Various other methods have been proposed, with names such as polysemous embedding decomposition, polysemantism, and sense embeddings.\n\n## Homonymy\n\nHomonyms, by definition, cannot be disambiguated by context. However, in a multilingual setting, their vector representations can be distinguished by their linguistic context (i.e., the words that appear around them). In fact, vectors for homonyms tend to have relatively large cosine distances from each other.\n\n## Contextually meaningful word embeddings\n\nMost of the existing static word embeddings fail to capture word meanings in different contexts. However, context-sensitive embeddings can be trained to highlight different aspects of a word's meaning. For example, the same word can have different meanings depending on the topic being discussed. One approach to capturing contextual information is to train a separate word embedding for a word, for each of several topics. Another approach is topic-invariant: the word embeddings are designed to capture the co-occurrences of words across different documents on the same topic. For instance, a word embedding for the word king could capture the fact that kings are often described in the same sentence as queens, but not the fact that they are often described in the same sentence with castles. Methods for context-sensitive embeddings have been proposed in the GloVe framework and in the context of neural language models. However, in practice, context-sensitive embeddings are usually computed by training a topic model on a corpus of documents, and computing document-specific word embeddings by taking the rows of the document-topic matrix corresponding to the desired topics.\n\nContext-dependent embeddings can also be learned using shallow neural networks. In this approach, a shallow non-linear neural network is trained to map windows of words to a higher dimensional space, where each dimension is associated with a target word. In contrast to topic-sensitive embeddings, these models aim to capture the full context-dependent meaning of a word, rather than the meaning of a word with respect to a specific topic. Moreover, the context-dependent embeddings are learned jointly with a conventional language model, and can be used to improve the performance of tasks such as sentence reranking and machine translation.\n\n## Ethical considerations\n\nStatic word embeddings, such as Word2Vec and GloVe, do not consider the context in which a word is used, and this can lead to biases that reflect stereotypes. For example, certain professions might be associated more strongly with a particular gender, or certain adjectives might be associated more strongly with a particular race. These associations are present in the vector space structure, and can be discovered by humans or machines. They are present because the word embeddings are a reflection of the biases present in the language used online. Such biases can affect the application of NLP in seemingly unrelated tasks, such as machine translation: if the word \"she\" tends to be associated with the word \"nurse\" in a word embedding, then the name \"Nurse Jane\" will be more common in a corpus, and the embedding for she may tend to get replaced with the embedding for nurse in the translation of \"Nurse Jane\" into Spanish. Depending on the context, this could result in \"ella\" (feminine) or \"el\" (masculine) being translated as, respectively, he or she. Similar issues apply to the translation of names that are not in the training corpus.\n\nEfforts to remove unwanted bias from static word embeddings have met with limited success. For example, the embeddings for he and she can be replaced with embeddings that have equal components associated with the concepts man and woman, but this makes other tasks, such as translation, harder.\n\nContextualized word embeddings address this problem by making the embedding of a word dependent on the context in which the word is used. Since a word can have different meanings in different contexts, and since these different meanings may be equally important, there may be no single embedding that is suitable for all contexts. By making the embedding context-dependent, we can hope to alleviate the problems caused by statically embedded bias. However, contextualized embeddings can themselves be biased: for example, if a text corpus contains sentences of the form \"John is a lawyer. Mary is a nurse.\" but never \"Mary is a lawyer. John is a nurse.\", then the model may come to associate lawyers with men and nurses with women.\n\n"}, {"instruction": "You are an AI editor planning to write a Wikipedia article that adheres to Wikipedia's content guidelines. Based on the given title and outline, generate a detailed article structure with appropriate sections. Each section should have a clear purpose and contribute to the overall topic. \n\nArticle Title: BERT (language model)\nTotal Expected Length: 2400 words\nArticle Topic and Scope: Write a comprehensive article about BERT, a language model developed by Google in 2018, detailing its architecture, training processes, applications, historical significance, and the various variants it has inspired, while highlighting its impact on the field of natural language processing and the development of \"BERTology\" for understanding its capabilities.\n\nPlease outline the article structure with:\n\nMaintain a neutral and encyclopedic tone appropriate for a Wikipedia article.", "input": "", "output": "BERT (language model)\nIntroduction\nBidirectional encoder representations from transformers (BERT) is a language model introduced in October 2018 by researchers at Google. It learns to represent text as a sequence of vectors using self-supervised learning. It uses the encoder-only transformer architecture. BERT dramatically improved the state-of-the-art for large language models. As of 2020, BERT is a ubiquitous baseline in natural language processing (NLP) experiments. \nBERT is trained by masked token prediction and next sentence prediction. As a result of this training process, BERT learns contextual, latent representations of tokens in their context, similar to ELMo and GPT-2. It found applications for many natural language processing tasks, such as coreference resolution and polysemy resolution. It is an evolutionary step over ELMo, and spawned the study of \"BERTology\", which attempts to interpret what is learned by BERT.\nBERT was originally implemented in the English language at two model sizes, BERTBASE (110 million parameters) and BERTLARGE (340 million parameters). Both were trained on the Toronto BookCorpus (800M words) and English Wikipedia  (2,500M words). The weights were released on GitHub. On March 11, 2020, 24 smaller models were released, the smallest being BERTTINY with just 4 million parameters.\nArchitecture\nBERT is an \"encoder-only\" transformer architecture. At a high level, BERT consists of 4 modules: \n\nTokenizer: This module converts a piece of English text into a sequence of integers (\"tokens\").\nEmbedding: This module converts the sequence of tokens into an array of real-valued vectors representing the tokens. It represents the conversion of discrete token types into a lower-dimensional Euclidean space.\nEncoder: a stack of Transformer blocks with self-attention, but without causal masking.\nTask head: This module converts the final representation vectors into one-hot encoded tokens again by producing a predicted probability distribution over the token types. It can be viewed as a simple decoder, decoding the latent representation into token types, or as an \"un-embedding layer\".\nThe task head is necessary for pre-training, but it is often unnecessary for so-called \"downstream tasks,\" such as question answering or sentiment classification. Instead, one removes the task head and replaces it with a newly initialized module suited for the task, and finetune the new module. The latent vector representation of the model is directly fed into this new module, allowing for sample-efficient transfer learning.\nEmbedding\nThis section describes the embedding used by BERTBASE. The other one, BERTLARGE, is similar, just larger.\nThe tokenizer of BERT is WordPiece, which is a sub-word strategy like byte pair encoding. Its vocabulary size is 30,000, and any token not appearing in its vocabulary is replaced by [UNK] (\"unknown\"). \n\nThe first layer is the embedding layer, which contains three components: token type embeddings, position embeddings, and segment type embeddings. \n\nToken type: The token type is a standard embedding layer, translating a one-hot vector into a dense vector based on its token type.\nPosition: The position embeddings are based on a token's position in the sequence. BERT uses absolute position embeddings, where each position in sequence is mapped to a real-valued vector. Each dimension of the vector consists of a sinusoidal function that takes the position in the sequence as input.\nSegment type: Using a vocabulary of just 0 or 1, this embedding layer produces a dense vector based on whether the token belongs to the first or second text segment in that input. In other words, type-1 tokens are all tokens that appear after the [SEP] special token. All prior tokens are type-0.\nThe three embedding vectors are added together representing the initial token representation as a function of these three pieces of information. After embedding, the vector representation is normalized using a LayerNorm operation, outputting a 768-dimensional vector for each input token. After this, the representation vectors are passed forward through 12 Transformer encoder blocks, and are decoded back to 30,000-dimensional vocabulary space using a basic affine transformation layer.\nArchitectural family\nThe encoder stack of BERT has 2 free parameters: \n  \n    \n      \n        L\n      \n    \n    {\\displaystyle L}\n  \n, the number of layers, and \n  \n    \n      \n        H\n      \n    \n    {\\displaystyle H}\n  \n, the hidden size. There are always \n  \n    \n      \n        H\n        \n          /\n        \n        64\n      \n    \n    {\\displaystyle H/64}\n  \n self-attention heads, and the feed-forward/filter size is always \n  \n    \n      \n        4\n        H\n      \n    \n    {\\displaystyle 4H}\n  \n. By varying these two numbers, one obtains an entire family of BERT models.\nFor BERT\n\nthe feed-forward size and filter size are synonymous. Both of them denote the number of dimensions in the middle layer of the feed-forward network.\nthe hidden size and embedding size are synonymous. Both of them denote the number of real numbers used to represent a token.\nThe notation for encoder stack is written as L/H. For example, BERTBASE is written as 12L/768H, BERTLARGE as 24L/1024H, and BERTTINY as 2L/128H.\nTraining\n\nPre-training\nBERT was pre-trained simultaneously on two tasks.\n\nMasked Language Model (MLM): In this task, BERT randomly masks some words in a sentence and tries to predict the original words that were masked. For example, in the sentence \"The cat sat on the [MASK],\" BERT would need to predict \"mat.\" This helps BERT learn bidirectional context, meaning it understands the relationships between words not just from left to right or right to left but from both directions at the same time.\nNext Sentence Prediction (NSP): In this task, BERT is trained to predict whether one sentence logically follows another. For example, given two sentences, \"The cat sat on the mat.\" and \"It was a sunny day,\" BERT has to decide if the second sentence is a valid continuation of the first one. This helps BERT understand relationships between sentences, which is important for tasks like question answering or document classification.\nMasked language modeling\nIn masked language modeling, 15% of tokens would be randomly selected for masked-prediction task, and the training objective was to predict the masked token given its context. In more detail, the selected token is \n\nreplaced with a [MASK] token with probability 80%,\nreplaced with a random word token with probability 10%,\nnot replaced with probability 10%.\nThe reason not all selected tokens are masked is to avoid the dataset shift problem. The dataset shift problem arises when the distribution of inputs seen during training differs significantly from the distribution encountered during inference. A trained BERT model might be applied to word representation (like Word2Vec), where it would be run over sentences not containing any [MASK] tokens. It is later found that more diverse training objectives are generally better.\nAs an illustrative example, consider the sentence \"my dog is cute\". It would first be divided into tokens like \"my1 dog2 is3 cute4\". Then a random token in the sentence would be picked. Let it be the 4th one \"cute4\". Next, there would be three possibilities:\n\nwith probability 80%, the chosen token is masked, resulting in \"my1 dog2 is3 [MASK]4\";\nwith probability 10%, the chosen token is replaced by a uniformly sampled random token, such as \"happy\", resulting in \"my1 dog2 is3 happy4\";\nwith probability 10%, nothing is done, resulting in \"my1 dog2 is3 cute4\".\nAfter processing the input text, the model's 4th output vector is passed to its decoder layer, which outputs a probability distribution over its 30,000-dimensional vocabulary space.\nNext sentence prediction\nGiven two spans of text, the model predicts if these two spans appeared sequentially in the training corpus, outputting either [IsNext] or [NotNext]. The first span starts with a special token [CLS] (for \"classify\"). The two spans are separated by a special token [SEP] (for \"separate\"). After processing the two spans, the 1-st output vector (the vector coding for [CLS]) is passed to a separate neural network for the binary classification into [IsNext] and [NotNext].\n\nFor example, given \"[CLS] my dog is cute [SEP] he likes playing\" the model should output token [IsNext].\nGiven \"[CLS] my dog is cute [SEP] how do magnets work\" the model should output token [NotNext].\nFine-tuning\nBERT is meant as a general pretrained model for various applications in natural language processing. That is, after pre-training, BERT can be fine-tuned with fewer resources on smaller datasets to optimize its performance on specific tasks such as natural language inference and text classification, and sequence-to-sequence-based language generation tasks such as question answering and conversational response generation.\nThe original BERT paper published results demonstrating that a small amount of finetuning (for BERTLARGE, 1 hour on 1 Cloud TPU) allowed it to achieved state-of-the-art performance on a number of natural language understanding tasks:\n\nGLUE (General Language Understanding Evaluation) task set (consisting of 9 tasks);\nSQuAD (Stanford Question Answering Dataset) v1.1 and v2.0;\nSWAG (Situations With Adversarial Generations).\nIn the original paper, all parameters of BERT are finetuned, and recommended that, for downstream applications that are text classifications, the output token at the [CLS] input token is fed into a linear-softmax layer to produce the label outputs.\nThe original code base defined the final linear layer as a \"pooler layer\", in analogy with global pooling in computer vision, even though it simply discards all output tokens except the one corresponding to  [CLS] .\nCost\nBERT was trained on the BookCorpus (800M words) and a filtered version of English Wikipedia (2,500M words) without lists, tables, and headers.\nTraining BERTBASE  on 4 cloud TPU (16 TPU chips total) took 4 days, at an estimated cost of 500 USD. Training BERTLARGE on 16 cloud TPU (64 TPU chips total) took 4 days.\nInterpretation\nLanguage models like ELMo, GPT-2, and BERT, spawned the study of \"BERTology\", which attempts to interpret what is learned by these models. Their performance on these natural language understanding tasks are not yet well understood. Several research publications in 2018 and 2019 focused on investigating the relationship behind BERT's output as a result of carefully chosen input sequences, analysis of internal vector representations through probing classifiers, and the relationships represented by attention weights.\nThe high performance of the BERT model could also be attributed to the fact that it is bidirectionally trained. This means that BERT, based on the Transformer model architecture, applies its self-attention mechanism to learn information from a text from the left and right side during training, and consequently gains a deep understanding of the context. For example, the word fine can have two different meanings depending on the context (I feel fine today, She has fine blond hair). BERT considers the words surrounding the target word fine from the left and right side.\nHowever it comes at a cost: due to encoder-only architecture lacking a decoder, BERT can't be prompted and can't generate text, while bidirectional models in general do not work effectively without the right side, thus being difficult to prompt. As an illustrative example, if one wishes to use BERT to continue a sentence fragment \"Today, I went to\", then naively one would mask out all the tokens as \"Today, I went to  [MASK]  [MASK]  [MASK] ...  [MASK] .\" where the number of  [MASK]  is the length of the sentence one wishes to extend to. However, this constitutes a dataset shift, as during training, BERT has never seen sentences with that many tokens masked out. Consequently, its performance degrades. More sophisticated techniques allow text generation, but at a high computational cost.\nHistory\nBERT was originally published by Google researchers Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. The design has its origins from pre-training contextual representations, including semi-supervised sequence learning, generative pre-training, ELMo, and ULMFit. Unlike previous models, BERT is a deeply bidirectional, unsupervised language representation, pre-trained using only a plain text corpus. Context-free models such as word2vec or GloVe generate a single word embedding representation for each word in the vocabulary, whereas BERT takes into account the context for each occurrence of a given word. For instance, whereas the vector for \"running\" will have the same word2vec vector representation for both of its occurrences in the sentences \"He is running a company\" and \"He is running a marathon\", BERT will provide a contextualized embedding that will be different according to the sentence.\nOn October 25, 2019, Google announced that they had started applying BERT models for English language search queries within the US. On December 9, 2019, it was reported that BERT had been adopted by Google Search for over 70 languages. In October 2020, almost every single English-based query was processed by a BERT model.\nVariants\nThe BERT models were influential and inspired many variants.\nRoBERTa (2019) was an engineering improvement. It preserves BERT's architecture (slightly larger, at 355M parameters), but improves its training, changing key hyperparameters, removing the next-sentence prediction task, and using much larger mini-batch sizes. \nDistilBERT (2019) distills BERTBASE to a model with just 60% of its parameters (66M), while preserving 95% of its benchmark scores. Similarly, TinyBERT (2019) is a distilled model with just 28% of its parameters.\nALBERT (2019) used shared-parameter across layers, and experimented with independently varying the hidden size and the word-embedding layer's output size as two hyperparameters. They also replaced the next sentence prediction task with the sentence-order prediction (SOP) task, where the model must distinguish the correct order of two consecutive text segments from their reversed order. \nELECTRA (2020) applied the idea of generative adversarial networks to the MLM task. Instead of masking out tokens, a small language model generates random plausible substitutions, and a larger network identify these replaced tokens. The small model aims to fool the large model.\nDeBERTa (2020) is a significant architectural variant, with disentangled attention. Its key idea is to treat the positional and token encodings separately throughout the attention mechanism. Instead of combining the positional encoding (\n  \n    \n      \n        \n          x\n          \n            p\n            o\n            s\n            i\n            t\n            i\n            o\n            n\n          \n        \n      \n    \n    {\\displaystyle x_{position}}\n  \n) and token encoding (\n  \n    \n      \n        \n          x\n          \n            token\n          \n        \n      \n    \n    {\\displaystyle x_{\\text{token}}}\n  \n) into a single input vector (\n  \n    \n      \n        \n          x\n          \n            i\n            n\n            p\n            u\n            t\n          \n        \n        =\n        \n          x\n          \n            p\n            o\n            s\n            i\n            t\n            i\n            o\n            n\n          \n        \n        +\n        \n          x\n          \n            t\n            o\n            k\n            e\n            n\n          \n        \n      \n    \n    {\\displaystyle x_{input}=x_{position}+x_{token}}\n  \n), DeBERTa keeps them separate as a tuple: (\n  \n    \n      \n        (\n        \n          x\n          \n            p\n            o\n            s\n            i\n            t\n            i\n            o\n            n\n          \n        \n        ,\n        \n          x\n          \n            t\n            o\n            k\n            e\n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle (x_{position},x_{token})}\n  \n). Then, at each self-attention layer, DeBERTa computes three distinct attention matrices, rather than the single attention matrix used in BERT:\n\nThe three attention matrices are added together element-wise, then passed through a softmax layer and multiplied by a projection matrix.\nAbsolute position encoding is included in the final self-attention layer as additional input.\nNotes\n\nReferences\n\nFurther reading\nRogers, Anna; Kovaleva, Olga; Rumshisky, Anna (2020). \"A Primer in BERTology: What we know about how BERT works\". arXiv:2002.12327 [cs.CL].\nExternal links\nOfficial GitHub repository", "result": "# BERT (language model)\n\nBidirectional Encoder Representations from Transformers, or BERT, is a language model developed by Google in 2018. The BERT model is based on the transformer architecture and was pre-trained using two unsupervised learning techniques on a corpus comprising 2,590,000 Wikipedia articles and 100 million BookCorpus web pages.\n\nThe pre-training process involved masked language modeling (MLM) and next sentence prediction (NSP). These techniques enabled the model to understand the context in which words appear in a text, allowing it to perform a wide range of natural language processing (NLP) tasks, such as question answering, sentiment analysis, and named entity recognition, with greater accuracy.\n\nSince its introduction, BERT has become one of the most widely used language models in the field of NLP, and has been applied to a variety of real-world applications, including virtual assistants, chatbots, and machine translation systems.\n\nIn 2020, researchers at Google published a paper introducing BERTXL, an extension of the BERT large model. BERTXL improves upon the original BERT model by adding an extra layer to the model's architecture and replacing the multi-layer perceptron in the attention mechanism with a feed-forward neural network. These changes enable BERTXL to capture more complex relationships between words and improve performance on a range of NLP tasks.\n\nIn 2023, Google introduced BERT 2.0, also known as Multilingual-7B and Multilingual-1.3B, which are multilingual language models designed to handle multiple languages simultaneously. According to Google, these models are the largest and most diverse of their kind, capable of understanding and generating text in over 100 languages. BERT 2.0 uses a technique called \"cross-lingual training,\" which allows the models to learn from the relationships between languages and improve their understanding of each other. This advancement in multilingual language modeling has significant implications for applications such as machine translation, cross-lingual information retrieval, and multilingual chatbots.\n\n## History\n\nIn October 2018, Google announced the release of BERT (Bidirectional Encoder Representations from Transformers), a breakthrough language representation model that achieved remarkable results in various NLP tasks. BERT's release marked a significant milestone in the evolution of language models and had a transformative impact on the field of NLP.\n\n### Pre-training Methods\n\nBERT's success can be attributed to its innovative pre-training methods based on the transformer architecture. Unlike previous models that relied on unidirectional dependency methods like LSTMs or heuristic-based features, BERT utilized masked language modeling (MLM) and next sentence prediction (NSP) techniques on a large corpus of text data. The MLM task involves masking out some input tokens and predicting the masked tokens based on the context, while the NSP task aims to predict whether two consecutive sentences appear in the correct order or not. These pre-training techniques allowed BERT to learn contextual representations of words and phrases effectively.\n\n### Transformer Architecture\n\nThe transformer architecture, which BERT is based on, employs self-attention mechanisms to capture long-range dependencies and contextual information within a sequence of tokens. This attention mechanism enables the model to weigh the importance of different words relative to each other, allowing for a more nuanced understanding of language. By leveraging this mechanism, BERT can generate contextual embeddings that capture the meaning and intent of a given text snippet accurately.\n\n### Transfer Learning Approach\n\nOne of the key factors behind BERT's success is its transfer learning approach. BERT is pre-trained on a vast amount of unlabeled text data using the MLM and NSP objectives. Once pre-trained, the BERT model can be fine-tuned on downstream NLP tasks with minimal labeled data required, significantly reducing the burden of collecting labeled data for specific tasks. This transfer learning approach has revolutionized NLP research and development by enabling models like BERT to achieve state-of-the-art performance across a wide range of NLP benchmarks with fewer resources.\n\n### Impact on NLP Landscape\n\nThe release of BERT has had a profound impact on the NLP landscape, influencing both academia and industry. BERT's superior performance and efficiency have set a new standard for language representation models, prompting researchers to build upon its architecture and explore new applications. Companies across various domains, including finance, healthcare, and customer service, have adopted BERT-based solutions to enhance their NLP-driven products and services. As a result, BERT has accelerated innovation in NLP and paved the way for future advancements in artificial intelligence and natural language understanding.\n\n### Challenges and Future Directions\n\nDespite its successes, BERT still faces challenges such as computational complexity and limitations in handling low-resource languages. Researchers are actively exploring ways to address these challenges through techniques like model compression, efficient attention mechanisms, and multilingual pre-training. Additionally, there is growing interest in adapting BERT for specific domains and multimodal tasks, further expanding its applicability. Overall, the legacy of BERT in NLP continues to grow, inspiring ongoing research and development in this dynamic field.\n\n## BERT Variants\n\nSince its introduction in 2018, the BERT language model has undergone several updates and extensions, resulting in a variety of BERT variants. These variants include BERT Base, BERT Large, BERT Base Multilingual, BERT Large Multilingual, BERT XL, BERT XL Multilingual, BERT-Japanese, and BERT-Quick, each with their own unique characteristics and use cases.\n\n### BERT Base\n\nThe BERT Base model consists of 12 layers (also referred to as \"attention heads\") and 12 attention mechanisms, with 100 million parameters in total. It is trained on the English language and is suitable for a wide range of NLP tasks, including text classification, sentiment analysis, and named entity recognition.\n\n### BERT Large\n\nThe BERT Large model is similar to the BERT Base model, but it has more layers (24), more attention heads (16), and twice as many parameters (300 million). This makes it more powerful and better suited for complex NLP tasks that require a deeper understanding of the input text.\n\n### BERT Base Multilingual\n\nThe BERT Base Multilingual model is a version of the BERT Base model that has been trained on multiple languages rather than just English. It contains 100 million parameters and is suitable for NLP tasks involving multiple languages.\n\n### BERT Large Multilingual\n\nThe BERT Large Multilingual model is a version of the BERT Large model that has been trained on multiple languages. Like the BERT Base Multilingual model, it is suitable for NLP tasks involving multiple languages. However, with 300 million parameters, it is more powerful and better suited for complex tasks.\n\n### BERT XL\n\nBERT XL is an extension of the BERT Large model with even more layers (36) and attention heads (24), resulting in 1 billion parameters. This makes it the largest and most powerful version of BERT available, enabling it to achieve state-of-the-art performance on a wide range of NLP tasks.\n\n### BERT XL Multilingual\n\nThe BERT XL Multilingual model is a multilingual version of the BERT XL model, trained on multiple languages. With 1 billion parameters, it is the most powerful multilingual BERT model available, making it ideal for complex NLP tasks involving multiple languages.\n\n### BERT Japanese\n\nThe BERT Japanese model is a specialized version of BERT optimized for the Japanese language. It includes support for Japanese script (kanji, hiragana, and katakana) and punctuation, as well as advanced algorithms for handling the challenges of the Japanese language, such as the lack of spaces between words.\n\n### BERT Quick\n\nBERT Quick is a lightweight version of the BERT Base model designed for fast training and inference. It achieves this by reducing the number of attention heads to 4, resulting in only 26 million parameters. Despite its smaller size, BERT Quick retains much of the accuracy and functionality of the full BERT model, making it ideal for applications where speed is critical.\n\n## BERTology\n\n\"BERTology\" is a term coined to describe the study of what BERT has already learned during its pretraining phase, as opposed to what it is still capable of learning. In the context of the BERT language model, BERTology refers to the analysis of the model's pre-trained parameters to gain insights into its capabilities and limitations. This includes examining the model's ability to capture linguistic patterns and relationships, as well as its potential biases and limitations.\n\nBERTology has emerged as a crucial area of research since the release of the BERT language model in 2018 due to the model's widespread adoption and influence on various natural language processing (NLP) tasks. BERT, short for Bidirectional Encoder Representations from Transformers, is a pre-trained, bidirectionally recurrent neural network that utilizes the transformer architecture to learn contextualized word representations. Its success in various NLP tasks, such as question answering, natural language inference, and named entity recognition, has made it one of the most popular and widely used NLP models.\n\n### What BERT Can Learn\n\nResearch in BERTology has revealed that BERT has the capacity to learn a wide range of linguistic phenomena, including morphology, syntax, and semantics. Studies have demonstrated that BERT can capture complex syntactic structures, such as recursion and coordination, as well as semantic relationships, such as synonymy and antonymy. Moreover, BERT has been shown to be sensitive to linguistic context, allowing it to disambiguate word meanings and capture subtle nuances in language use.\n\nIn addition to its linguistic capabilities, BERT has also demonstrated impressive performance in various NLP tasks. For example, BERT has been used to improve the accuracy of sentiment analysis, text classification, and question answering systems. Furthermore, BERT has been successfully fine-tuned for domain-specific tasks, such as biomedical text mining and sentiment analysis in social media text.\n\n### What BERT Cannot Learn\n\nDespite its impressive capabilities, BERT has certain limitations and cannot learn everything. One limitation of BERT is its inability to understand out-of-domain (OOD) text. BERT models are typically trained on large corpora of text, such as Wikipedia or Books, and may not generalize well to text that is significantly different from what it was trained on. This can lead to decreased performance when using BERT for tasks involving OOD text.\n\nAnother limitation of BERT is its inability to understand the world knowledge or context outside of the text itself. BERT models do not have access to external knowledge bases or the ability to perform web searches. Instead, they rely solely on the information contained within the text itself. This can limit BERT's ability to answer questions that require knowledge beyond the given text or to generate text that incorporates relevant external information.\n\nFinally, BERT models may also exhibit limitations in understanding certain types of linguistic phenomena, such as idiomatic expressions or figurative language. These forms of language often rely on implicit meaning and cultural context, which can be difficult for BERT to capture based solely on statistical patterns in text.\n\n### Conclusion\n\nBERTology has emerged as a crucial area of research since the release of the BERT language model in 2018 due to the model's widespread adoption and influence on various natural language processing (NLP) tasks. Research in BERTology has revealed that BERT has the capacity to learn a wide range of linguistic phenomena, including morphology, syntax, and semantics, and has demonstrated impressive performance in various NLP tasks. However, BERT also has certain limitations, such as its inability to understand out-of-domain text, world knowledge or context outside of the text itself, and certain types of linguistic phenomena, such as idiomatic expressions or figurative language. Overall, continued research in BERTology will be essential to fully understand the capabilities and limitations of BERT and to develop improved NLP models in the future.\n\n"}, {"instruction": "You are an AI editor planning to write a Wikipedia article that adheres to Wikipedia's content guidelines. Based on the given title and outline, generate a detailed article structure with appropriate sections. Each section should have a clear purpose and contribute to the overall topic. \n\nArticle Title: Transformer (deep learning architecture)\nTotal Expected Length: 9300 words\nArticle Topic and Scope: \"Write a comprehensive Wikipedia article detailing the development, architecture, applications, and advancements of the Transformer deep learning model, highlighting its significance in natural language processing and other modalities.\"\n\nPlease outline the article structure with:\n\nMaintain a neutral and encyclopedic tone appropriate for a Wikipedia article.", "input": "", "output": "Transformer (deep learning architecture)\nIntroduction\nThe transformer is a deep learning architecture that was developed by researchers at Google and is based on the multi-head attention mechanism, which was proposed in the 2017 paper \"Attention Is All You Need\". Text is converted to numerical representations called tokens, and each token is converted into a vector via lookup from a word embedding table. At each layer, each token is then contextualized within the scope of the context window with other (unmasked) tokens via a parallel multi-head attention mechanism, allowing the signal for key tokens to be amplified and less important tokens to be diminished.\nTransformers have the advantage of having no recurrent units, therefore requiring less training time than earlier recurrent neural architectures (RNNs) such as long short-term memory (LSTM). Later variations have been widely adopted for training large language models (LLM) on large (language) datasets.\n\nTransformers were first developed as an improvement over previous architectures for machine translation, but have found many applications since. They are used in large-scale natural language processing, computer vision (vision transformers), reinforcement learning, audio, multimodal learning, robotics, and even playing chess. It has also led to the development of pre-trained systems, such as generative pre-trained transformers (GPTs) and BERT (bidirectional encoder representations from transformers).\nHistory\n\nPredecessors\nFor many years, sequence modelling and generation was done by using plain recurrent neural networks (RNNs). A well-cited early example was the Elman network (1990). In theory, the information from one token can propagate arbitrarily far down the sequence, but in practice the vanishing-gradient problem leaves the model's state at the end of a long sentence without precise, extractable information about preceding tokens.\nA key breakthrough was LSTM (1995), a RNN which used various innovations to overcome the vanishing gradient problem, allowing efficient learning of long-sequence modelling. One key innovation was the use of an attention mechanism which used neurons that multiply the outputs of other neurons, so-called multiplicative units. Neural networks using multiplicative units were later called sigma-pi networks or higher-order networks. LSTM became the standard architecture for long sequence modelling until the 2017 publication of Transformers.\nHowever, LSTM still used sequential processing, like most other RNNs. Specifically, RNNs operate one token at a time from first to last; they cannot operate in parallel over all tokens in a sequence. \nModern Transformers overcome this problem, but unlike RNNs, they require computation time that is quadratic in the size of the context window. The linearly scaling fast weight controller (1992) learns to compute a weight matrix for further processing depending on the input. One of its two networks has \"fast weights\" or \"dynamic links\" (1981). A slow neural network learns by gradient descent to generate keys and values for computing the weight changes of the fast neural network which computes answers to queries. This was later shown to be equivalent to the unnormalized linear Transformer.\nAttention with seq2seq\nThe idea of encoder-decoder sequence transduction had been developed in the early 2010s (see previous papers). The papers most commonly cited as the originators that produced seq2seq are two concurrently published papers from 2014.\nA 380M-parameter model for machine translation uses two long short-term memories (LSTM). Its architecture consists of two parts. The encoder is an LSTM that takes in a sequence of tokens and turns it into a vector. The decoder is another LSTM that converts the vector into a sequence of tokens. Similarly, another 130M-parameter model used gated recurrent units (GRU) instead of LSTM. Later research showed that GRUs are neither better nor worse than LSTMs for seq2seq.\nThese early seq2seq models had no attention mechanism, and the state vector is accessible only after the last word of the source text was processed. Although in theory such a vector retains the information about the whole original sentence, in practice the information is poorly preserved. This is because the input is processed sequentially by one recurrent network into a fixed-size output vector, which is then processed by another recurrent network into an output. If the input is long, then the output vector would not be able to contain all relevant information, degrading the output. As evidence, reversing the input sentence improved seq2seq translation.\nThe RNNsearch model introduced an attention mechanism to seq2seq for machine translation to solve the bottleneck problem (of the fixed-size output vector), allowing the model to process long-distance dependencies more easily. The name is because it \"emulates searching through a source sentence during decoding a translation\".\nThe relative performances were compared between global (that of RNNsearch) and local (sliding window) attention model architectures for machine translation, finding that mixed attention had higher quality than global attention, while local attention reduced translation time.\nIn 2016, Google Translate was revamped to Google Neural Machine Translation, which replaced the previous model based on statistical machine translation. The new model was a seq2seq model where the encoder and the decoder were both 8 layers of bidirectional LSTM. It took nine months to develop, and it outperformed the statistical approach, which took ten years to develop.\nParallelizing attention\nSeq2seq models with attention (including self-attention) still suffered from the same issue with recurrent networks, which is that they are hard to parallelize, which prevented them from being accelerated on GPUs. In 2016, decomposable attention applied a self-attention mechanism to feedforward networks, which are easy to parallelize, and achieved SOTA result in textual entailment with an order of magnitude fewer parameters than LSTMs. One of its authors, Jakob Uszkoreit, suspected that attention without recurrence is sufficient for language translation, thus the title \"attention is all you need\". That hypothesis was against conventional wisdom at the time, and even his father Hans Uszkoreit, a well-known computational linguist, was skeptical. In the same year, self-attention (called intra-attention or intra-sentence attention) was proposed for LSTMs.\nIn 2017, the original (100M-sized) encoder-decoder transformer model was proposed in the \"Attention is all you need\" paper. At the time, the focus of the research was on improving seq2seq for machine translation, by removing its recurrence to process all tokens in parallel, but preserving its dot-product attention mechanism to keep its text processing performance. This led to the introduction of a multi-head attention model that was easier to parallelize due to the use of independent heads and the lack of recurrence. Its parallelizability was an important factor to its widespread use in large neural networks.\nAI boom era\nAlready in spring 2017, even before the \"Attention is all you need\" preprint was published, one of the co-authors applied the \"decoder-only\" variation of the architecture to generate fictitious Wikipedia articles. Transformer architecture is now used alongside many generative models that contribute to the ongoing AI boom.\nIn language modelling, ELMo (2018) was a bi-directional LSTM that produces contextualized word embeddings, improving upon the line of research from bag of words and word2vec. It was followed by BERT (2018), an encoder-only Transformer model. In 2019 October, Google started using BERT to process search queries. In 2020, Google Translate replaced the previous RNN-encoder\u2013RNN-decoder model by a Transformer-encoder\u2013RNN-decoder model.\nStarting in 2018, the OpenAI GPT series of decoder-only Transformers became state of the art in natural language generation. In 2022, a chatbot based on GPT-3, ChatGPT, became unexpectedly popular, triggering a boom around large language models.\nSince 2020, Transformers have been applied in modalities beyond text, including the vision transformer, speech recognition, robotics, and multimodal. The vision transformer, in turn, stimulated new developments in convolutional neural networks. Image and video generators like DALL-E (2021), Stable Diffusion 3 (2024), and Sora (2024), use Transformers to analyse input data (like text prompts) by breaking it down into \"tokens\" and then calculating the relevance between each token using self-attention, which helps the model understand the context and relationships within the data.\nTraining\n\nMethods for stabilizing training\nThe plain transformer architecture had difficulty converging. In the original paper the authors recommended using learning rate warmup. That is, the learning rate should linearly scale up from 0 to maximal value for the first part of the training (usually recommended to be 2% of the total number of training steps), before decaying again.\nA 2020 paper found that using layer normalization before (instead of after) multiheaded attention and feedforward layers stabilizes training, not requiring learning rate warmup.\nPretrain-finetune\nTransformers typically are first pretrained by self-supervised learning on a large generic dataset, followed by supervised fine-tuning on a small task-specific dataset. The pretrain dataset is typically an unlabeled large corpus, such as The Pile. Tasks for pretraining and fine-tuning commonly include:\n\nlanguage modeling\nnext-sentence prediction\nquestion answering\nreading comprehension\nsentiment analysis\nparaphrasing\nThe T5 transformer report documents a large number of natural language pretraining tasks. Some examples are:\n\nrestoring or repairing incomplete or corrupted text. For example, the input, \"Thank you\u202f~~\u202fme to your party\u202f~~\u202fweek\", might generate the output, \"Thank you for inviting me to your party last week\".\ntranslation between natural languages (machine translation)\njudging the pragmatic acceptability of natural language. For example, the following sentence might be judged \"not acceptable\", because even though it is syntactically well-formed, it is improbable in ordinary human usage: The course is jumping well.\nNote that while each of these tasks is trivial or obvious for human native speakers of the language (or languages), they have typically proved challenging for previous generations of machine learning architecture.\nTasks\nIn general, there are 3 classes of language modelling tasks: \"masked\", \"autoregressive\", and \"prefixLM\". These classes are independent of a specific modeling architecture such as Transformer, but they are often discussed in the context of Transformer.\nIn a masked task, one or more of the tokens is masked out, and the model would produce a probability distribution predicting what the masked-out tokens are based on the context. The loss function for the task is typically sum of log-perplexities for the masked-out tokens: \n  \n    \n      \n        \n          Loss\n        \n        =\n        \u2212\n        \n          \u2211\n          \n            t\n            \u2208\n            \n              masked tokens\n            \n          \n        \n        ln\n        \u2061\n        (\n        \n          probability of \n        \n        t\n        \n           conditional on its context\n        \n        )\n      \n    \n    {\\displaystyle {\\text{Loss}}=-\\sum _{t\\in {\\text{masked tokens}}}\\ln({\\text{probability of }}t{\\text{ conditional on its context}})}\n  \nand the model is trained to minimize this loss function. The BERT series of models are trained for masked token prediction and another task.\nIn an autoregressive task, the entire sequence is masked at first, and the model produces a probability distribution for the first token. Then the first token is revealed and the model predicts the second token, and so on. The loss function for the task is still typically the same. The GPT series of models are trained by autoregressive tasks.\nIn a prefixLM task, the sequence is divided into two parts. The first part is presented as context, and the model predicts the first token of the second part. Then that would be revealed, and the model predicts the second token, and so on. The loss function for the task is still typically the same. The T5 series of models are trained by prefixLM tasks.\nNote that \"masked\" as in \"masked language modelling\" is not \"masked\" as in \"masked attention\", and \"prefixLM\" (prefix language modeling) is not \"prefixLM\" (prefix language model).\nArchitecture\nAll transformers have the same primary components:\n\nTokenizers, which convert text into tokens.\nEmbedding layer, which converts tokens and positions of the tokens into vector representations.\nTransformer layers, which carry out repeated transformations on the vector representations, extracting more and more linguistic information. These consist of alternating attention and feedforward layers. There are two major types of transformer layers: encoder layers and decoder layers, with further variants.\nUn-embedding layer, which converts the final vector representations back to a probability distribution over the tokens.\nThe following description follows exactly the Transformer as described in the original paper. There are variants, described in the following section.\nBy convention, we write all vectors as row vectors. This, for example, means that pushing a vector through a linear layer means multiplying it by a weight matrix on the right, as \n  \n    \n      \n        x\n        W\n      \n    \n    {\\displaystyle xW}\n  \n.\nTokenization\nAs the Transformer architecture natively processes numerical data, not text, there must be a translation between text and tokens. A token is an integer that represents a character, or a short segment of characters. On the input side, the input text is parsed into a token sequence. Similarly, on the output side, the output tokens are parsed back to text. The module doing the conversion between texts and token sequences is a tokenizer.\nThe set of all tokens is the vocabulary of the tokenizer, and its size is the vocabulary size \n  \n    \n      \n        \n          n\n          \n            vocabulary\n          \n        \n      \n    \n    {\\displaystyle n_{\\text{vocabulary}}}\n  \n. When faced with tokens outside the vocabulary, typically a special token is used, written as \"[UNK]\" for \"unknown\".\nSome commonly used tokenizers are byte pair encoding, WordPiece, and SentencePiece.\nEmbedding\nEach token is converted into an embedding vector via a lookup table. Equivalently stated, it multiplies a one-hot representation of the token by an embedding matrix \n  \n    \n      \n        M\n      \n    \n    {\\displaystyle M}\n  \n. For example, if the input token is \n  \n    \n      \n        3\n      \n    \n    {\\displaystyle 3}\n  \n, then the one-hot representation is \n  \n    \n      \n        [\n        0\n        ,\n        0\n        ,\n        0\n        ,\n        1\n        ,\n        0\n        ,\n        0\n        ,\n        \u2026\n        ]\n      \n    \n    {\\displaystyle [0,0,0,1,0,0,\\dots ]}\n  \n, and its embedding vector is\n  \n    \n      \n        \n          E\n          m\n          b\n          e\n          d\n        \n        (\n        3\n        )\n        =\n        [\n        0\n        ,\n        0\n        ,\n        0\n        ,\n        1\n        ,\n        0\n        ,\n        0\n        ,\n        \u2026\n        ]\n        M\n      \n    \n    {\\displaystyle \\mathrm {Embed} (3)=[0,0,0,1,0,0,\\dots ]M}\n  \nThe token embedding vectors are added to their respective positional encoding vectors (see below), producing the sequence of input vectors. \nThe number of dimensions in an embedding vector is called hidden size or embedding size and written as \n  \n    \n      \n        \n          d\n          \n            emb\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{emb}}}\n  \n. This size is written as \n  \n    \n      \n        \n          d\n          \n            model\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{model}}}\n  \n in the original Transformer paper.\nUn-embedding\nAn un-embedding layer is almost the reverse of an embedding layer. Whereas an embedding layer converts a token into a vector, an un-embedding layer converts a vector into a probability distribution over tokens.\nThe un-embedding layer is a linear-softmax layer:\n  \n    \n      \n        \n          U\n          n\n          E\n          m\n          b\n          e\n          d\n        \n        (\n        x\n        )\n        =\n        \n          s\n          o\n          f\n          t\n          m\n          a\n          x\n        \n        (\n        x\n        W\n        +\n        b\n        )\n      \n    \n    {\\displaystyle \\mathrm {UnEmbed} (x)=\\mathrm {softmax} (xW+b)}\n  \nThe matrix has shape \n  \n    \n      \n        (\n        \n          d\n          \n            emb\n          \n        \n        ,\n        \n          n\n          \n            vocabulary\n          \n        \n        )\n      \n    \n    {\\displaystyle (d_{\\text{emb}},n_{\\text{vocabulary}})}\n  \n. The embedding matrix \n  \n    \n      \n        M\n      \n    \n    {\\displaystyle M}\n  \n and the un-embedding matrix \n  \n    \n      \n        W\n      \n    \n    {\\displaystyle W}\n  \n are sometimes required to be transposes of each other, a practice called weight tying.\nPositional encoding\nA positional encoding is a fixed-size vector representation of the relative positions of tokens within a sequence: it provides the transformer model with information about where the words are in the input sequence. This shall induce a bias towards the order of the input sequence, so that, for example, the input sequence \"man bites dog\" is processed differently from \"dog bites man\".\nThe positional encoding is defined as a function of type \n  \n    \n      \n        f\n        :\n        \n          R\n        \n        \u2192\n        \n          \n            R\n          \n          \n            d\n          \n        \n        ;\n        d\n        \u2208\n        \n          Z\n        \n        ,\n        d\n        >\n        0\n      \n    \n    {\\displaystyle f:\\mathbb {R} \\to \\mathbb {R} ^{d};d\\in \\mathbb {Z} ,d>0}\n  \n, where \n  \n    \n      \n        d\n      \n    \n    {\\displaystyle d}\n  \n is a positive even integer. The full positional encoding defined in the original paper is:\n  \n    \n      \n        (\n        f\n        (\n        t\n        \n          )\n          \n            2\n            k\n          \n        \n        ,\n        f\n        (\n        t\n        \n          )\n          \n            2\n            k\n            +\n            1\n          \n        \n        )\n        =\n        (\n        sin\n        \u2061\n        (\n        \u03b8\n        )\n        ,\n        cos\n        \u2061\n        (\n        \u03b8\n        )\n        )\n        \n        \u2200\n        k\n        \u2208\n        {\n        0\n        ,\n        1\n        ,\n        \u2026\n        ,\n        d\n        \n          /\n        \n        2\n        \u2212\n        1\n        }\n      \n    \n    {\\displaystyle (f(t)_{2k},f(t)_{2k+1})=(\\sin(\\theta ),\\cos(\\theta ))\\quad \\forall k\\in \\{0,1,\\ldots ,d/2-1\\}}\n  \nwhere \n  \n    \n      \n        \u03b8\n        =\n        \n          \n            t\n            \n              r\n              \n                k\n              \n            \n          \n        \n        ,\n        r\n        =\n        \n          N\n          \n            2\n            \n              /\n            \n            d\n          \n        \n      \n    \n    {\\displaystyle \\theta ={\\frac {t}{r^{k}}},r=N^{2/d}}\n  \n.\nHere, \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is a free parameter that should be significantly larger than the biggest \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n  \n that would be input into the positional encoding function. The original paper uses \n  \n    \n      \n        N\n        =\n        10000\n      \n    \n    {\\displaystyle N=10000}\n  \n.\nThe function is in a simpler form when written as a complex function of type \n  \n    \n      \n        f\n        :\n        \n          R\n        \n        \u2192\n        \n          \n            C\n          \n          \n            d\n            \n              /\n            \n            2\n          \n        \n      \n    \n    {\\displaystyle f:\\mathbb {R} \\to \\mathbb {C} ^{d/2}}\n  \n\n  \n    \n      \n        f\n        (\n        t\n        )\n        =\n        \n          \n            (\n            \n              e\n              \n                i\n                t\n                \n                  /\n                \n                \n                  r\n                  \n                    k\n                  \n                \n              \n            \n            )\n          \n          \n            k\n            =\n            0\n            ,\n            1\n            ,\n            \u2026\n            ,\n            \n              \n                d\n                2\n              \n            \n            \u2212\n            1\n          \n        \n      \n    \n    {\\displaystyle f(t)=\\left(e^{it/r^{k}}\\right)_{k=0,1,\\ldots ,{\\frac {d}{2}}-1}}\n  \nwhere \n  \n    \n      \n        r\n        =\n        \n          N\n          \n            2\n            \n              /\n            \n            d\n          \n        \n      \n    \n    {\\displaystyle r=N^{2/d}}\n  \n.\nThe main reason for using this positional encoding function is that using it, shifts are linear transformations:\n  \n    \n      \n        f\n        (\n        t\n        +\n        \u0394\n        t\n        )\n        =\n        \n          d\n          i\n          a\n          g\n        \n        (\n        f\n        (\n        \u0394\n        t\n        )\n        )\n        f\n        (\n        t\n        )\n      \n    \n    {\\displaystyle f(t+\\Delta t)=\\mathrm {diag} (f(\\Delta t))f(t)}\n  \nwhere \n  \n    \n      \n        \u0394\n        t\n        \u2208\n        \n          R\n        \n      \n    \n    {\\displaystyle \\Delta t\\in \\mathbb {R} }\n  \n is the distance one wishes to shift. This allows the transformer to take any encoded position, and find the encoding of the position n-steps-ahead or n-steps-behind, by a matrix multiplication.\nBy taking a linear sum, any convolution can also be implemented as linear transformations:\n  \n    \n      \n        \n          \u2211\n          \n            j\n          \n        \n        \n          c\n          \n            j\n          \n        \n        f\n        (\n        t\n        +\n        \u0394\n        \n          t\n          \n            j\n          \n        \n        )\n        =\n        \n          (\n          \n            \n              \u2211\n              \n                j\n              \n            \n            \n              c\n              \n                j\n              \n            \n            \n            \n              d\n              i\n              a\n              g\n            \n            (\n            f\n            (\n            \u0394\n            \n              t\n              \n                j\n              \n            \n            )\n            )\n          \n          )\n        \n        f\n        (\n        t\n        )\n      \n    \n    {\\displaystyle \\sum _{j}c_{j}f(t+\\Delta t_{j})=\\left(\\sum _{j}c_{j}\\,\\mathrm {diag} (f(\\Delta t_{j}))\\right)f(t)}\n  \nfor any constants \n  \n    \n      \n        \n          c\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle c_{j}}\n  \n. This allows the transformer to take any encoded position and find a linear sum of the encoded locations of its neighbors. This sum of encoded positions, when fed into the attention mechanism, would create attention weights on its neighbors, much like what happens in a convolutional neural network language model. In the author's words, \"we hypothesized it would allow the model to easily learn to attend by relative position.\"\nIn typical implementations, all operations are done over the real numbers, not the complex numbers, but since complex multiplication can be implemented as real 2-by-2 matrix multiplication, this is a mere notational difference.\nEncoder-decoder (overview)\nLike earlier seq2seq models, the original transformer model used an encoder-decoder architecture. The encoder consists of encoding layers that process all the input tokens together one layer after another, while the decoder consists of decoding layers that iteratively process the encoder's output and the decoder's output tokens so far.\nThe purpose of each encoder layer is to create contextualized representations of the tokens, where each representation corresponds to a token that \"mixes\" information from other input tokens via self-attention mechanism. Each decoder layer contains two attention sublayers: (1) cross-attention for incorporating the output of encoder (contextualized input token representations), and (2) self-attention for \"mixing\" information among the input tokens to the decoder (i.e. the tokens generated so far during inference time).\nBoth the encoder and decoder layers have a feed-forward neural network for additional processing of their outputs and contain residual connections and layer normalization steps. These feed-forward layers contain most of the parameters in a Transformer model.\nFeedforward network\nThe feedforward network (FFN) modules in a Transformer are 2-layered multilayer perceptrons:\n  \n    \n      \n        \n          F\n          F\n          N\n        \n        (\n        x\n        )\n        =\n        \u03d5\n        (\n        x\n        \n          W\n          \n            (\n            1\n            )\n          \n        \n        +\n        \n          b\n          \n            (\n            1\n            )\n          \n        \n        )\n        \n          W\n          \n            (\n            2\n            )\n          \n        \n        +\n        \n          b\n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathrm {FFN} (x)=\\phi (xW^{(1)}+b^{(1)})W^{(2)}+b^{(2)}}\n  \nwhere \n  \n    \n      \n        \n          W\n          \n            (\n            1\n            )\n          \n        \n      \n    \n    {\\displaystyle W^{(1)}}\n  \n and \n  \n    \n      \n        \n          W\n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle W^{(2)}}\n  \n are weight matrices and \n  \n    \n      \n        \n          b\n          \n            (\n            1\n            )\n          \n        \n      \n    \n    {\\displaystyle b^{(1)}}\n  \n and  \n  \n    \n      \n        \n          b\n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle b^{(2)}}\n  \n are bias vectors, and \n  \n    \n      \n        \u03d5\n      \n    \n    {\\displaystyle \\phi }\n  \n is its activation function. The original Transformer used ReLU activation.\nThe number of neurons in the middle layer is called intermediate size (GPT), filter size (BERT), or feedforward size (BERT). It is typically larger than the embedding size. For example, in both GPT-2 series and BERT series, the intermediate size of a model is 4 times its embedding size: \n  \n    \n      \n        \n          d\n          \n            ffn\n          \n        \n        =\n        4\n        \n          d\n          \n            emb\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{ffn}}=4d_{\\text{emb}}}\n  \n.\nScaled dot-product attention\n\nAttention head\nThe attention mechanism used in the Transformer architecture are scaled dot-product attention units. For each unit, the transformer model learns three weight matrices: the query weights \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n, the key weights \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle W^{K}}\n  \n, and the value weights \n  \n    \n      \n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{V}}\n  \n.\nThe module takes three sequences, a query sequence, a key sequence, and a value sequence. The query sequence is a sequence of length \n  \n    \n      \n        \n          \u2113\n          \n            seq, query\n          \n        \n      \n    \n    {\\displaystyle \\ell _{\\text{seq, query}}}\n  \n, and each entry is a vector of dimension \n  \n    \n      \n        \n          d\n          \n            emb, query\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{emb, query}}}\n  \n. Similarly for the key and value sequences.\nFor each vector \n  \n    \n      \n        \n          x\n          \n            i\n            ,\n            \n              query\n            \n          \n        \n      \n    \n    {\\displaystyle x_{i,{\\text{query}}}}\n  \n in the query sequence, it is multiplied by a matrix \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n to produce a query vector \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n        =\n        \n          x\n          \n            i\n            ,\n            \n              query\n            \n          \n        \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle q_{i}=x_{i,{\\text{query}}}W^{Q}}\n  \n. The matrix of all query vectors is the query matrix:\n  \n    \n      \n        Q\n        =\n        \n          X\n          \n            query\n          \n        \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle Q=X_{\\text{query}}W^{Q}}\n  \nSimilarly, we construct the key matrix \n  \n    \n      \n        K\n        =\n        \n          X\n          \n            key\n          \n        \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle K=X_{\\text{key}}W^{K}}\n  \n and the value matrix \n  \n    \n      \n        V\n        =\n        \n          X\n          \n            value\n          \n        \n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle V=X_{\\text{value}}W^{V}}\n  \n.\nIt is usually the case that all \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n        ,\n        \n          W\n          \n            K\n          \n        \n        ,\n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{Q},W^{K},W^{V}}\n  \n are square matrices, meaning \n  \n    \n      \n        \n          d\n          \n            emb, query\n          \n        \n        =\n        \n          d\n          \n            query\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{emb, query}}=d_{\\text{query}}}\n  \n, etc.\nAttention weights are calculated using the query and key vectors: the attention weight \n  \n    \n      \n        \n          a\n          \n            i\n            j\n          \n        \n      \n    \n    {\\displaystyle a_{ij}}\n  \n from token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n to token \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n is the dot product between \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle q_{i}}\n  \n and \n  \n    \n      \n        \n          k\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle k_{j}}\n  \n. The attention weights are divided by the square root of the dimension of the key vectors, \n  \n    \n      \n        \n          \n            \n              d\n              \n                k\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\sqrt {d_{k}}}}\n  \n, which stabilizes gradients during training, and passed through a softmax which normalizes the weights. The fact that \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n and \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle W^{K}}\n  \n are different matrices allows attention to be non-symmetric: if token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n attends to token \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n (i.e. \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n        \u22c5\n        \n          k\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle q_{i}\\cdot k_{j}}\n  \n is large), this does not necessarily mean that token \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n will attend to token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n (i.e. \n  \n    \n      \n        \n          q\n          \n            j\n          \n        \n        \u22c5\n        \n          k\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle q_{j}\\cdot k_{i}}\n  \n could be small). The output of the attention unit for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n is the weighted sum of the value vectors of all tokens, weighted by \n  \n    \n      \n        \n          a\n          \n            i\n            j\n          \n        \n      \n    \n    {\\displaystyle a_{ij}}\n  \n, the attention from token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n to each token.\nThe attention calculation for all tokens can be expressed as one large matrix calculation using the softmax function, which is useful for training due to computational matrix operation optimizations that quickly compute matrix operations. The matrices \n  \n    \n      \n        Q\n      \n    \n    {\\displaystyle Q}\n  \n, \n  \n    \n      \n        K\n      \n    \n    {\\displaystyle K}\n  \n and \n  \n    \n      \n        V\n      \n    \n    {\\displaystyle V}\n  \n are defined as the matrices where the \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \nth rows are vectors \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle q_{i}}\n  \n, \n  \n    \n      \n        \n          k\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle k_{i}}\n  \n, and \n  \n    \n      \n        \n          v\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle v_{i}}\n  \n respectively. Then we can represent the attention as\n  \n    \n      \n        \n          \n            \n              \n                \n                  Attention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    \n                      \n                        Q\n                        \n                          K\n                          \n                            \n                              T\n                            \n                          \n                        \n                      \n                      \n                        \n                          d\n                          \n                            k\n                          \n                        \n                      \n                    \n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\end{aligned}}}\n  \n\nwhere the softmax is applied over each of the rows of the matrix.\nThe number of dimensions in a query vector is query size \n  \n    \n      \n        \n          d\n          \n            query\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{query}}}\n  \n and similarly for the key size \n  \n    \n      \n        \n          d\n          \n            key\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{key}}}\n  \n and value size \n  \n    \n      \n        \n          d\n          \n            value\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{value}}}\n  \n. The output dimension of an attention head is its head dimension \n  \n    \n      \n        \n          d\n          \n            head\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{head}}}\n  \n. The attention mechanism requires the following three equalities to hold:\n  \n    \n      \n        \n          \u2113\n          \n            seq, key\n          \n        \n        =\n        \n          \u2113\n          \n            seq, value\n          \n        \n        ,\n        \n        \n          d\n          \n            query\n          \n        \n        =\n        \n          d\n          \n            key\n          \n        \n        ,\n        \n        \n          d\n          \n            value\n          \n        \n        =\n        \n          d\n          \n            head\n          \n        \n      \n    \n    {\\displaystyle \\ell _{\\text{seq, key}}=\\ell _{\\text{seq, value}},\\;d_{\\text{query}}=d_{\\text{key}},\\;d_{\\text{value}}=d_{\\text{head}}}\n  \nbut is otherwise unconstrained.\nIf the attention head is used in a self-attention fashion, then \n  \n    \n      \n        \n          X\n          \n            query\n          \n        \n        =\n        \n          X\n          \n            key\n          \n        \n        =\n        \n          X\n          \n            value\n          \n        \n      \n    \n    {\\displaystyle X_{\\text{query}}=X_{\\text{key}}=X_{\\text{value}}}\n  \n. If the attention head is used in a cross-attention fashion, then usually \n  \n    \n      \n        \n          X\n          \n            query\n          \n        \n        \u2260\n        \n          X\n          \n            key\n          \n        \n        =\n        \n          X\n          \n            value\n          \n        \n      \n    \n    {\\displaystyle X_{\\text{query}}\\neq X_{\\text{key}}=X_{\\text{value}}}\n  \n. It is theoretically possible for all three to be different, but that is rarely the case in practice.\nMultiheaded attention\nOne set of \n  \n    \n      \n        \n          (\n          \n            \n              W\n              \n                Q\n              \n            \n            ,\n            \n              W\n              \n                K\n              \n            \n            ,\n            \n              W\n              \n                V\n              \n            \n          \n          )\n        \n      \n    \n    {\\displaystyle \\left(W^{Q},W^{K},W^{V}\\right)}\n  \n matrices is called an attention head, and each layer in a transformer model has multiple attention heads. While each attention head attends to the tokens that are relevant to each token, multiple attention heads allow the model to do this for different definitions of \"relevance\". Specifically, the query and key projection matrices, \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n and \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle W^{K}}\n  \n , which are involved in the attention score computation, defines the \"relevance\". Meanwhile, the value projection matrix \n  \n    \n      \n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{V}}\n  \n, in combination with the part of the output projection matrix \n  \n    \n      \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle W^{O}}\n  \n, determines how the attended tokens influence what information is passed to subsequent layers and ultimately the output logits. In addition, the scope of attention, or the range of token relationships captured by each attention head, can expand as tokens pass through successive layers. This allows the model to capture more complex and long-range dependencies in deeper layers. Many transformer attention heads encode relevance relations that are meaningful to humans. For example, some attention heads can attend mostly to the next word, while others mainly attend from verbs to their direct objects. The computations for each attention head can be performed in parallel, which allows for fast processing. The outputs for the attention layer are concatenated to pass into the feed-forward neural network layers.\nConcretely, let the multiple attention heads be indexed by \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n, then we have\n  \n    \n      \n        \n          MultiheadedAttention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          \n            Concat\n          \n          \n            i\n            \u2208\n            [\n            \n              n\n              \n                heads\n              \n            \n            ]\n          \n        \n        (\n        \n          Attention\n        \n        (\n        Q\n        \n          W\n          \n            i\n          \n          \n            Q\n          \n        \n        ,\n        K\n        \n          W\n          \n            i\n          \n          \n            K\n          \n        \n        ,\n        V\n        \n          W\n          \n            i\n          \n          \n            V\n          \n        \n        )\n        )\n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle {\\text{MultiheadedAttention}}(Q,K,V)={\\text{Concat}}_{i\\in [n_{\\text{heads}}]}({\\text{Attention}}(QW_{i}^{Q},KW_{i}^{K},VW_{i}^{V}))W^{O}}\n  \n where the matrix \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n  \n is the concatenation of word embeddings, and the matrices \n  \n    \n      \n        \n          W\n          \n            i\n          \n          \n            Q\n          \n        \n        ,\n        \n          W\n          \n            i\n          \n          \n            K\n          \n        \n        ,\n        \n          W\n          \n            i\n          \n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W_{i}^{Q},W_{i}^{K},W_{i}^{V}}\n  \n are \"projection matrices\" owned by individual attention head \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n, and \n  \n    \n      \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle W^{O}}\n  \n is a final projection matrix owned by the whole multi-headed attention head.\nIt is theoretically possible for each attention head to have a different head dimension \n  \n    \n      \n        \n          d\n          \n            head\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{head}}}\n  \n, but that is rarely the case in practice.\nAs an example, in the smallest GPT-2 model, there are only self-attention mechanisms. It has the following dimensions:\n  \n    \n      \n        \n          d\n          \n            emb\n          \n        \n        =\n        768\n        ,\n        \n          n\n          \n            head\n          \n        \n        =\n        12\n        ,\n        \n          d\n          \n            head\n          \n        \n        =\n        64\n      \n    \n    {\\displaystyle d_{\\text{emb}}=768,n_{\\text{head}}=12,d_{\\text{head}}=64}\n  \nSince \n  \n    \n      \n        12\n        \u00d7\n        64\n        =\n        768\n      \n    \n    {\\displaystyle 12\\times 64=768}\n  \n, its output projection matrix \n  \n    \n      \n        \n          W\n          \n            O\n          \n        \n        \u2208\n        \n          \n            R\n          \n          \n            (\n            12\n            \u00d7\n            64\n            )\n            \u00d7\n            768\n          \n        \n      \n    \n    {\\displaystyle W^{O}\\in \\mathbb {R} ^{(12\\times 64)\\times 768}}\n  \n is a square matrix.\nMasked attention\nThe Transformer architecture is constructed to calculate output tokens iteratively. Assuming \n  \n    \n      \n        t\n        =\n        0\n      \n    \n    {\\displaystyle t=0}\n  \n refers to the calculation of the first output token \n  \n    \n      \n        i\n        =\n        0\n      \n    \n    {\\displaystyle i=0}\n  \n, for step \n  \n    \n      \n        t\n        >\n        0\n      \n    \n    {\\displaystyle t>0}\n  \n, the output token \n  \n    \n      \n        i\n        =\n        0\n      \n    \n    {\\displaystyle i=0}\n  \n shall remain constant. This ensures properties of the model similar to autoregressive models. Therefore, at every time step \n  \n    \n      \n        t\n      \n    \n    {\\displaystyle t}\n  \n, the calculation for all outputs \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n should not have access to tokens at position \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n for \n  \n    \n      \n        j\n        >=\n        i\n      \n    \n    {\\displaystyle j>=i}\n  \n (as it naturally is the case for time step \n  \n    \n      \n        t\n        =\n        i\n      \n    \n    {\\displaystyle t=i}\n  \n, when tokens \n  \n    \n      \n        j\n        >\n        t\n      \n    \n    {\\displaystyle j>t}\n  \n are not yet calculated). This behavior may be accomplished before the softmax stage by adding a mask matrix \n  \n    \n      \n        M\n      \n    \n    {\\displaystyle M}\n  \n that is \n  \n    \n      \n        \u2212\n        \u221e\n      \n    \n    {\\displaystyle -\\infty }\n  \n at entries where the attention link must be cut, and \n  \n    \n      \n        0\n      \n    \n    {\\displaystyle 0}\n  \n at other places:\n  \n    \n      \n        \n          \n            \n              \n                \n                  MaskedAttention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    M\n                    +\n                    \n                      \n                        \n                          Q\n                          \n                            K\n                            \n                              \n                                T\n                              \n                            \n                          \n                        \n                        \n                          \n                            d\n                            \n                              k\n                            \n                          \n                        \n                      \n                    \n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{MaskedAttention}}(Q,K,V)={\\text{softmax}}\\left(M+{\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\end{aligned}}}\n  \n The following matrix is commonly used in decoder self-attention modules, called \"causal masking\":\n  \n    \n      \n        \n          M\n          \n            causal\n          \n        \n        =\n        \n          \n            [\n            \n              \n                \n                  0\n                \n                \n                  \u2212\n                  \u221e\n                \n                \n                  \u2212\n                  \u221e\n                \n                \n                  \u2026\n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  0\n                \n                \n                  0\n                \n                \n                  \u2212\n                  \u221e\n                \n                \n                  \u2026\n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  0\n                \n                \n                  0\n                \n                \n                  0\n                \n                \n                  \u2026\n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22f1\n                \n                \n                  \u22ee\n                \n              \n              \n                \n                  0\n                \n                \n                  0\n                \n                \n                  0\n                \n                \n                  \u2026\n                \n                \n                  0\n                \n              \n            \n            ]\n          \n        \n      \n    \n    {\\displaystyle M_{\\text{causal}}={\\begin{bmatrix}0&-\\infty &-\\infty &\\dots &-\\infty \\\\0&0&-\\infty &\\dots &-\\infty \\\\0&0&0&\\dots &-\\infty \\\\\\vdots &\\vdots &\\vdots &\\ddots &\\vdots \\\\0&0&0&\\dots &0\\end{bmatrix}}}\n  \n\nIn words, it means that each token can pay attention to itself, and every token before it, but not any after it. A non-masked attention module can be thought of as a masked attention module where the mask has all entries zero. As an example of an uncommon use of mask matrix, the XLNet considers all masks of the form \n  \n    \n      \n        P\n        \n          M\n          \n            causal\n          \n        \n        \n          P\n          \n            \u2212\n            1\n          \n        \n      \n    \n    {\\displaystyle PM_{\\text{causal}}P^{-1}}\n  \n, where \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n  \n is a random permutation matrix.\nEncoder\nAn encoder consists of an embedding layer, followed by multiple encoder layers.\nEach encoder layer consists of two major components: a self-attention mechanism and a feed-forward layer. It takes an input as a sequence of input vectors, applies the self-attention mechanism, to produce an intermediate sequence of vectors, then applies the feed-forward layer for each vector individually. Schematically, we have:\n  \n    \n      \n        \n          \n            \n              \n                \n                  given input vectors \n                \n              \n              \n                \n                  h\n                  \n                    0\n                  \n                \n                ,\n                \n                  h\n                  \n                    1\n                  \n                \n                ,\n                \u2026\n              \n            \n            \n              \n                \n                  combine them into a matrix \n                \n                H\n              \n              \n                \n                =\n                \n                  \n                    [\n                    \n                      \n                        \n                          \n                            h\n                            \n                              0\n                            \n                          \n                        \n                      \n                      \n                        \n                          \n                            h\n                            \n                              1\n                            \n                          \n                        \n                      \n                      \n                        \n                          \u22ee\n                        \n                      \n                    \n                    ]\n                  \n                \n              \n            \n            \n              \n                \n                  EncoderLayer\n                \n                (\n                H\n                )\n              \n              \n                \n                =\n                \n                  \n                    [\n                    \n                      \n                        \n                          \n                            FFN\n                          \n                          (\n                          \n                            MultiheadedAttention\n                          \n                          (\n                          H\n                          ,\n                          H\n                          ,\n                          H\n                          \n                            )\n                            \n                              0\n                            \n                          \n                          )\n                        \n                      \n                      \n                        \n                          \n                            FFN\n                          \n                          (\n                          \n                            MultiheadedAttention\n                          \n                          (\n                          H\n                          ,\n                          H\n                          ,\n                          H\n                          \n                            )\n                            \n                              1\n                            \n                          \n                          )\n                        \n                      \n                      \n                        \n                          \u22ee\n                        \n                      \n                    \n                    ]\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{given input vectors }}&h_{0},h_{1},\\dots \\\\{\\text{combine them into a matrix }}H&={\\begin{bmatrix}h_{0}\\\\h_{1}\\\\\\vdots \\end{bmatrix}}\\\\{\\text{EncoderLayer}}(H)&={\\begin{bmatrix}{\\text{FFN}}({\\text{MultiheadedAttention}}(H,H,H)_{0})\\\\{\\text{FFN}}({\\text{MultiheadedAttention}}(H,H,H)_{1})\\\\\\vdots \\end{bmatrix}}\\\\\\end{aligned}}}\n  \n\nwhere \n  \n    \n      \n        \n          FFN\n        \n      \n    \n    {\\displaystyle {\\text{FFN}}}\n  \n stands for \"feed-forward network\". We can more succinctly write it as\n  \n    \n      \n        \n          EncoderLayer\n        \n        (\n        H\n        )\n        =\n        \n          FFN\n        \n        (\n        \n          MultiheadedAttention\n        \n        (\n        H\n        ,\n        H\n        ,\n        H\n        )\n        )\n      \n    \n    {\\displaystyle {\\text{EncoderLayer}}(H)={\\text{FFN}}({\\text{MultiheadedAttention}}(H,H,H))}\n  \nwith the implicit convention that the \n  \n    \n      \n        \n          FFN\n        \n      \n    \n    {\\displaystyle {\\text{FFN}}}\n  \n is applied to each row of the matrix individually.\nThe encoder layers are stacked. The first encoder layer takes the sequence of input vectors from the embedding layer, producing a sequence of vectors. This sequence of vectors is processed by the second encoder, and so on. The output from the final encoder layer is then used by the decoder.\nAs the encoder processes the entire input all at once, every token can attend to every other token (all-to-all attention), so there is no need for causal masking.\nDecoder\nA decoder consists of an embedding layer, followed by multiple decoder layers, followed by an un-embedding layer.\nEach decoder consists of three major components: a causally masked self-attention mechanism, a cross-attention mechanism, and a feed-forward neural network. The decoder functions in a similar fashion to the encoder, but an additional attention mechanism is inserted which instead draws relevant information from the encodings generated by the encoders. This mechanism can also be called the encoder-decoder attention.\nLike the first encoder, the first decoder takes positional information and embeddings of the output sequence as its input, rather than encodings. The transformer must not use the current or future output to predict an output, so the output sequence must be partially masked to prevent this reverse information flow. This allows for autoregressive text generation. For decoding, all-to-all attention is inappropriate, because a token cannot attend to tokens not yet generated. Thus, the self-attention module in the decoder is causally masked.\nIn contrast, the cross-attention mechanism attends to the output vectors of the encoder, which is computed before the decoder starts decoding. Consequently, there is no need for masking in the cross-attention mechanism.\nSchematically, we have:\n  \n    \n      \n        \n          \n            \n              \n                \n                  H\n                  \u2032\n                \n              \n              \n                \n                =\n                \n                  MaskedMultiheadedAttention\n                \n                (\n                H\n                ,\n                H\n                ,\n                H\n                )\n              \n            \n            \n              \n                \n                  DecoderLayer\n                \n                (\n                H\n                )\n              \n              \n                \n                =\n                \n                  FFN\n                \n                (\n                \n                  MultiheadedAttention\n                \n                (\n                \n                  H\n                  \u2032\n                \n                ,\n                \n                  H\n                  \n                    E\n                  \n                \n                ,\n                \n                  H\n                  \n                    E\n                  \n                \n                )\n                )\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}H'&={\\text{MaskedMultiheadedAttention}}(H,H,H)\\\\{\\text{DecoderLayer}}(H)&={\\text{FFN}}({\\text{MultiheadedAttention}}(H',H^{E},H^{E}))\\end{aligned}}}\n  \nwhere \n  \n    \n      \n        \n          H\n          \n            E\n          \n        \n      \n    \n    {\\displaystyle H^{E}}\n  \n is the matrix with rows being the output vectors from the encoder.\nThe last decoder is followed by a final un-embedding layer. to produce the output probabilities over the vocabulary. Then, one of the tokens is sampled according to the probability, and the decoder can be run again to produce the next token, etc, autoregressively generating output text.\nAdapted architectures\nMany large language models, since they do not need to predict a whole new sequence from an input sequence, only use the encoder or decoder of the original transformer architecture. Early GPT models are decoder-only models trained to predict the next token in a sequence. BERT, another language model, only makes use of an encoder, and is trained to predict a randomly masked token in a sequence.\nFull transformer architecture\n\nSublayers\nEach encoder layer contains 2 sublayers: the self-attention and the feedforward network. Each decoder layer contains 3 sublayers: the causally masked self-attention, the cross-attention, and the feedforward network.\n\nThe final points of detail are the residual connections and layer normalization (LayerNorm, or LN), which while conceptually unnecessary, are necessary for numerical stability and convergence.  \nThe residual connection, which is introduced to avoid vanishing gradient issues and stabilize the training process, can be expressed as follows: y = F(x) + x. The expression indicates that an output y is the sum of the transformation of input x (F(x)) and the input itself (x). Adding the input x can preserve the input information and avoid issues when the gradient of F(x) is close to zero.  \nSimilarly to how the feedforward network modules are applied individually to each vector, the LayerNorm is also applied individually to each vector. \nThere are two common conventions in use: the post-LN and the pre-LN convention. In the post-LN convention, the output of each sublayer is \n  \n    \n      \n        \n          L\n          a\n          y\n          e\n          r\n          N\n          o\n          r\n          m\n        \n        (\n        x\n        +\n        \n          S\n          u\n          b\n          l\n          a\n          y\n          e\n          r\n        \n        (\n        x\n        )\n        )\n      \n    \n    {\\displaystyle \\mathrm {LayerNorm} (x+\\mathrm {Sublayer} (x))}\n  \nwhere \n  \n    \n      \n        \n          S\n          u\n          b\n          l\n          a\n          y\n          e\n          r\n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle \\mathrm {Sublayer} (x)}\n  \n is the function implemented by the sublayer itself.\nIn the pre-LN convention, the output of each sublayer is\n  \n    \n      \n        x\n        +\n        \n          S\n          u\n          b\n          l\n          a\n          y\n          e\n          r\n        \n        (\n        \n          L\n          a\n          y\n          e\n          r\n          N\n          o\n          r\n          m\n        \n        (\n        x\n        )\n        )\n      \n    \n    {\\displaystyle x+\\mathrm {Sublayer} (\\mathrm {LayerNorm} (x))}\n  \nThe original 2017 Transformer used the post-LN convention. It was difficult to train and required careful hyperparameter tuning and a \"warm-up\" in learning rate, where it starts small and gradually increases. The pre-LN convention, proposed several times in 2018, was found to be easier to train, requiring no warm-up, leading to faster convergence.\nPseudocode\nThe following is the pseudocode for a standard pre-LN encoder-decoder Transformer, adapted from\n\ninput: Encoder input t_e\n       Decoder input t_d\noutput: Array of probability distributions, with shape (decoder vocabulary size x length(decoder output sequence))\n\n/* encoder */\nz_e \u2190 encoder.tokenizer(t_e)\n\nfor each t in 1:length(z_e) do\n    z_e[t] \u2190 encoder.embedding(z_e[t]) + encoder.positional_embedding(t)\n\nfor each l in 1:length(encoder.layers) do\n    layer \u2190 encoder.layers[l]\n\n    /* first sublayer */\n    z_e_copy \u2190 copy(z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 layer.layer_norm(z_e[t])\n    z_e \u2190 layer.multiheaded_attention(z_e, z_e, z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 z_e[t] + z_e_copy[t]\n\n    /* second sublayer */\n    z_e_copy \u2190 copy(z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 layer.layer_norm(z_e[t])\n    z_e \u2190 layer.feedforward(z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 z_e[t] + z_e_copy[t]\n\nfor each t in 1:length(z_e) do\n    z_e[t] \u2190 encoder.final_layer_norm(z_e[t])\n\n/* decoder */\nz_d \u2190 decoder.tokenizer(t_d)\n\nfor each t in 1:length(z_d) do\n    z_d[t] \u2190 decoder.embedding(z_d[t]) + decoder.positional_embedding(t)\n\nfor each l in 1:length(decoder.layers) do\n        layer \u2190 decoder.layers[l]\n\n        /* first sublayer */\n        z_d_copy \u2190 copy(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 layer.layer_norm(z_d[t])\n        z_d \u2190 layer.masked_multiheaded_attention(z_d, z_d, z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 z_d[t] + z_d_copy[t]\n\n        /* second sublayer */\n        z_d_copy \u2190 copy(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 layer.layer_norm(z_d[t])\n        z_d \u2190 layer.multiheaded_attention(z_d, z_e, z_e) \n        for each i in 1:length(z_d) do\n            z_d[t] \u2190 z_d[t] + z_d_copy[t]\n\n        /* third sublayer */\n        z_d_copy \u2190 copy(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 layer.layer_norm(z_d[t])\n        z_d \u2190 layer.feedforward(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 z_d[t] + z_d_copy[t]\n\nz_d \u2190 decoder.final_layer_norm(z_d)\n\noutput_distributions \u2190 []\nfor each t in 1:length(z_d) do\n    output_distributions.append(decoder.unembed(z_d[t]))\n\nreturn output_distributions\nTerminology\nThe Transformer architecture, being modular, allows variations. Several common variations are described here.\nAn \"encoder-only\" Transformer applies the encoder to map an input text into a sequence of vectors that represent the input text. This is usually used for text embedding and representation learning for downstream applications. BERT is encoder-only. They are less often used currently, as they were found to be not significantly better than training an encoder-decoder Transformer, then taking just the encoder.\nA \"decoder-only\" Transformer is not literally decoder-only, since without an encoder, the cross-attention mechanism has nothing to attend to. Thus, the decoder layers in a decoder-only Transformer is composed of just two sublayers: the causally masked self-attention, and the feedforward network. This is usually used for text generation and instruction following. The models in the GPT series and Chinchilla series are decoder-only.\nAn \"encoder-decoder\" Transformer is generally the same as the original Transformer, with 2 sublayers per encoder layer and 3 sublayers per decoder layer, etc. They might have minor architectural improvements, such as alternative activation functions, changing the location of normalization, etc. This is also usually used for text generation and instruction following. The models in the T5 series are encoder-decoder.\nA \"prefixLM\" (prefix language model) is a decoder-only architecture, but with prefix masking, which is different from causal masking. Specifically, it has mask of the form:\u200aFigure 3\u200a\n  \n    \n      \n        \n          M\n          \n            prefixLM\n          \n        \n        =\n        \n          \n            [\n            \n              \n                \n                  \n                    0\n                  \n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  \n                    0\n                  \n                \n                \n                  \n                    M\n                    \n                      causal\n                    \n                  \n                \n              \n            \n            ]\n          \n        \n      \n    \n    {\\displaystyle M_{\\text{prefixLM}}={\\begin{bmatrix}\\mathbf {0} &-\\infty \\\\\\mathbf {0} &M_{\\text{causal}}\\end{bmatrix}}}\n  \nwhere the first columns correspond to the \"prefix\", and the subsequent columns correspond to the autoregressively generated text based on the prefix. They resemble encoder-decoder models, but has less \"sparsity\". Such models are rarely used, though they are cited as theoretical possibilities and benchmarked comparisons.\nThere are also mixed seq2seq models. For example, in 2020, Google Translate replaced the previous RNN-encoder\u2013RNN-decoder model by a Transformer-encoder\u2013RNN-decoder model, on the argument that an RNN-decoder runs much faster than Transformer-decoder when run autoregressively.\nSubsequent work\n\nAlternative activation functions\nThe original transformer uses ReLU activation function. Other activation functions were developed. The Llama series and PaLM used SwiGLU; both GPT-1 and BERT used GELU. \nAlternative activation functions are often used in combination with Gated Linear Units in the feedforward module.\nAlternative normalizations\nThe normalization used in the Transformer can be different from LayerNorm. One example is RMSNorm which is used in the Llama series. Other examples include CapsuleNorm ScaleNorm, or FixNorm.\nAlternative positional encodings\nTransformers may use other positional encoding methods than sinusoidal. \nThe original Transformer paper reported using a learned positional encoding, but finding it not superior to the sinusoidal one. Later,  found that causal masking itself provides enough signal to a Transformer decoder that it can learn to implicitly perform absolute positional encoding without the positional encoding module.\nRoPE\nRoPE (rotary positional embedding), is best explained by considering a list of 2-dimensional vectors \n  \n    \n      \n        [\n        (\n        \n          x\n          \n            1\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            1\n          \n          \n            (\n            2\n            )\n          \n        \n        )\n        ,\n        (\n        \n          x\n          \n            2\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            2\n          \n          \n            (\n            2\n            )\n          \n        \n        )\n        ,\n        (\n        \n          x\n          \n            3\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            3\n          \n          \n            (\n            2\n            )\n          \n        \n        )\n        ,\n        .\n        .\n        .\n        ]\n      \n    \n    {\\displaystyle [(x_{1}^{(1)},x_{1}^{(2)}),(x_{2}^{(1)},x_{2}^{(2)}),(x_{3}^{(1)},x_{3}^{(2)}),...]}\n  \n. Now pick some angle \n  \n    \n      \n        \u03b8\n      \n    \n    {\\displaystyle \\theta }\n  \n. Then RoPE encoding is\n  \n    \n      \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        \n          x\n          \n            m\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            m\n          \n          \n            (\n            2\n            )\n          \n        \n        ,\n        m\n        \n          \n            )\n          \n        \n        =\n        \n          \n            (\n            \n              \n                \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                \n                \n                  \u2212\n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n              \n                \n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n                \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n            \n            )\n          \n        \n        \n          \n            (\n            \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      1\n                      )\n                    \n                  \n                \n              \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      2\n                      )\n                    \n                  \n                \n              \n            \n            )\n          \n        \n        =\n        \n          \n            (\n            \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      1\n                      )\n                    \n                  \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                  \u2212\n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      2\n                      )\n                    \n                  \n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      2\n                      )\n                    \n                  \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                  +\n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      1\n                      )\n                    \n                  \n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n            \n            )\n          \n        \n      \n    \n    {\\displaystyle {\\text{RoPE}}{\\big (}x_{m}^{(1)},x_{m}^{(2)},m{\\big )}={\\begin{pmatrix}\\cos m\\theta &-\\sin m\\theta \\\\\\sin m\\theta &\\cos m\\theta \\end{pmatrix}}{\\begin{pmatrix}x_{m}^{(1)}\\\\x_{m}^{(2)}\\\\\\end{pmatrix}}={\\begin{pmatrix}x_{m}^{(1)}\\cos m\\theta -x_{m}^{(2)}\\sin m\\theta \\\\x_{m}^{(2)}\\cos m\\theta +x_{m}^{(1)}\\sin m\\theta \\\\\\end{pmatrix}}}\n  \nEquivalently, if we write the 2-dimensional vectors as complex numbers \n  \n    \n      \n        \n          z\n          \n            m\n          \n        \n        :=\n        \n          x\n          \n            m\n          \n          \n            (\n            1\n            )\n          \n        \n        +\n        i\n        \n          x\n          \n            m\n          \n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle z_{m}:=x_{m}^{(1)}+ix_{m}^{(2)}}\n  \n, then RoPE encoding is just multiplication by an angle:\n  \n    \n      \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        \n          z\n          \n            m\n          \n        \n        ,\n        m\n        \n          \n            )\n          \n        \n        =\n        \n          e\n          \n            i\n            m\n            \u03b8\n          \n        \n        \n          z\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle {\\text{RoPE}}{\\big (}z_{m},m{\\big )}=e^{im\\theta }z_{m}}\n  \nFor a list of \n  \n    \n      \n        2\n        n\n      \n    \n    {\\displaystyle 2n}\n  \n-dimensional vectors, a RoPE encoder is defined by a sequence of angles \n  \n    \n      \n        \n          \u03b8\n          \n            (\n            1\n            )\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          \u03b8\n          \n            (\n            n\n            )\n          \n        \n      \n    \n    {\\displaystyle \\theta ^{(1)},...,\\theta ^{(n)}}\n  \n. Then the RoPE encoding is applied to each pair of coordinates.\nThe benefit of RoPE is that the dot-product between two vectors depends on their relative location only:\n  \n    \n      \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        x\n        ,\n        m\n        \n          \n            \n              )\n            \n          \n          \n            T\n          \n        \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        y\n        ,\n        n\n        \n          \n            )\n          \n        \n        =\n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        x\n        ,\n        m\n        +\n        k\n        \n          \n            \n              )\n            \n          \n          \n            T\n          \n        \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        y\n        ,\n        n\n        +\n        k\n        \n          \n            )\n          \n        \n      \n    \n    {\\displaystyle {\\text{RoPE}}{\\big (}x,m{\\big )}^{T}{\\text{RoPE}}{\\big (}y,n{\\big )}={\\text{RoPE}}{\\big (}x,m+k{\\big )}^{T}{\\text{RoPE}}{\\big (}y,n+k{\\big )}}\n  \n\nfor any integer \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n  \n.\nALiBi\nALiBi (Attention with Linear Biases) is not a replacement for the positional encoder on the original transformer. Instead, it is an additional positional encoder that is directly plugged into the attention mechanism. Specifically, the ALiBi attention mechanism is\n  \n    \n      \n        \n          \n            \n              \n                \n                  Attention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    \n                      \n                        \n                          Q\n                          \n                            K\n                            \n                              \n                                T\n                              \n                            \n                          \n                        \n                        \n                          \n                            d\n                            \n                              k\n                            \n                          \n                        \n                      \n                    \n                    +\n                    s\n                    B\n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}+sB\\right)V\\end{aligned}}}\n  \nHere, \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  \n is a real number (\"scalar\"), and \n  \n    \n      \n        B\n      \n    \n    {\\displaystyle B}\n  \n is the linear bias matrix defined by\n  \n    \n      \n        B\n        =\n        \n          \n            (\n            \n              \n                \n                  0\n                \n                \n                  1\n                \n                \n                  2\n                \n                \n                  3\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u2212\n                  1\n                \n                \n                  0\n                \n                \n                  1\n                \n                \n                  2\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u2212\n                  2\n                \n                \n                  \u2212\n                  1\n                \n                \n                  0\n                \n                \n                  1\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u2212\n                  3\n                \n                \n                  \u2212\n                  2\n                \n                \n                  \u2212\n                  1\n                \n                \n                  0\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22f1\n                \n              \n            \n            )\n          \n        \n      \n    \n    {\\displaystyle B={\\begin{pmatrix}0&1&2&3&\\cdots \\\\-1&0&1&2&\\cdots \\\\-2&-1&0&1&\\cdots \\\\-3&-2&-1&0&\\cdots \\\\\\vdots &\\vdots &\\vdots &\\vdots &\\ddots \\\\\\end{pmatrix}}}\n  \nin other words, \n  \n    \n      \n        \n          B\n          \n            i\n            ,\n            j\n          \n        \n        =\n        j\n        \u2212\n        i\n      \n    \n    {\\displaystyle B_{i,j}=j-i}\n  \n. The idea being that the linear bias matrix is a softened mask. Just as \n  \n    \n      \n        0\n      \n    \n    {\\displaystyle 0}\n  \n represent full attention paid, and \n  \n    \n      \n        \u2212\n        \u221e\n      \n    \n    {\\displaystyle -\\infty }\n  \n represents no attention paid, the linear bias matrix increases attention paid in one direction and decreases attention paid in the other direction.\nALiBi allows pretraining on short context windows, then fine-tuning on longer context windows. Since it is directly plugged into the attention mechanism, it can be combined with any positional encoder that is plugged into the \"bottom\" of the entire network (which is where the sinusoidal encoder on the original transformer, as well as RoPE and many others, are located).\nRelative Position Encodings\nRelative Position Encodings is similar to ALiBi, but more generic:\n  \n    \n      \n        \n          \n            \n              \n                \n                  Attention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    \n                      \n                        \n                          Q\n                          \n                            K\n                            \n                              \n                                T\n                              \n                            \n                          \n                        \n                        \n                          \n                            d\n                            \n                              k\n                            \n                          \n                        \n                      \n                    \n                    +\n                    B\n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}+B\\right)V\\end{aligned}}}\n  \nwhere \n  \n    \n      \n        B\n      \n    \n    {\\displaystyle B}\n  \n is a Toeplitz matrix, that is, \n  \n    \n      \n        \n          B\n          \n            i\n            ,\n            j\n          \n        \n        =\n        \n          B\n          \n            \n              i\n              \u2032\n            \n            ,\n            \n              j\n              \u2032\n            \n          \n        \n      \n    \n    {\\displaystyle B_{i,j}=B_{i',j'}}\n  \n whenever \n  \n    \n      \n        i\n        \u2212\n        j\n        =\n        \n          i\n          \u2032\n        \n        \u2212\n        \n          j\n          \u2032\n        \n      \n    \n    {\\displaystyle i-j=i'-j'}\n  \n. This is contrasted with the original sinusoidal positional encoding, which is an \"absolute positional encoding\".\nEfficient implementation\nThe transformer model has been implemented in standard deep learning frameworks such as TensorFlow and PyTorch. Transformers is a library produced by Hugging Face that supplies transformer-based architectures and pretrained models.\nKV caching\nWhen an autoregressive transformer is used for inference, such as generating text, the query vector is different at each step, but the already-computed key and value vectors are always the same. The KV caching method saves the computed key and value vectors at each attention block, so that they are not recomputed at each new token. PagedAttention applies memory paging to KV caching.\nIf a transformer is used with a baked-in prompt, such as [\"You are a customer support agent...\"], then the key and value vectors can be computed for the prompt, and saved on disk. The saving in compute is significant when the model is used for many short interactions, such as in online chatbots.\nFlashAttention\nFlashAttention is an algorithm that implements the transformer attention mechanism efficiently on a GPU. It is a communication-avoiding algorithm that performs matrix multiplications in blocks, such that each block fits within the cache of a GPU, and by careful management of the blocks it minimizes data copying between GPU caches (as data movement is slow). See the page on softmax for details.\nAn improved version, FlashAttention-2, was developed to cater to the rising demand for language models capable of handling longer context lengths. It offers enhancements in work partitioning and parallelism, enabling it to achieve up to 230 TFLOPs/s on A100 GPUs (FP16/BF16), a 2x speed increase over the original FlashAttention.\nKey advancements in FlashAttention-2 include the reduction of non-matmul FLOPs, improved parallelism over the sequence length dimension, better work partitioning between GPU warps, and added support for head dimensions up to 256 and multi-query attention (MQA) and grouped-query attention (GQA).\nBenchmarks revealed FlashAttention-2 to be up to 2x faster than FlashAttention and up to 9x faster than a standard attention implementation in PyTorch. Future developments include optimization for new hardware like H100 GPUs and new data types like FP8.\nMulti-Query Attention\nMulti-Query Attention changes the multiheaded attention mechanism. Whereas normally,\n\n  \n    \n      \n        \n          MultiheadedAttention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          \n            Concat\n          \n          \n            i\n            \u2208\n            [\n            \n              n\n              \n                heads\n              \n            \n            ]\n          \n        \n        \n          (\n          \n            \n              Attention\n            \n            (\n            X\n            \n              W\n              \n                i\n              \n              \n                Q\n              \n            \n            ,\n            X\n            \n              W\n              \n                i\n              \n              \n                K\n              \n            \n            ,\n            X\n            \n              W\n              \n                i\n              \n              \n                V\n              \n            \n            )\n          \n          )\n        \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle {\\text{MultiheadedAttention}}(Q,K,V)={\\text{Concat}}_{i\\in [n_{\\text{heads}}]}\\left({\\text{Attention}}(XW_{i}^{Q},XW_{i}^{K},XW_{i}^{V})\\right)W^{O}}\n  \nwith Multi-Query Attention, there is just one \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n        ,\n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{K},W^{V}}\n  \n, thus:\n\n  \n    \n      \n        \n          MultiQueryAttention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          \n            Concat\n          \n          \n            i\n            \u2208\n            [\n            \n              n\n              \n                heads\n              \n            \n            ]\n          \n        \n        \n          (\n          \n            \n              Attention\n            \n            (\n            X\n            \n              W\n              \n                i\n              \n              \n                Q\n              \n            \n            ,\n            X\n            \n              W\n              \n                K\n              \n            \n            ,\n            X\n            \n              W\n              \n                V\n              \n            \n            )\n          \n          )\n        \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle {\\text{MultiQueryAttention}}(Q,K,V)={\\text{Concat}}_{i\\in [n_{\\text{heads}}]}\\left({\\text{Attention}}(XW_{i}^{Q},XW^{K},XW^{V})\\right)W^{O}}\n  \n\nThis has a neutral effect on model quality and training speed, but increases inference speed. \nMore generally, grouped-query attention (GQA) partitions attention heads into groups, each of which shares the key-value pair. MQA is GQA with one group, while standard multiheaded attention is GQA with the maximal number of groups.\n\nMultihead Latent Attention (MLA) is a low-rank approximation to standard MHA. Specifically, each hidden vector, before entering the attention mechanism, is first projected to two low-dimensional spaces (\"latent space\"), one for query and one for key-value (KV vector). This design minimizes the KV cache, as only the low-dimensional KV vector needs to be cached.\nSpeculative decoding\nSpeculative decoding is a method to accelerate token decoding. Similarly to speculative execution in CPUs, future tokens are computed quickly, then verified. If the quickly computed tokens are incorrect, they are discarded and computed slowly.\nThe key factor in speculative decoding is that a Transformer decoder can verify faster than it can decode, in the following sense.\nSuppose we have two transformer models like GPT-3 and GPT-3-small, both with a context window size of 512. To generate an entire context window autoregressively with greedy decoding with GPT-3, it must be run for 512 times, each time generating a token \n  \n    \n      \n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          x\n          \n            2\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          x\n          \n            512\n          \n        \n      \n    \n    {\\displaystyle x_{1},x_{2},...,x_{512}}\n  \n, taking time \n  \n    \n      \n        512\n        \n          T\n          \n            GPT-3\n          \n        \n      \n    \n    {\\displaystyle 512T_{\\text{GPT-3}}}\n  \n. However, if we had some educated guess for the values of these tokens, we could verify all of them in parallel, in one run of the model, by checking that each \n  \n    \n      \n        \n          x\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle x_{t}}\n  \n is indeed the token with the largest log-likelihood in the \n  \n    \n      \n        t\n      \n    \n    {\\displaystyle t}\n  \n-th output.\nIn speculative decoding, a smaller model or some other simple heuristic is used to generate a few speculative tokens that are subsequently verified by the larger model. For example, suppose we use GPT-3-small to generate four speculative tokens: \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            1\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            2\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            3\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            4\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{1},{\\tilde {x}}_{2},{\\tilde {x}}_{3},{\\tilde {x}}_{4}}\n  \n. This only takes \n  \n    \n      \n        4\n        \n          T\n          \n            GPT-3-small\n          \n        \n      \n    \n    {\\displaystyle 4T_{\\text{GPT-3-small}}}\n  \n. These tokens are then run through the larger GPT-3 in one go. Suppose that \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            1\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{1}}\n  \n and \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{2}}\n  \n are verified by GPT-3 as what it would have picked, then those are kept, but \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            3\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{3}}\n  \n is not, so \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            3\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            4\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{3},{\\tilde {x}}_{4}}\n  \n are discarded, and GPT-3 is run on those. This would take \n  \n    \n      \n        4\n        \n          T\n          \n            GPT-3-small\n          \n        \n        +\n        3\n        \n          T\n          \n            GPT-3\n          \n        \n      \n    \n    {\\displaystyle 4T_{\\text{GPT-3-small}}+3T_{\\text{GPT-3}}}\n  \n, which might be shorter than \n  \n    \n      \n        4\n        \n          T\n          \n            GPT-3\n          \n        \n      \n    \n    {\\displaystyle 4T_{\\text{GPT-3}}}\n  \n.\nFor non-greedy decoding, similar ideas apply, except the speculative tokens are accepted or rejected stochastically, in a way that guarantees the final output distribution is the same as if speculative decoding was not used.\n\nIn Multi-Token Prediction, a single forward pass creates a final embedding vector, which then is un-embedded into a token probability. However, that vector can then be further processed by another Transformer block to predict the next token, and so on for arbitrarily many steps into the future. This trades off accuracy for speed, since each new token costs just one more Transformer block, rather than the entire stack.\nSub-quadratic transformers\nTraining transformer-based architectures can be expensive, especially for long inputs. Many methods have been developed to attempt to address the issue. In the image domain, Swin Transformer is an efficient architecture that performs attention inside shifting windows. In the audio domain, SepTr decouples the attention in time and frequency domains. Long Range Arena (2020) is a standard benchmark for comparing the behavior of transformer architectures over long inputs.\nAlternative attention graphs\nThe standard attention graph is either all-to-all or causal, both of which scales as \n  \n    \n      \n        O\n        (\n        \n          N\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle O(N^{2})}\n  \n where \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is the number of tokens in a sequence.\nReformer (2020) reduces the computational load from \n  \n    \n      \n        O\n        (\n        \n          N\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle O(N^{2})}\n  \n to \n  \n    \n      \n        O\n        (\n        N\n        ln\n        \u2061\n        N\n        )\n      \n    \n    {\\displaystyle O(N\\ln N)}\n  \n by using locality-sensitive hashing and reversible layers. \nSparse attention uses attention graphs that grows slower than \n  \n    \n      \n        O\n        (\n        \n          N\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle O(N^{2})}\n  \n. For example, BigBird (2020) uses random small-world networks which grows as \n  \n    \n      \n        O\n        (\n        N\n        )\n      \n    \n    {\\displaystyle O(N)}\n  \n.\nOrdinary transformers require a memory size that is quadratic in the size of the context window. Attention-free transformers reduce this to a linear dependence while still retaining the advantages of a transformer by linking the key to the value.\nRandom Feature Attention\nRandom Feature Attention (2021) uses Fourier random features:\n  \n    \n      \n        \u03c6\n        (\n        x\n        )\n        =\n        \n          \n            1\n            \n              D\n            \n          \n        \n        [\n        cos\n        \u2061\n        \u27e8\n        \n          w\n          \n            1\n          \n        \n        ,\n        x\n        \u27e9\n        ,\n        sin\n        \u2061\n        \u27e8\n        \n          w\n          \n            1\n          \n        \n        ,\n        x\n        \u27e9\n        ,\n        \u22ef\n        cos\n        \u2061\n        \u27e8\n        \n          w\n          \n            D\n          \n        \n        ,\n        x\n        \u27e9\n        ,\n        sin\n        \u2061\n        \u27e8\n        \n          w\n          \n            D\n          \n        \n        ,\n        x\n        \u27e9\n        \n          ]\n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\varphi (x)={\\frac {1}{\\sqrt {D}}}[\\cos \\langle w_{1},x\\rangle ,\\sin \\langle w_{1},x\\rangle ,\\cdots \\cos \\langle w_{D},x\\rangle ,\\sin \\langle w_{D},x\\rangle ]^{T}}\n  \nwhere \n  \n    \n      \n        \n          w\n          \n            1\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          w\n          \n            D\n          \n        \n      \n    \n    {\\displaystyle w_{1},...,w_{D}}\n  \n are independent samples from the normal distribution \n  \n    \n      \n        N\n        (\n        0\n        ,\n        \n          \u03c3\n          \n            2\n          \n        \n        I\n        )\n      \n    \n    {\\displaystyle N(0,\\sigma ^{2}I)}\n  \n. This choice of parameters satisfy \n  \n    \n      \n        \n          E\n        \n        [\n        \u27e8\n        \u03c6\n        (\n        x\n        )\n        ,\n        \u03c6\n        (\n        y\n        )\n        \u27e9\n        ]\n        =\n        \n          e\n          \n            \u2212\n            \n              \n                \n                  \u2016\n                  x\n                  \u2212\n                  y\n                  \n                    \u2016\n                    \n                      2\n                    \n                  \n                \n                \n                  2\n                  \n                    \u03c3\n                    \n                      2\n                    \n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbb {E} [\\langle \\varphi (x),\\varphi (y)\\rangle ]=e^{-{\\frac {\\|x-y\\|^{2}}{2\\sigma ^{2}}}}}\n  \n, or \n  \n    \n      \n        \n          e\n          \n            \u27e8\n            x\n            ,\n            y\n            \u27e9\n            \n              /\n            \n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        =\n        \n          E\n        \n        [\n        \u27e8\n        \n          e\n          \n            \u2016\n            x\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        x\n        )\n        ,\n        \n          e\n          \n            \u2016\n            y\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        y\n        )\n        \u27e9\n        ]\n        \u2248\n        \u27e8\n        \n          e\n          \n            \u2016\n            x\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        x\n        )\n        ,\n        \n          e\n          \n            \u2016\n            y\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        y\n        )\n        \u27e9\n      \n    \n    {\\displaystyle e^{\\langle x,y\\rangle /\\sigma ^{2}}=\\mathbb {E} [\\langle e^{\\|x\\|^{2}/2\\sigma ^{2}}\\varphi (x),e^{\\|y\\|^{2}/2\\sigma ^{2}}\\varphi (y)\\rangle ]\\approx \\langle e^{\\|x\\|^{2}/2\\sigma ^{2}}\\varphi (x),e^{\\|y\\|^{2}/2\\sigma ^{2}}\\varphi (y)\\rangle }\n  \nConsequently, the one-headed attention, with one query, can be written as \n  \n    \n      \n        \n          Attention\n        \n        (\n        q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          softmax\n        \n        \n          (\n          \n            \n              \n                q\n                \n                  K\n                  \n                    \n                      T\n                    \n                  \n                \n              \n              \n                \n                  d\n                  \n                    k\n                  \n                \n              \n            \n          \n          )\n        \n        V\n        \u2248\n        \n          \n            \n              \u03c6\n              (\n              q\n              \n                )\n                \n                  T\n                \n              \n              \n                \u2211\n                \n                  i\n                \n              \n              \n                e\n                \n                  \u2016\n                  \n                    k\n                    \n                      i\n                    \n                  \n                  \n                    \u2016\n                    \n                      2\n                    \n                  \n                  \n                    /\n                  \n                  2\n                  \n                    \u03c3\n                    \n                      2\n                    \n                  \n                \n              \n              \u03c6\n              (\n              \n                k\n                \n                  i\n                \n              \n              )\n              \n                v\n                \n                  i\n                \n                \n                  T\n                \n              \n            \n            \n              \u03c6\n              (\n              q\n              \n                )\n                \n                  T\n                \n              \n              \n                \u2211\n                \n                  i\n                \n              \n              \n                e\n                \n                  \u2016\n                  \n                    k\n                    \n                      i\n                    \n                  \n                  \n                    \u2016\n                    \n                      2\n                    \n                  \n                  \n                    /\n                  \n                  2\n                  \n                    \u03c3\n                    \n                      2\n                    \n                  \n                \n              \n              \u03c6\n              (\n              \n                k\n                \n                  i\n                \n              \n              )\n            \n          \n        \n      \n    \n    {\\displaystyle {\\text{Attention}}(q,K,V)={\\text{softmax}}\\left({\\frac {qK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\approx {\\frac {\\varphi (q)^{T}\\sum _{i}e^{\\|k_{i}\\|^{2}/2\\sigma ^{2}}\\varphi (k_{i})v_{i}^{T}}{\\varphi (q)^{T}\\sum _{i}e^{\\|k_{i}\\|^{2}/2\\sigma ^{2}}\\varphi (k_{i})}}}\n  \nwhere \n  \n    \n      \n        \u03c3\n        =\n        \n          d\n          \n            K\n          \n          \n            1\n            \n              /\n            \n            4\n          \n        \n      \n    \n    {\\displaystyle \\sigma =d_{K}^{1/4}}\n  \n. Similarly for multiple queries, and for multiheaded attention.\nThis approximation can be computed in linear time, as we can compute the matrix \n  \n    \n      \n        \u03c6\n        (\n        \n          k\n          \n            i\n          \n        \n        )\n        \n          v\n          \n            i\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\varphi (k_{i})v_{i}^{T}}\n  \n first, then multiply it with the query. In essence, we have managed to obtain a more precise version of \n  \n    \n      \n        \n          Attention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          softmax\n        \n        \n          (\n          \n            \n              \n                Q\n                \n                  K\n                  \n                    \n                      T\n                    \n                  \n                \n              \n              \n                \n                  d\n                  \n                    k\n                  \n                \n              \n            \n          \n          )\n        \n        V\n        \u2248\n        Q\n        (\n        \n          K\n          \n            T\n          \n        \n        V\n        \n          /\n        \n        \n          \n            \n              d\n              \n                k\n              \n            \n          \n        \n        )\n      \n    \n    {\\displaystyle {\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\approx Q(K^{T}V/{\\sqrt {d_{k}}})}\n  \nPerformer (2022) uses the same Random Feature Attention, but \n  \n    \n      \n        \n          w\n          \n            1\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          w\n          \n            D\n          \n        \n      \n    \n    {\\displaystyle w_{1},...,w_{D}}\n  \n are first independently sampled from the normal distribution \n  \n    \n      \n        N\n        (\n        0\n        ,\n        \n          \u03c3\n          \n            2\n          \n        \n        I\n        )\n      \n    \n    {\\displaystyle N(0,\\sigma ^{2}I)}\n  \n, then they are Gram-Schmidt processed.\nMultimodality\nTransformers can also be used/adapted for modalities (input or output) beyond just text, usually by finding a way to \"tokenize\" the modality.\nMultimodal models can either be trained from scratch, or by finetuning. A 2022 study found that Transformers pretrained only on natural language can be finetuned on only 0.03% of parameters and become competitive with LSTMs on a variety of logical and visual tasks, demonstrating transfer learning. The LLaVA was a vision-language model composed of a language model (Vicuna-13B) and a vision model (ViT-L/14), connected by a linear layer. Only the linear layer is finetuned.\nVision transformers adapt the transformer to computer vision by breaking down input images as a series of patches, turning them into vectors, and treating them like tokens in a standard transformer.\nConformer and later Whisper follow the same pattern for speech recognition, first turning the speech signal into a spectrogram, which is then treated like an image, i.e. broken down into a series of patches, turned into vectors and treated like tokens in a standard transformer.\nPerceivers are a variant of Transformers designed for multimodality.\nFor image generation, notable architectures are DALL-E 1 (2021), Parti (2022), Phenaki (2023), and Muse (2023). Unlike later models, DALL-E is not a diffusion model. Instead, it uses a decoder-only Transformer that autoregressively generates a text, followed by the token representation of an image, which is then converted by a variational autoencoder to an image. Parti is an encoder-decoder Transformer, where the encoder processes a text prompt, and the decoder generates a token representation of an image. Muse is an encoder-only Transformer that is trained to predict masked image tokens from unmasked image tokens. During generation, all input tokens are masked, and the highest-confidence predictions are included for the next iteration, until all tokens are predicted. Phenaki is a text-to-video model. It is a bidirectional masked transformer conditioned on pre-computed text tokens. The generated tokens are then decoded to a video.\nApplications\nThe transformer has had great success in natural language processing (NLP). Many large language models such as GPT-2, GPT-3, GPT-4, Gemini, AlbertAGPT, Claude, BERT, Grok, XLNet, RoBERTa and ChatGPT demonstrate the ability of transformers to perform a wide variety of NLP-related subtasks and their related real-world applications, including:\n\nmachine translation\ntime series prediction\ndocument summarization\ndocument generation\nnamed entity recognition (NER)\nwriting computer code based on requirements expressed in natural language.\nspeech-to-text\nBeyond traditional NLP, the transformer architecture has had success in other applications, such as:\n\nbiological sequence analysis\nvideo understanding\nprotein folding (such as AlphaFold)\nevaluating chess board positions. Using static evaluation alone (that is, with no Minimax search) transformer achieved an Elo of 2895, putting it at grandmaster level.\nSee also\nseq2seq \u2013 Family of machine learning approaches\nPerceiver \u2013 Variant of Transformer designed for multimodal data\nVision transformer \u2013 Machine learning model for vision processing\nLarge language model \u2013 Type of machine learning model\nBERT (language model) \u2013 Series of language models developed by Google AI\nGenerative pre-trained transformer \u2013 Type of large language model\nT5 (language model) \u2013 Series of large language models developed by Google AI\nNotes\n\nReferences\n== Further reading ==", "result": "# Transformer (deep learning architecture)\n\nThe transformer is a deep learning model architecture first proposed in a paper published in 2017 by researchers at Google Brain. To date, it has become one of the most popular and effective deep architectures for solving sequence transduction tasks\u2014in particular machine translation.\n\nThe transformer model excels at handling long-distance dependencies, which had previously been a challenge for recurrent neural networks (RNNs), particularly when using long short-term memory (LSTM) units. In addition, unlike recurrent neural networks, the transformer model excels at handling sequences of arbitrary length, scaling well with sequence length.\n\n## History\n\n### Recurrent neural networks\n\nRecurrent neural networks (RNNs) are a class of artificial neural networks which contain hidden states which have a temporal dynamic state which allows them to capture information about time series. RNNs can handle sequences of arbitrary length. In order to mitigate the vanishing gradient problem in RNNs, LSTM units were introduced as a way to train recurrent networks to remember information for long periods of time.\n\nRNNs are however difficult to train effectively when handling long sequences because the error signal becomes very small when using gradient descent optimization techniques. This leads to poor performance when a large context window is needed, such as when training models on long documents.\n\nIn the context of neural machine translation, this results in the RNN being unable to capture the meaning of entire sentences well enough to translate them effectively. Several methods have been developed to try to address this problem, including LSTM with multi-source fusion attention, hierarchical recurrent neural network, and LSTM with additional external read/write memory, such as Neural Turing Machines and Differentiable Neural Computers.\n\n### Sequence-to-sequence models\n\nSequence-to-sequence (seq2seq) models are a class of RNNs which are widely used for modeling sequence data. Seq2seq models are used in machine translation, text summarization, and speech recognition. In these models, there are two RNNs: an encoder RNN and a decoder RNN. The encoder RNN reads an input sequence and encodes it into a fixed-size vector, called the context vector. The decoder RNN then reads the context vector and generates an output sequence.\n\nWhile seq2seq models are powerful, they suffer from the same limitations as other RNN-based models when dealing with long sequences. In particular, they are unable to effectively capture information from far apart positions in the input sequence when the context window is large. This makes them unsuitable for tasks such as machine translation of long documents or text summarization of long articles.\n\n### Attention mechanisms\n\nAttention mechanisms were introduced to allow models to overcome the limitations of fixed-size context vectors when dealing with long sequences. Attention mechanisms allow the model to attend to different parts of the input sequence when generating each element of the output sequence. This enables the model to dynamically focus on different parts of the input sequence when needed, rather than being restricted to a fixed context vector.\n\nSeveral attention mechanisms have been developed, including additive attention, multiplicative attention, and additive attention with input feeding. These attention mechanisms have been used in a variety of models, including seq2seq models, convolutional neural networks, and transformers.\n\n### Transformers\n\nTransformers are a type of neural network architecture that uses self-attention mechanism to model the input data. Unlike traditional neural networks, which process data sequentially, transformers use self-attention to allow each position in the input sequence to interact directly with every other position. This enables the model to capture global dependencies in the data without the need for recurrence or convolutions.\n\nTransformers were introduced in the 2017 paper \"Attention Is All You Need\" by Vaswani et al., and have since become one of the most widely used neural network architectures for natural language processing tasks. They have also been applied to other domains, such as computer vision and speech recognition.\n\nOne of the key advantages of transformers over traditional neural networks is their ability to capture long-range dependencies in the data. This makes them well-suited for tasks such as language modeling, where understanding the context of a word often requires considering words that are far apart in the sequence. Additionally, transformers are able to parallelize the computation of self-attention across all positions in the input sequence, making them highly efficient on modern hardware.\n\nAnother advantage of transformers is their ability to handle variable-length input sequences. Traditional neural networks require fixed-length inputs, which can be limiting when dealing with text data, for example. Transformers can handle input sequences of any length, making them more flexible and better suited for real-world applications.\n\nDespite their many advantages, transformers also have some limitations. For example, they can be computationally expensive to train and inference can be slow compared to simpler models. Additionally, transformers can be sensitive to hyperparameters such as the number of attention heads and the size of the hidden layers.\n\nOverall, the transformer architecture has revolutionized the field of natural language processing and has led to significant improvements in a wide range of NLP tasks. As research in this area continues, it is likely that we will see even more powerful and efficient transformer-based models in the future.\n\n## Architecture\n\nThe transformer architecture consists of an encoder and a decoder, both of which use a stack of identical layers. Each layer consists of two sub-layers: a multi-head self-attention mechanism and a position-wise fully connected feed-forward network. Both the encoder and decoder share the same fully connected feed-forward network, but use different multi-headed self-attention mechanisms.\n\nThe multi-headed self-attention mechanism allows the model to focus on different parts of the input sequence when generating each element of the output sequence. It does this by projecting the input sequence into multiple different vectors, and then computing attention scores between each pair of vectors. The outputs of each attention head are then combined using a weighted sum.\n\nThe position-wise fully connected feed-forward network is a simple feed-forward network that is applied separately to each position in the input sequence. It consists of two linear transformations with a nonlinear activation function (such as the rectified linear unit (ReLU)) in between.\n\nThe encoder takes a sequence of symbols as input and produces a sequence of continuous vector representations, called the encoder representation. The encoder consists of a stack of identical layers, each of which contains two sub-layers: a multi-headed self-attention mechanism and a position-wise fully connected feed-forward network.\n\nThe decoder takes the encoder representation and a sequence of generated symbols as input and produces a sequence of probability distributions over the vocabulary. The decoder also consists of a stack of identical layers, each of which contains three sub-layers: a multi-headed self-attention mechanism, a multi-headed encoder-decoder attention mechanism, and a position-wise fully connected feed-forward network.\n\nDuring training, the decoder is given access to the true output sequence up to the current time step. At each time step, the decoder generates a probability distribution over the vocabulary, and the symbol with the highest probability is selected as the next output symbol. The probability distribution is computed using the encoder representation and the previously generated output symbols.\n\nDuring inference, the decoder is given access only to the encoder representation and a start-of-sequence (SOS) token. At each time step, the decoder generates a probability distribution over the vocabulary, and the symbol with the highest probability is fed back into the decoder as the next input symbol. This process is repeated until the end-of-sequence (EOS) token is generated or a maximum output length is reached.\n\nThe transformer architecture is trained using the same loss function as the original seq2seq model, which is the cross-entropy loss between the predicted output sequence and the true output sequence. During training, the gradients of the loss function with respect to the model parameters are computed using backpropagation, and the model parameters are updated using an optimization algorithm such as stochastic gradient descent (SGD) or Adam.\n\nThe transformer architecture has several advantages over the original seq2seq model. First, the attention mechanism allows the model to focus on different parts of the input sequence when generating each element of the output sequence, which improves the model's ability to capture long-range dependencies in the data. Second, the use of a fixed-size encoder representation allows the model to handle input sequences of arbitrary length, whereas the original seq2seq model required the lengths of the input and output sequences to be equal. Finally, the use of a separate attention mechanism for the encoder-decoder attention allows the model to attend to different parts of the input sequence when generating each element of the output sequence, which further improves the model's ability to capture long-range dependencies in the data.\n\n## Applications\n\n### Natural language processing\n\nNatural language processing (NLP) is a field of study that focuses on the interaction between computers and human language. NLP is concerned with the analysis, generation, and understanding of human language by computers. The goal of NLP is to enable computers to understand, interpret, and generate human language in a way that is useful for a variety of applications.\n\nThe transformer architecture has been widely used in NLP tasks, such as machine translation, text summarization, question answering, and text classification. The transformer architecture has achieved state-of-the-art performance on many NLP tasks and has become the de facto standard for NLP tasks.\n\nMachine translation is the task of automatically translating text from one language to another. The transformer architecture has achieved state-of-the-art performance on machine translation tasks. The transformer architecture is able to capture long-range dependencies in the source and target languages, which is important for accurate translation.\n\nText summarization is the task of creating a concise summary of a longer piece of text. The transformer architecture has been used for text summarization tasks, such as extractive summarization and abstractive summarization. The transformer architecture is able to capture the main ideas of the text and generate a summary that is both concise and informative.\n\nQuestion answering is the task of answering a question based on a given context. The transformer architecture has been used for question answering tasks, such as reading comprehension and conversational question answering. The transformer architecture is able to capture the relevant information from the context and generate accurate answers to the questions.\n\nText classification is the task of assigning a label to a given piece of text. The transformer architecture has been used for text classification tasks, such as sentiment analysis and topic classification. The transformer architecture is able to capture the semantic meaning of the text and generate accurate classifications.\n\n### Computer vision\n\nComputer vision is a field of study that focuses on enabling computers to interpret and understand visual information from the world. Computer vision is concerned with the development of algorithms and techniques for analyzing and interpreting digital images and videos. The goal of computer vision is to enable computers to perform tasks that typically require human vision, such as object detection, image segmentation, and scene reconstruction.\n\nThe transformer architecture has been applied to computer vision tasks, such as image classification, object detection, and image segmentation. The transformer architecture has achieved state-of-the-art performance on many computer vision tasks.\n\nImage classification is the task of assigning a label to a given image. The transformer architecture has been used for image classification tasks. The transformer architecture is able to capture the semantic meaning of the image and generate accurate classifications.\n\nObject detection is the task of identifying objects in an image and determining their location and size. The transformer architecture has been used for object detection tasks. The transformer architecture is able to capture the spatial relationships between objects in the image and generate accurate detections.\n\nImage segmentation is the task of partitioning an image into multiple regions, each corresponding to a different object or region of interest. The transformer architecture has been used for image segmentation tasks. The transformer architecture is able to capture the spatial relationships between pixels in the image and generate accurate segmentations.\n\n### Speech recognition\n\nSpeech recognition is the task of converting spoken language into text. The transformer architecture has been applied to speech recognition tasks, such as automatic speech recognition (ASR). The transformer architecture has achieved state-of-the-art performance on many speech recognition tasks.\n\nAutomatic speech recognition is the task of converting spoken language into text. The transformer architecture has been used for ASR tasks. The transformer architecture is able to capture the acoustic features of the speech signal and generate accurate transcriptions.\n\n### Other applications\n\nThe transformer architecture has been applied to a wide range of other applications, such as recommendation systems, protein structure prediction, and reinforcement learning. The transformer architecture has achieved state-of-the-art performance on many of these applications.\n\nRecommendation systems are used to recommend items to users based on their preferences. The transformer architecture has been used for recommendation systems tasks. The transformer architecture is able to capture the user preferences and generate accurate recommendations.\n\nProtein structure prediction is the task of predicting the 3D structure of a protein from its amino acid sequence. The transformer architecture has been used for protein structure prediction tasks. The transformer architecture is able to capture the interactions between amino acids in the protein and generate accurate predictions of the protein structure.\n\nReinforcement learning is a type of machine learning where an agent learns by interacting with an environment. The transformer architecture has been used for reinforcement learning tasks. The transformer architecture is able to capture the dynamics of the environment and generate effective policies for the agent.\n\n## Recent advances\n\nRecent work has focused on improving the performance of transformers on specific tasks or reducing the computational cost of training and inference. Some notable examples include the XLNet, BERT, RoBERTa, ALBERT, and DistilBERT models.\n\nXLNet is a generalized autoregressive (AR) model where next-token prediction is conditioned on all previous tokens regardless of the direction (left or right). XLNet is designed to overcome the limitation of the auto-regressive nature of the Transformer model by learning from both directions.\n\nBidirectional Encoder Representations from Transformers (BERT) is a model proposed by Google in 2018. BERT is pre-trained on two NLP tasks: masked language models and next sentence prediction. BERT is able to achieve state-of-the-art results on eleven NLP tasks.\n\nRoBERTa is an upgraded version of BERT. The authors made a few major changes to the original BERT model and training method, resulting in a better-performing model. The authors used the same pre-training method as BERT, but they released larger, better-trained language models. The RoBERTa Large model has 355 million parameters.\n\nALBERT (A Lite BERT) is a parameter reduction technique for BERT. ALBERT demonstrates that pre-training BERT with a much larger batch size and longer training time results in significantly higher performance.\n\nDistilBERT, RoBERTa, V-BERT, and ALBERT are smaller versions of BERT that use less memory and training resources while maintaining similar accuracy.\n\nThe Vaswani et al. model has been used in multilingual settings, where it learns multiple language representations from monolingual data. The model has also been applied to other NLP problems, such as semantic role labeling, and to other tasks, such as image captioning.\n\nThe original transformer architecture has been extended to handle multiple inputs, such as the transformer with relative encoding for video captioning, and to handle different types of data, such as the transformer with convolutional attention for image captioning.\n\nThe original transformer architecture has been extended to handle multiple inputs, such as the transformer with relative encoding for video captioning. The transformer with relative encoding is able to handle multiple inputs by using a single attention mechanism to attend to all of the inputs simultaneously. The transformer with relative encoding is able to learn relative positions between the inputs, which is useful for tasks such as video captioning where the relative position of the inputs is important.\n\nThe transformer architecture has also been extended to handle different types of data, such as the transformer with convolutional attention for image captioning. The transformer with convolutional attention is able to handle image data by using a convolutional attention mechanism to attend to different parts of the image. The transformer with convolutional attention is able to learn the relationship between the image and the caption, which is useful for tasks such as image captioning where the relationship between the image and the caption is important.\n\nThe transformer architecture has been used in a variety of different tasks, such as machine translation, image captioning, and dialogue response ranking. The transformer architecture has been used in these tasks to improve the performance of the models.\n\nThe transformer architecture has been used in machine translation tasks to improve the performance of the models. The transformer architecture is able to handle long sequences and capture the global context of the input sequence, which is important for machine translation tasks.\n\nThe transformer architecture has been used in image captioning tasks to improve the performance of the models. The transformer architecture is able to handle variable-length input sequences and capture the global context of the input sequence, which is important for image captioning tasks.\n\nThe transformer architecture has been used in dialogue response ranking tasks to improve the performance of the models. The transformer architecture is able to handle variable-length input sequences and capture the global context of the input sequence, which is important for dialogue response ranking tasks.\n\n## Future work\n\nThe transformer architecture has been successfully applied to various NLP tasks, achieving state-of-the-art results. However, there are still several challenges that need to be addressed in order to further improve the performance of the transformer model.\n\nOne of the main challenges is the computational cost of training and inference with the transformer model. The self-attention mechanism requires computing a quadratic number of dot products with respect to the sequence length, which can be computationally expensive for long sequences. This has led to the development of various techniques to speed up the attention mechanism, such as low-rank approximation, sparsity assumption, and causal attention.\n\nAnother challenge is the limited scalability of the transformer model. While the transformer model has shown impressive results on various tasks, it is not clear if it can be scaled up to handle larger datasets or more complex tasks. This is because the transformer model has a fixed number of attention heads and a fixed size for each head, which may not be sufficient for handling larger datasets or more complex tasks.\n\nFinally, the transformer model is still a relatively new architecture and there is still much to be learned about how to best design and train these models. This includes questions such as how to best choose the number of attention heads, the size of each head, and the number of layers in the model.\n\nDespite these challenges, the transformer architecture has already had a profound impact on the field of NLP and it is likely that it will continue to do so in the future. With continued research and development, it is possible that the transformer model will become even more powerful and capable of tackling a wider range of NLP tasks.\n\n"}]