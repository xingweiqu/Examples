[{"instruction": "You are an AI editor writing a complete Wikipedia article that adheres to Wikipedia's content standards. The article should be coherent, with clear connections between sections and a consistent narrative throughout. Use neutral and encyclopedic language. \n\nThe article should contain 8 sections:\n\nSection 1 title should be Introduction, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the process and effectiveness of named-entity recognition (NER) in identifying and categorizing entities in unstructured text, highlighting the system's performance compared to human annotators.\n\nSection 2 title should be Named-entity recognition platforms, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the capabilities and features of notable named-entity recognition platforms, highlighting their support for different languages, domains, and approaches such as rule-based, statistical, and deep learning models.\n\nSection 3 title should be Problem definition, and this section should contain approximately (400 words):\nIn this section, you should follow this prompt: Explain the challenges and considerations involved in defining and recognizing named entities, including the segmentation and classification processes, the role of rigid designators, and the flexibility required in practical applications.\n\nSection 4 title should be Formal evaluation, and this section should contain approximately (600 words):\nIn this section, you should follow this prompt: Discuss the challenges and methodologies involved in formally evaluating the performance of named-entity recognition systems, highlighting the limitations of traditional metrics like precision, recall, and F1 score, and exploring alternative evaluation models that offer a more nuanced assessment of system accuracy.\n\nSection 5 title should be Approaches, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the various approaches to named-entity recognition, highlighting the differences between linguistic grammar-based techniques and statistical models, including the role of machine learning and the use of conditional random fields.\n\nSection 6 title should be Problem domains, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Discuss the challenges and evolution of named-entity recognition (NER) systems across various domains, highlighting the difficulties in adapting systems to new areas and the focus on different text types and specialized fields such as journalism, military communication, and bioinformatics.\n\nSection 7 title should be Current challenges and research, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Discuss the ongoing challenges and research directions in named-entity recognition, including efforts to reduce annotation labor, enhance domain robustness, scale to fine-grained entity types, address complex linguistic contexts like Twitter, and explore new methodologies such as semi-supervised and graph-based models.\n\nSection 8 title should be See also, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss related concepts and techniques that complement named-entity recognition, highlighting their roles and interconnections in the broader context of information processing and extraction.\n\nTotal article length should be approximately 1800 words. Ensure smooth transitions between sections and maintain a coherent narrative throughout. Each section should flow naturally into the next, building a complete and informative Wikipedia article. Incorporate appropriate references and adhere to Wikipedia's neutral point of view.", "input": "", "output": "Introduction\nNamed-entity recognition (NER) (also known as (named) entity identification, entity chunking, and entity extraction) is a subtask of information extraction that seeks to locate and classify named entities mentioned in unstructured text into pre-defined categories such as person names, organizations, locations, medical codes, time expressions, quantities, monetary values, percentages, etc.\nMost research on NER/NEE systems has been structured as taking an unannotated block of text, such as this one:\n\nJim bought 300 shares of Acme Corp. in 2006.\nAnd producing an annotated block of text that highlights the names of entities:\n\n[Jim]Person bought 300 shares of [Acme Corp.]Organization in [2006]Time.\nIn this example, a person name consisting of one token, a two-token company name and a temporal expression have been detected and classified.\nState-of-the-art NER systems for English produce near-human performance. For example, the best system entering MUC-7 scored 93.39% of F-measure while human annotators scored 97.60% and 96.95%.Named-entity recognition platforms\nNotable NER platforms include:\n\nGATE supports NER across many languages and domains out of the box, usable via a graphical interface and a Java API.\nOpenNLP includes rule-based and statistical named-entity recognition.\nSpaCy features fast statistical NER as well as an open-source named-entity visualizer.\nTransformers features token classification using deep learning models.Problem definition\nIn the expression named entity, the word named restricts the task to those entities for which one or many strings, such as words or phrases, stand (fairly) consistently for some referent. This is closely related to rigid designators, as defined by Kripke, although in practice NER deals with many names and referents that are not philosophically \"rigid\". For instance, the automotive company created by Henry Ford in 1903 can be referred to as Ford or Ford Motor Company, although \"Ford\" can refer to many other entities as well (see Ford). Rigid designators include proper names as well as terms for certain biological species and substances, but exclude pronouns (such as \"it\"; see coreference resolution), descriptions that pick out a referent by its properties (see also De dicto and de re), and names for kinds of things as opposed to individuals (for example \"Bank\").\nFull named-entity recognition is often broken down, conceptually and possibly also in implementations, as two distinct problems: detection of names, and classification of the names by the type of entity they refer to (e.g. person, organization, or location).\nThe first phase is typically simplified to a segmentation problem: names are defined to be contiguous spans of tokens, with no nesting, so that \"Bank of America\" is a single name, disregarding the fact that inside this name, the substring \"America\" is itself a name. This segmentation problem is formally similar to chunking. The second phase requires choosing an ontology by which to organize categories of things.\nTemporal expressions and some numerical expressions (e.g., money, percentages, etc.) may also be considered as named entities in the context of the NER task. While some instances of these types are good examples of rigid designators (e.g., the year 2001) there are also many invalid ones (e.g., I take my vacations in \u201cJune\u201d). In the first case, the year 2001 refers to the 2001st year of the Gregorian calendar. In the second case, the month June may refer to the month of an undefined year (past June, next June, every June, etc.). It is arguable that the definition of named entity is loosened in such cases for practical reasons. The definition of the term named entity is therefore not strict and often has to be explained in the context in which it is used.\nCertain hierarchies of named entity types have been proposed in the literature. BBN categories, proposed in 2002, are used for question answering and consists of 29 types and 64 subtypes. Sekine's extended hierarchy, proposed in 2002, is made of 200 subtypes. More recently, in 2011 Ritter used a hierarchy based on common Freebase entity types in ground-breaking experiments on NER over social media text.Formal evaluation\nTo evaluate the quality of an NER system's output, several measures have been defined. The usual measures are called precision, recall, and F1 score. However, several issues remain in just how to calculate those values.\nThese statistical measures work reasonably well for the obvious cases of finding or missing a real entity exactly; and for finding a non-entity. However, NER can fail in many other ways, many of which are arguably \"partially correct\", and should not be counted as complete success or failures. For example, identifying a real entity, but: \n\nwith fewer tokens than desired (for example, missing the last token of \"John Smith, M.D.\")\nwith more tokens than desired (for example, including the first word of \"The University of MD\")\npartitioning adjacent entities differently (for example, treating \"Smith, Jones Robinson\" as 2 vs. 3 entities)\nassigning it a completely wrong type (for example, calling a personal name an organization)\nassigning it a related but inexact type (for example, \"substance\" vs. \"drug\", or \"school\" vs. \"organization\")\ncorrectly identifying an entity, when what the user wanted was a smaller- or larger-scope entity (for example, identifying \"James Madison\" as a personal name, when it's part of \"James Madison University\"). Some NER systems impose the restriction that entities may never overlap or nest, which means that in some cases one must make arbitrary or task-specific choices.\nOne overly simple method of measuring accuracy is merely to count what fraction of all tokens in the text were correctly or incorrectly identified as part of entity references (or as being entities of the correct type). This suffers from at least two problems: first, the vast majority of tokens in real-world text are not part of entity names, so the baseline accuracy (always predict \"not an entity\") is extravagantly high, typically >90%; and second, mispredicting the full span of an entity name is not properly penalized (finding only a person's first name when his last name follows might be scored as \u00bd accuracy).\nIn academic conferences such as CoNLL, a variant of the F1 score has been defined as follows:\n\nPrecision is the number of predicted entity name spans that line up exactly with spans in the gold standard evaluation data. I.e. when [Person Hans] [Person Blick] is predicted but [Person Hans Blick] was required, precision for the predicted name is zero. Precision is then averaged over all predicted entity names.\nRecall is similarly the number of names in the gold standard that appear at exactly the same location in the predictions.\nF1 score is the harmonic mean of these two.\nIt follows from the above definition that any prediction that misses a single token, includes a spurious token, or has the wrong class, is a hard error and does not contribute positively to either precision or recall. Thus, this measure may be said to be pessimistic: it can be the case that many \"errors\" are close to correct, and might be adequate for a given purpose. For example, one system might always omit titles such as \"Ms.\" or \"Ph.D.\", but be compared to a system or ground-truth data that expects titles to be included. In that case, every such name is treated as an error. Because of such issues, it is important actually to examine the kinds of errors, and decide how important they are given one's goals and requirements.\nEvaluation models based on a token-by-token matching have been proposed. Such models may be given partial credit for overlapping matches (such as using the Intersection over Union criterion). They allow a finer grained evaluation and comparison of extraction systems.Approaches\nNER systems have been created that use linguistic grammar-based techniques as well as statistical models such as machine learning. Hand-crafted grammar-based systems typically obtain better precision, but at the cost of lower recall and months of work by experienced computational linguists. Statistical NER systems typically require a large amount of manually annotated training data. Semisupervised approaches have been suggested to avoid part of the annotation effort.\nMany different classifier types have been used to perform machine-learned NER, with conditional random fields being a typical choice.Problem domains\nIn 2001, research indicated that even state-of-the-art NER systems were brittle, meaning that NER systems developed for one domain did not typically perform well on other domains. Considerable effort is involved in tuning NER systems to perform well in a new domain; this is true for both rule-based and trainable statistical systems.\nEarly work in NER systems in the 1990s was aimed primarily at extraction from journalistic articles. Attention then turned to processing of military dispatches and reports. Later stages of the automatic content extraction (ACE) evaluation also included several types of informal text styles, such as weblogs and text transcripts from conversational telephone speech conversations. Since about 1998, there has been a great deal of interest in entity identification in the molecular biology, bioinformatics, and medical natural language processing communities.  The most common entity of interest in that domain has been names of genes and gene products. There has been also considerable interest in the recognition of chemical entities and drugs in the context of the CHEMDNER\ncompetition, with 27 teams participating in this task.Current challenges and research\nDespite high F1 numbers reported on the MUC-7 dataset, the problem of named-entity recognition is far from being solved. The main efforts are directed to reducing the annotations labor by employing semi-supervised learning, robust performance across domains and scaling up to fine-grained entity types. In recent years, many projects have turned to crowdsourcing, which is a promising solution to obtain high-quality aggregate human judgments for supervised and semi-supervised machine learning approaches to NER. Another challenging task is devising models to deal with linguistically complex contexts such as Twitter and search queries.\nThere are some researchers who did some comparisons about the NER performances from different statistical models such as HMM (hidden Markov model), ME (maximum entropy), and CRF (conditional random fields), and feature sets. And some researchers recently proposed graph-based semi-supervised learning model for language specific NER tasks.\nA recently emerging task of identifying \"important expressions\" in text and cross-linking them to Wikipedia can be seen as an instance of extremely fine-grained named-entity recognition, where the types are the actual Wikipedia pages describing the (potentially ambiguous) concepts. Below is an example output of a Wikification system:\n\nAnother field that has seen progress but remains challenging is the application of NER to Twitter and other microblogs, considered \"noisy\" due to non-standard orthography, shortness and informality of texts. NER challenges in English Tweets have been organized by research communities to compare performances of various approaches, such as bidirectional LSTMs, Learning-to-Search, or CRFs.See also\nControlled vocabulary\nCoreference resolution\nEntity linking (aka named entity normalization, entity disambiguation)\nInformation extraction\nKnowledge extraction\nOnomastics\nRecord linkage\nSmart tag (Microsoft)\n\n\n== References ==", "result": "# Named-Entity Recognition\n\nNamed-entity recognition (NER) is a critical component of natural language processing (NLP) that involves identifying and classifying named entities within unstructured text into predefined categories such as person names, organizations, locations, dates, and quantities. This process significantly enhances the ability of NLP systems to understand and utilize textual data. While human annotators can achieve high accuracy, NER systems often outperform them in terms of speed and scalability. For instance, NER systems can process vast amounts of text in real-time, whereas human annotators would struggle to maintain the same level of efficiency and consistency.\n\n# Named-entity recognition platforms\n\nSeveral named-entity recognition (NER) platforms have emerged, each offering unique capabilities and features. Notable platforms include Stanford NER, spaCy, and Google NER. These platforms support multiple languages and domains, from English and Spanish to less common ones like Japanese and Arabic. They employ a variety of approaches, including rule-based, statistical, and deep learning models. Rule-based systems rely on handcrafted rules and lexicons, while statistical models leverage large corpora for training. Deep learning models, particularly those using recurrent neural networks (RNNs) and transformers, have shown significant improvements in accuracy and flexibility, making them a preferred choice for many applications.\n\n# Problem definition\n\nDefining and recognizing named entities in text presents several challenges. Segmentation is crucial as it involves breaking down continuous text into meaningful units. Classification further complicates matters, as it requires distinguishing between similar entities and understanding the context in which they appear. Rigid designators, which refer to specific individuals or entities without ambiguity, pose particular difficulties. For example, the name \"John Smith\" can refer to different people depending on the context. Flexibility is essential in practical applications, where the system must adapt to varying text styles, dialects, and cultural nuances. Additionally, the dynamic nature of language, with the introduction of new entities and the obsolescence of others, necessitates continuous updates and refinements in NER systems.\n\n# Formal evaluation\n\nEvaluating the performance of named-entity recognition systems is complex due to the inherent imprecision and variability in annotated data. Traditional metrics such as precision, recall, and F1 score provide a basic measure of performance but do not capture the nuances of NER. Precision measures the proportion of true positives among all predicted positives, recall measures the proportion of true positives among all actual positives, and F1 score combines both metrics. However, these metrics can be misleading, especially when dealing with imbalanced datasets. Alternative evaluation models, such as area under the ROC curve (AUC-ROC), Cohen\u2019s Kappa, and F-measure, offer a more comprehensive assessment. These models account for the uncertainty in annotations and provide a more robust measure of system accuracy.\n\n# Approaches\n\nVarious approaches are employed in named-entity recognition, each with its strengths and weaknesses. Linguistic grammar-based techniques rely on syntactic and semantic analysis to identify and classify entities. These methods are effective in structured environments but may struggle with complex and ambiguous text. Statistical models, on the other hand, learn patterns from large annotated datasets and are highly flexible. Conditional random fields (CRFs) are widely used in statistical models due to their ability to model dependencies between adjacent entities. Deep learning models, such as recurrent neural networks (RNNs) and transformers, have achieved state-of-the-art results by leveraging large-scale training data and advanced architectures. These models can handle complex linguistic structures and are particularly useful in tasks requiring high accuracy and scalability.\n\n# Problem domains\n\nThe application of named-entity recognition spans various domains, each presenting unique challenges. In journalism, NER systems must accurately identify and categorize entities from diverse sources, including news articles and social media posts. Military communication poses additional challenges due to the need for rapid and precise identification of entities in high-stakes scenarios. Bioinformatics requires specialized NER systems to extract relevant information from scientific literature, where entities such as genes, proteins, and diseases are frequently mentioned. The adaptation of NER systems to new domains is often difficult due to the need for domain-specific knowledge and annotated data. Consequently, researchers focus on developing modular and adaptable NER frameworks that can be easily reconfigured for different text types and specialized fields.\n\n# Current challenges and research\n\nDespite significant advancements, named-entity recognition continues to face several challenges. Reducing annotation labor remains a priority, as manual annotation is time-consuming and costly. Efforts are being made to develop semi-supervised and unsupervised learning methods that require minimal labeled data. Enhancing domain robustness is another focus, as NER systems often perform poorly in new or underrepresented domains. Fine-grained entity types, such as job titles and product names, present additional challenges due to their complexity and variability. Addressing complex linguistic contexts, such as those found in social media platforms like Twitter, is also a significant challenge. Researchers are exploring new methodologies, including graph-based models and multimodal approaches, to improve the accuracy and adaptability of NER systems.\n\n# See also\n\nNamed-entity recognition is closely related to other natural language processing techniques and information extraction methods. Information extraction (IE) encompasses a broader range of tasks, including entity recognition, relation extraction, and event detection. Other relevant concepts include:\n\n- **Information extraction**: A subfield of NLP that focuses on automatically extracting structured information from unstructured or semi-structured text.\n- **Relation extraction**: Identifies relationships between entities in text, such as \"X is located in Y\" or \"X works for Y.\"\n- **Event detection**: Detects and classifies events mentioned in text, such as \"X happened to Y.\"\n- **Knowledge graph construction**: Uses NER and IE to build and maintain databases of structured knowledge.\n- **Sentiment analysis**: Determines the emotional tone behind a series of words, which can be influenced by named entities.\n- **Coreference resolution**: Identifies and links mentions of the same entity within a text, which is crucial for accurate NER.\n\nThese techniques complement NER and are integral to the broader field of text analytics and information retrieval."}, {"instruction": "You are an AI editor writing a complete Wikipedia article that adheres to Wikipedia's content standards. The article should be coherent, with clear connections between sections and a consistent narrative throughout. Use neutral and encyclopedic language. \n\nThe article should contain 44 sections:\n\nSection 1 title should be Introduction, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the key characteristics and capabilities of large language models, including their training methods, applications, and potential limitations.\n\nSection 2 title should be History, and this section should contain approximately (500 words):\nIn this section, you should follow this prompt: Discuss the evolution of large language models from early statistical approaches to modern transformer-based architectures, highlighting key milestones and innovations, such as the introduction of neural networks, BERT, GPT series, and the emergence of multimodal capabilities.\n\nSection 3 title should be Dataset preprocessing, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the process and importance of dataset preprocessing in preparing data for training large language models, highlighting key techniques and considerations.\n\nSection 4 title should be Tokenization, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain the process and purpose of tokenization in large language models, including how text is converted to numerical tokens and the role of special tokens and symbols in this process.\n\nSection 5 title should be BPE, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the process and purpose of using byte-pair encoding (BPE) in tokenizing text for large language models, including how it merges characters and n-grams to create a vocabulary of a specific size.\n\nSection 6 title should be Problems, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the challenges and inefficiencies faced by large language models when tokenizing non-English languages due to an English-optimized token vocabulary, and the impact this has on text completion and processing.\n\nSection 7 title should be Dataset cleaning, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the importance and methods of dataset cleaning in training large language models, including the challenges posed by LLM-generated content on the web.\n\nSection 8 title should be Synthetic data, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the role and importance of synthetic data in training large language models, including how it addresses the limitations of naturally available linguistic data, with reference to examples like Microsoft's Phi series of LLMs.\n\nSection 9 title should be Training and architecture, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the processes involved in training large language models, including the architectural components and techniques that enable their functionality and scalability.\n\nSection 10 title should be Reinforcement learning from human feedback, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how reinforcement learning from human feedback (RLHF) is used to enhance large language models, focusing on the role of algorithms like proximal policy optimization in refining models based on human preferences.\n\nSection 11 title should be Instruction tuning, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how \"self-instruct\" methods enable large language models to improve their responses by learning from human-generated corrections.\n\nSection 12 title should be Mixture of experts, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how mixture of experts (MoE) techniques are used to manage the training and operational costs of large language models, particularly those with up to 1 trillion parameters, as researched by Google since 2017.\n\nSection 13 title should be Prompt engineering, attention mechanism, and context window, and this section should contain approximately (500 words):\nIn this section, you should follow this prompt: Explain how prompt engineering, the attention mechanism, and context window size impact the performance and limitations of large language models in processing and generating text.\n\nSection 14 title should be Infrastructure, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the types of infrastructure required to train the largest language models, highlighting the computational resources, data storage capabilities, and energy considerations involved.\n\nSection 15 title should be Training cost, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Discuss the evolving costs and scale of training large language models, highlighting specific examples of model sizes, financial investments, and the comparative computational requirements for training versus inference.\n\nSection 16 title should be Tool use, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Discuss how large language models can be enhanced to perform tasks beyond their inherent capabilities by utilizing external tools, such as program execution and API integration, and explain the role of retrieval-augmented generation in improving their performance.\n\nSection 17 title should be Agency, and this section should contain approximately (400 words):\nIn this section, you should follow this prompt: Discuss how large language models can be integrated with additional modules to function as autonomous agents, focusing on methods like ReAct, DEPS, and Reflexion, and their applications in planning, learning, and interacting with environments.\n\nSection 18 title should be Compression, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how post-training quantization reduces the space requirements of large language models by adjusting parameter precision while maintaining performance, including techniques like layer-specific codebooks and handling outlier weights.\n\nSection 19 title should be Multimodality, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain how multimodality is achieved in large language models by integrating different types of inputs and outputs, and describe specific examples of multimodal models and their applications.\n\nSection 20 title should be Reasoning, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Discuss the emergence and impact of reasoning models in large language model development, highlighting their design for complex reasoning tasks, performance improvements, and the introduction of open-weight models like DeepSeek-R1.\n\nSection 21 title should be Properties, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Describe the key characteristics and capabilities of large language models, focusing on their ability to understand and generate human-like text, learn from vast amounts of data, and adapt to various linguistic tasks.\n\nSection 22 title should be Scaling laws, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain how scaling laws, particularly the \"Chinchilla scaling,\" predict the performance of large language models based on factors like compute cost, model size, and dataset size, and describe the associated variables and statistical hyper-parameters involved.\n\nSection 23 title should be Emergent abilities, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the concept of emergent abilities in large language models, highlighting how these abilities arise, their relationship to model scaling laws, and examples of tasks where these abilities manifest.\n\nSection 24 title should be Interpretation, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the challenges of interpreting large language models and discuss the techniques being developed to improve their transparency and interpretability, including mechanistic interpretability and the use of sparse coding models.\n\nSection 25 title should be Studying a replacement model, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how transcoders are used to create replacement models for large language models and discuss the findings of a study that demonstrates their ability to plan ahead when writing a rhyming poem.\n\nSection 26 title should be Explainability, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the importance of explainability in large language models, highlighting techniques used to understand model predictions and their role in ensuring fair and accountable AI systems.\n\nSection 27 title should be Understanding and intelligence, and this section should contain approximately (600 words):\nIn this section, you should follow this prompt: Explore the debate on whether large language models (LLMs) possess understanding and intelligence, considering differing perspectives on their abilities in reasoning, prediction, and the implications of their generative processes.\n\nSection 28 title should be Evaluation, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the methods and criteria used to assess the performance and effectiveness of large language models, including challenges and considerations in evaluating their capabilities.\n\nSection 29 title should be Perplexity, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how perplexity serves as a key metric for evaluating the performance of large language models, including its calculation and the implications of using perplexity on test datasets.\n\nSection 30 title should be BPW, BPC, and BPT, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain the relationship between entropy and perplexity in language models and discuss how bits per word, bits per character, and bits per token are used to measure model efficiency, highlighting why cross-entropy is preferred for evaluating language models.\n\nSection 31 title should be Task-specific datasets and benchmarks, and this section should contain approximately (500 words):\nIn this section, you should follow this prompt: Discuss the various datasets and benchmarks used to evaluate large language models on specific tasks, highlighting their types, purposes, and the challenges they present.\n\nSection 32 title should be Adversarially constructed evaluations, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Discuss the challenges and strategies involved in creating evaluation benchmarks for large language models, focusing on adversarially constructed datasets designed to address specific weaknesses and prevent shortcut learning.\n\nSection 33 title should be Limitations of LLM benchmarks, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the challenges and implications of benchmark saturation for large language models and the necessity for developing more advanced and nuanced evaluation tasks to ensure continued progress.\n\nSection 34 title should be Wider impact, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the transformative impact of large language models on various industries, cultural evolution, and employment, highlighting their potential to blur the lines between human and machine-generated text and their economic implications.\n\nSection 35 title should be Memorization and copyright, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how memorization in large language models can lead to the verbatim output of training data and discuss the implications of this behavior on copyright concerns.\n\nSection 36 title should be Security, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Discuss the security concerns associated with large language models, including misinformation, misuse, sleeper agents, and challenges in implementing safety measures, along with specific examples of these issues in practice.\n\nSection 37 title should be Algorithmic bias, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the impact of algorithmic bias in large language models, focusing on how these biases can affect the representation and treatment of various demographics, and the implications of an English-dominated training dataset on non-English perspectives.\n\nSection 38 title should be Stereotyping, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss how large language models can perpetuate stereotypes, particularly gender bias, by producing outputs that reflect societal prejudices found in their training data.\n\nSection 39 title should be Selection bias, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how selection bias affects the reliability of large language models in multiple-choice settings and the role of token bias in this phenomenon.\n\nSection 40 title should be Political bias, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how large language models can exhibit political bias, the factors contributing to this bias, and the potential implications for users and society.\n\nSection 41 title should be Energy demands, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the growing energy demands of large language models, the environmental impact of their electricity consumption, and the potential energy solutions being explored by tech companies, including the roles of nuclear power, geothermal energy, and natural gas.\n\nSection 42 title should be See also, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the related concepts and tools associated with large language models, including foundation models, various types of language models, benchmarks, and chatbots, to provide a comprehensive understanding of the broader context in which these models operate.\n\nSection 43 title should be References, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the significance and purpose of the references section in a Wikipedia article about large language models, focusing on how it supports the credibility and reliability of the information presented.\n\nSection 44 title should be Further reading, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explore recent literature and research addressing the development, challenges, applications, and evaluation of large language models, as well as their alignment and safety concerns.\n\nTotal article length should be approximately 8200 words. Ensure smooth transitions between sections and maintain a coherent narrative throughout. Each section should flow naturally into the next, building a complete and informative Wikipedia article. Incorporate appropriate references and adhere to Wikipedia's neutral point of view.", "input": "", "output": "Introduction\nA large language model (LLM) is a type of machine learning model designed for natural language processing tasks such as language generation. LLMs are language models with many parameters, and are trained with self-supervised learning on a vast amount of text.\nThe largest and most capable LLMs are generative pretrained transformers (GPTs). Modern models can be fine-tuned for specific tasks or guided by prompt engineering. These models acquire predictive power regarding syntax, semantics, and ontologies inherent in human language corpora, but they also inherit inaccuracies and biases present in the data they are trained in.History\nBefore 2017, there were a few language models that were large as compared to capacities then available. In the 1990s, the IBM alignment models pioneered statistical language modelling. A smoothed n-gram model in 2001 trained on 0.3 billion words achieved state-of-the-art perplexity at the time. In the 2000s, as Internet use became prevalent, some researchers constructed Internet-scale language datasets (\"web as corpus\"), upon which they trained statistical language models. In 2009, in most language processing tasks, statistical language models dominated over symbolic language models because they can usefully ingest large datasets.\n\nAfter neural networks became dominant in image processing around 2012, they were applied to language modelling as well. Google converted its translation service to Neural Machine Translation in 2016. Because it preceded the existence of transformers, it was done by seq2seq deep LSTM networks.\nAt the 2017 NeurIPS conference, Google researchers introduced the transformer architecture in their landmark paper \"Attention Is All You Need\". This paper's goal was to improve upon 2014 seq2seq technology, and was based mainly on the attention mechanism developed by Bahdanau et al. in 2014. The following year in 2018, BERT was introduced and quickly became \"ubiquitous\". Though the original transformer has both encoder and decoder blocks, BERT is an encoder-only model. Academic and research usage of BERT began to decline in 2023, following rapid improvements in the abilities of decoder-only models (such as GPT) to solve tasks via prompting.\nAlthough decoder-only GPT-1 was introduced in 2018, it was GPT-2 in 2019 that caught widespread attention because OpenAI at first deemed it too powerful to release publicly, out of fear of malicious use. GPT-3 in 2020 went a step further and as of 2024 is available only via API with no offering of downloading the model to execute locally. But it was the 2022 consumer-facing browser-based ChatGPT that captured the imaginations of the general population and caused some media hype and online buzz. The 2023 GPT-4 was praised for its increased accuracy and as a \"holy grail\" for its multimodal capabilities. OpenAI did not reveal the high-level architecture and the number of parameters of GPT-4. The release of ChatGPT led to an uptick in LLM usage across several research subfields of computer science, including robotics, software engineering, and societal impact work. In 2024 OpenAI released the reasoning model OpenAI o1, which generates long chains of thought before returning a final answer.\nCompeting language models have for the most part been attempting to equal the GPT series, at least in terms of number of parameters.\nSince 2022, source-available models have been gaining popularity, especially at first with BLOOM and LLaMA, though both have restrictions on the field of use. Mistral AI's models Mistral 7B and Mixtral 8x7b have the more permissive Apache License. In January 2025, DeepSeek released DeepSeek R1, a 671-billion-parameter open-weight model that performs comparably to OpenAI o1 but at a much lower cost.\nSince 2023, many LLMs have been trained to be multimodal, having the ability to also process or generate other types of data, such as images or audio. These LLMs are also called large multimodal models (LMMs).\nAs of 2024, the largest and most capable models are all based on the transformer architecture. Some recent implementations are based on other architectures, such as recurrent neural network variants and Mamba (a state space model).Dataset preprocessing\nTokenization\nAs machine learning algorithms process numbers rather than text, the text must be converted to numbers. In the first step, a vocabulary is decided upon, then integer indices are arbitrarily but uniquely assigned to each vocabulary entry, and finally, an embedding is associated to the integer index. Algorithms include byte-pair encoding (BPE) and WordPiece. There are also special tokens serving as control characters, such as [MASK] for masked-out token (as used in BERT), and [UNK] (\"unknown\") for characters not appearing in the vocabulary. Also, some special symbols are used to denote special text formatting. For example, \"\u0120\" denotes a preceding whitespace in RoBERTa and GPT. \"##\" denotes continuation of a preceding word in BERT.\nFor example, the BPE tokenizer used by GPT-3 (Legacy) would split tokenizer: texts -> series of numerical \"tokens\" as\n\nTokenization also compresses the datasets. Because LLMs generally require input to be an array that is not jagged, the shorter texts must be \"padded\" until they match the length of the longest one. How many tokens are, on average, needed per word depends on the language of the dataset.BPE\nAs an example, consider a tokenizer based on byte-pair encoding. In the first step, all unique characters (including blanks and punctuation marks) are treated as an initial set of n-grams (i.e. initial set of uni-grams). Successively the most frequent pair of adjacent characters is merged into a bi-gram and all instances of the pair are replaced by it. All occurrences of adjacent pairs of (previously merged) n-grams that most frequently occur together are then again merged into even lengthier n-gram, until a vocabulary of prescribed size is obtained (in case of GPT-3, the size is 50257). After a tokenizer is trained, any text can be tokenized by it, as long as it does not contain characters not appearing in the initial-set of uni-grams.Problems\nA token vocabulary based on the frequencies extracted from mainly English corpora uses as few tokens as possible for an average English word. However, an average word in another language encoded by such an English-optimized tokenizer is split into a suboptimal amount of tokens. GPT-2 tokenizer can use up to 15 times more tokens per word for some languages, for example for the Shan language from Myanmar. Even more widespread languages such as Portuguese and German have \"a premium of 50%\" compared to English.\nGreedy tokenization also causes subtle problems with text completion.Dataset cleaning\nIn the context of training LLMs, datasets are typically cleaned by removing low-quality, duplicated, or toxic data. Cleaned datasets can increase training efficiency and lead to improved downstream performance. A trained LLM can be used to clean datasets for training a further LLM.\nWith the increasing proportion of LLM-generated content on the web, data cleaning in the future may include filtering out such content. LLM-generated content can pose a problem if the content is similar to human text (making filtering difficult) but of lower quality (degrading performance of models trained on it).Synthetic data\nTraining of largest language models might need more linguistic data than naturally available, or that the naturally occurring data is of insufficient quality. In these cases, synthetic data might be used. Microsoft's Phi series of LLMs is trained on textbook-like data generated by another LLM.Training and architecture\nReinforcement learning from human feedback\nReinforcement learning from human feedback (RLHF) through algorithms, such as proximal policy optimization, is used to further fine-tune a model based on a dataset of human preferences.Instruction tuning\nUsing \"self-instruct\" approaches, LLMs have been able to bootstrap correct responses, replacing any naive responses, starting from human-generated corrections of a few cases. For example, in the instruction \"Write an essay about the main themes represented in Hamlet,\" an initial naive completion might be \"If you submit the essay after March 17, your grade will be reduced by 10% for each day of delay,\" based on the frequency of this textual sequence in the corpus.Mixture of experts\nThe largest LLM may be too expensive to train and use directly. For such models, mixture of experts (MoE) can be applied, a line of research pursued by Google researchers since 2017 to train models reaching up to 1 trillion parameters.Prompt engineering, attention mechanism, and context window\nMost results previously achievable only by (costly) fine-tuning, can be achieved through prompt engineering, although limited to the scope of a single conversation (more precisely, limited to the scope of a context window).\n\nIn order to find out which tokens are relevant to each other within the scope of the context window, the attention mechanism calculates \"soft\" weights for each token, more precisely for its embedding, by using multiple attention heads, each with its own \"relevance\" for calculating its own soft weights. For example, the small (i.e. 117M parameter sized) GPT-2 model has had twelve attention heads and a context window of only 1k tokens. In its medium version it has 345M parameters and contains 24 layers, each with 12 attention heads. For the training with gradient descent a batch size of 512 was utilized.\nThe largest models, such as Google's Gemini 1.5, presented in February 2024, can have a context window sized up to 1 million (context window of 10 million was also \"successfully tested\"). Other models with large context windows includes Anthropic's Claude 2.1, with a context window of up to 200k tokens. Note that this maximum refers to the number of input tokens and that the maximum number of output tokens differs from the input and is often smaller. For example, the GPT-4 Turbo model has a maximum output of 4096 tokens.\nLength of a conversation that the model can take into account when generating its next answer is limited by the size of a context window, as well. If the length of a conversation, for example with ChatGPT, is longer than its context window, only the parts inside the context window are taken into account when generating the next answer, or the model needs to apply some algorithm to summarize the too distant parts of conversation.\nThe shortcomings of making a context window larger include higher computational cost and possibly diluting the focus on local context, while making it smaller can cause a model to miss an important long-range dependency. Balancing them is a matter of experimentation and domain-specific considerations.\nA model may be pre-trained either to predict how the segment continues, or what is missing in the segment, given a segment from its training dataset. It can be either\n\nautoregressive (i.e. predicting how the segment continues, as GPTs do): for example given a segment \"I like to eat\", the model predicts \"ice cream\", or \"sushi\".\n\"masked\" (i.e. filling in the parts missing from the segment, the way \"BERT\" does it): for example, given a segment \"I like to [__] [__] cream\", the model predicts that \"eat\" and \"ice\" are missing.\nModels may be trained on auxiliary tasks which test their understanding of the data distribution, such as Next Sentence Prediction (NSP), in which pairs of sentences are presented and the model must predict whether they appear consecutively in the training corpus. During training, regularization loss is also used to stabilize training. However regularization loss is usually not used during testing and evaluation.Infrastructure\nSubstantial infrastructure is necessary for training the largest models.Training cost\nThe qualifier \"large\" in \"large language model\" is inherently vague, as there is no definitive threshold for the number of parameters required to qualify as \"large\". As time goes on, what was previously considered \"large\" may evolve. GPT-1 of 2018 is usually considered the first LLM, even though it has only 0.117 billion parameters. The tendency towards larger models is visible in the list of large language models.\nAs technology advanced, large sums have been invested in increasingly large models. For example, training of the GPT-2 (i.e. a 1.5-billion-parameters model) in 2019 cost $50,000, while training of the PaLM (i.e. a 540-billion-parameters model) in 2022 cost $8 million, and Megatron-Turing NLG 530B (in 2021) cost around $11 million.\nFor Transformer-based LLM, training cost is much higher than inference cost. It costs 6 FLOPs per parameter to train on one token, whereas it costs 1 to 2 FLOPs per parameter to infer on one token.Tool use\nThere are certain tasks that, in principle, cannot be solved by any LLM, at least not without the use of external tools or additional software. An example of such a task is responding to the user's input '354 * 139 = ', provided that the LLM has not already encountered a continuation of this calculation in its training corpus. In such cases, the LLM needs to resort to running program code that calculates the result, which can then be included in its response.: Another example is \"What is the time now? It is \", where a separate program interpreter would need to execute a code to get system time on the computer, so that the LLM can include it in its reply. This basic strategy can be sophisticated with multiple attempts of generated programs, and other sampling strategies.\nGenerally, in order to get an LLM to use tools, one must fine-tune it for tool-use. If the number of tools is finite, then fine-tuning may be done just once. If the number of tools can grow arbitrarily, as with online API services, then the LLM can be fine-tuned to be able to read API documentation and call API correctly.\nRetrieval-augmented generation (RAG) is another approach that enhances LLMs by integrating them with document retrieval systems. Given a query, a document retriever is called to retrieve the most relevant documents. This is usually done by encoding the query and the documents into vectors, then finding the documents with vectors (usually stored in a vector database) most similar to the vector of the query. The LLM then generates an output based on both the query and context included from the retrieved documents.Agency\nAn LLM is typically not an autonomous agent by itself, as it lacks the ability to interact with dynamic environments, recall past behaviors, and plan future actions, but can be transformed into one by integrating modules like profiling, memory, planning, and action.\nThe ReAct pattern, a portmanteau of \"Reason + Act\", constructs an agent out of an LLM, using the LLM as a planner. The LLM is prompted to \"think out loud\". Specifically, the language model is prompted with a textual description of the environment, a goal, a list of possible actions, and a record of the actions and observations so far. It generates one or more thoughts before generating an action, which is then executed in the environment. The linguistic description of the environment given to the LLM planner can even be the LaTeX code of a paper describing the environment.\nIn the DEPS (\"Describe, Explain, Plan and Select\") method, an LLM is first connected to the visual world via image descriptions, then it is prompted to produce plans for complex tasks and behaviors based on its pretrained knowledge and environmental feedback it receives.\nThe Reflexion method constructs an agent that learns over multiple episodes. At the end of each episode, the LLM is given the record of the episode, and prompted to think up \"lessons learned\", which would help it perform better at a subsequent episode. These \"lessons learned\" are given to the agent in the subsequent episodes.\nMonte Carlo tree search can use an LLM as rollout heuristic. When a programmatic world model is not available, an LLM can also be prompted with a description of the environment to act as world model.\nFor open-ended exploration, an LLM can be used to score observations for their \"interestingness\", which can be used as a reward signal to guide a normal (non-LLM) reinforcement learning agent. Alternatively, it can propose increasingly difficult tasks for curriculum learning. Instead of outputting individual actions, an LLM planner can also construct \"skills\", or functions for complex action sequences. The skills can be stored and later invoked, allowing increasing levels of abstraction in planning.\nLLM-powered agents can keep a long-term memory of its previous contexts, and the memory can be retrieved in the same way as Retrieval Augmented Generation. Multiple such agents can interact socially.Compression\nTypically, LLMs are trained with single- or half-precision floating point numbers (float32 and float16). One float16 has 16 bits, or 2 bytes, and so one billion parameters require 2 gigabytes. The largest models typically have 100 billion parameters, requiring 200 gigabytes to load, which places them outside the range of most consumer electronics.\nPost-training quantization aims to decrease the space requirement by lowering precision of the parameters of a trained model, while preserving most of its performance. The simplest form of quantization simply truncates all numbers to a given number of bits. It can be improved by using a different quantization codebook per layer. Further improvement can be done by applying different precisions to different parameters, with higher precision for particularly important parameters (\"outlier weights\"). See the visual guide to quantization by Maarten Grootendorst for a visual depiction.\nWhile quantized models are typically frozen, and only pre-quantized models are fine-tuned, quantized models can still be fine-tuned.Multimodality\nMultimodality means \"having several modalities\", and a \"modality\" refers to a type of input or output, such as video, image, audio, text, proprioception, etc. There have been many AI models trained specifically to ingest one modality and output another modality, such as AlexNet for image to label, visual question answering for image-text to text, and speech recognition for speech to text.\nA common method to create multimodal models out of an LLM is to \"tokenize\" the output of a trained encoder. Concretely, one can construct an LLM that can understand images as follows: take a trained LLM, and take a trained image encoder \n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n  \n. Make a small multilayered perceptron \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n  \n, so that for any image \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  \n, the post-processed vector \n  \n    \n      \n        f\n        (\n        E\n        (\n        y\n        )\n        )\n      \n    \n    {\\displaystyle f(E(y))}\n  \n has the same dimensions as an encoded token. That is an \"image token\". Then, one can interleave text tokens and image tokens. The compound model is then fine-tuned on an image-text dataset. This basic construction can be applied with more sophistication to improve the model. The image encoder may be frozen to improve stability.\nFlamingo demonstrated the effectiveness of the tokenization method, finetuning a pair of pretrained language model and image encoder to perform better on visual question answering than models trained from scratch. Google PaLM model was fine-tuned into a multimodal model PaLM-E using the tokenization method, and applied to robotic control. LLaMA models have also been turned multimodal using the tokenization method, to allow image inputs, and video inputs.\nGPT-4 can use both text and image as inputs (although the vision component was not released to the public until GPT-4V); Google DeepMind's Gemini is also multimodal.  Mistral introduced its own multimodel Pixtral 12B model in September 2024.Reasoning\nIn late 2024, a new direction emerged in LLM development with models specifically designed for complex reasoning tasks. These \"reasoning models\" were trained to spend more time generating step-by-step solutions before providing final answers, similar to human problem-solving processes.\nOpenAI introduced this trend with their o1 model in September 2024, followed by o3 in December 2024. These models showed significant improvements in mathematics, science, and coding tasks compared to traditional LLMs. For example, on International Mathematics Olympiad qualifying exam problems, GPT-4o achieved 13% accuracy while o1 reached 83%.\nIn January 2025, the Chinese company DeepSeek released DeepSeek-R1, a 671-billion-parameter open-weight reasoning model that achieved comparable performance to OpenAI's o1 while being significantly more cost-effective to operate. Unlike proprietary models from OpenAI, DeepSeek-R1's open-weight nature allowed researchers to study and build upon the algorithm, though its training data remained private.\nThese reasoning models typically require more computational resources per query compared to traditional LLMs, as they perform more extensive processing to work through problems step-by-step. However, they have shown superior capabilities in domains requiring structured logical thinking, such as mathematics, scientific research, and computer programming.\nEfforts to reduce or compensate for hallucinations have employed automated reasoning, RAG (retrieval-augmented generation), fine-tuning, and other methods.Properties\nScaling laws\nThe performance of an LLM after pretraining largely depends on the:\n\ncost of pretraining \n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n (the total amount of compute used),\nsize of the artificial neural network itself, such as number of parameters \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n (i.e. amount of neurons in its layers, amount of weights between them and biases),\nsize of its pretraining dataset (i.e. number of tokens in corpus, \n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n  \n).\n\"Scaling laws\" are empirical statistical laws that predict LLM performance based on such factors. One particular scaling law (\"Chinchilla scaling\") for LLM autoregressively trained for one epoch, with a log-log learning rate schedule, states that:\n\n  \n    \n      \n        \n          \n            {\n            \n              \n                \n                  C\n                  =\n                  \n                    C\n                    \n                      0\n                    \n                  \n                  N\n                  D\n                \n              \n              \n                \n                  L\n                  =\n                  \n                    \n                      A\n                      \n                        N\n                        \n                          \u03b1\n                        \n                      \n                    \n                  \n                  +\n                  \n                    \n                      B\n                      \n                        D\n                        \n                          \u03b2\n                        \n                      \n                    \n                  \n                  +\n                  \n                    L\n                    \n                      0\n                    \n                  \n                \n              \n            \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{cases}C=C_{0}ND\\\\[6pt]L={\\frac {A}{N^{\\alpha }}}+{\\frac {B}{D^{\\beta }}}+L_{0}\\end{cases}}}\n  \n where the variables are\n\n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  \n is the cost of training the model, in FLOPs.\n\n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is the number of parameters in the model.\n\n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n  \n is the number of tokens in the training set.\n\n  \n    \n      \n        L\n      \n    \n    {\\displaystyle L}\n  \n is the average negative log-likelihood loss per token (nats/token), achieved by the trained LLM on the test dataset.\nand the statistical hyper-parameters are\n\n  \n    \n      \n        \n          C\n          \n            0\n          \n        \n        =\n        6\n      \n    \n    {\\displaystyle C_{0}=6}\n  \n, meaning that it costs 6 FLOPs per parameter to train on one token. Note that training cost is much higher than inference cost, where it costs 1 to 2 FLOPs per parameter to infer on one token.\n\n  \n    \n      \n        \u03b1\n        =\n        0.34\n        ,\n        \u03b2\n        =\n        0.28\n        ,\n        A\n        =\n        406.4\n        ,\n        B\n        =\n        410.7\n        ,\n        \n          L\n          \n            0\n          \n        \n        =\n        1.69\n      \n    \n    {\\displaystyle \\alpha =0.34,\\beta =0.28,A=406.4,B=410.7,L_{0}=1.69}Emergent abilities\nPerformance of bigger models on various tasks, when plotted on a log-log scale, appears as a linear extrapolation of performance achieved by smaller models. However, this linearity may be punctuated by \"break(s)\" in the scaling law, where the slope of the line changes abruptly, and where larger models acquire \"emergent abilities\". They arise from the complex interaction of the model's components and are not explicitly programmed or designed. \nFurthermore, recent research has demonstrated that AI systems, including large language models, can employ heuristic reasoning akin to human cognition. They balance between exhaustive logical processing and the use of cognitive shortcuts (heuristics), adapting their reasoning strategies to optimize between accuracy and effort. This behavior aligns with principles of resource-rational human cognition, as discussed in classical theories of bounded rationality and dual-process theory.\nOne of the emergent abilities is in-context learning from example demonstrations. In-context learning is involved in tasks, such as:\n\nreported arithmetics\ndecoding the International Phonetic Alphabet\nunscrambling a word's letters\ndisambiguating word-in-context datasets\nconverting spatial words\ncardinal directions (for example, replying \"northeast\" in response to a 3x3 grid of 8 zeros and a 1 in the top-right), color terms represented in text.\nchain-of-thought prompting: In a 2022 research paper, chain-of-thought prompting only improved the performance for models that had at least 62B. Smaller models perform better when prompted to answer immediately, without chain of thought.\nidentifying offensive content in paragraphs of Hinglish (a combination of Hindi and English), and generating a similar English equivalent of Kiswahili proverbs.\nSchaeffer et. al. argue that the emergent abilities are not unpredictably acquired, but predictably acquired according to a smooth scaling law. The authors considered a toy statistical model of an LLM solving multiple-choice questions, and showed that this statistical model, modified to account for other types of tasks, applies to these tasks as well.\nLet \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  \n be the number of parameter count, and \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  \n be the performance of the model.Interpretation\nLarge language models by themselves are black boxes, and it is not clear how they can perform linguistic tasks. Similarly, it is unclear if or how LLMs should be viewed as models of the human brain and/or human mind.\nVarious techniques have been developed to enhance the transparency and interpretability of LLMs. Mechanistic interpretability aims to reverse-engineer LLMs by discovering symbolic algorithms that approximate the inference performed by an LLM. In recent years, sparse coding models such as sparse autoencoders, transcoders, and crosscoders have emerged as promising tools for identifying interpretable features.Studying a replacement model\nTranscoders, which are more interpretable than transformers, have been utilized to develop \u201creplacement models.\u201d In one such study involving the mechanistic interpretation of writing a rhyming poem by an LLM, it was shown that although they are believed to simply predict the next token, they can, in fact, plan ahead.Explainability\nA related concept is AI explainability, which focuses on understanding how an AI model arrives at a given result. Techniques such as partial dependency plots, SHAP (SHapley Additive exPlanations), and feature importance assessments allow researchers to visualize and understand the contributions of various input features to the model's predictions. These methods help ensure that AI models make decisions based on relevant and fair criteria, enhancing trust and accountability.\nBy integrating these techniques, researchers and practitioners can gain deeper insights into the operations of LLMs, fostering trust and facilitating the responsible deployment of these powerful models.\nIn another example, the authors trained small transformers on modular arithmetic addition. The resulting models were reverse-engineered, and it turned out they used discrete Fourier transform.Understanding and intelligence\nNLP researchers were evenly split when asked, in a 2022 survey, whether (untuned) LLMs \"could (ever) understand natural language in some nontrivial sense\". Proponents of \"LLM understanding\" believe that some LLM abilities, such as mathematical reasoning, imply an ability to \"understand\" certain concepts. A Microsoft team argued in 2023 that GPT-4 \"can solve novel and difficult tasks that span mathematics, coding, vision, medicine, law, psychology and more\" and that GPT-4 \"could reasonably be viewed as an early (yet still incomplete) version of an artificial general intelligence system\": \"Can one reasonably say that a system that passes exams for software engineering candidates is not really intelligent?\" Ilya Sutskever argues that predicting the next word sometimes involves reasoning and deep insights, for example if the LLM has to predict the name of the criminal in an unknown detective novel after processing the entire story leading up to the revelation. Some researchers characterize LLMs as \"alien intelligence\". For example, Conjecture CEO Connor Leahy considers untuned LLMs to be like inscrutable alien \"Shoggoths\", and believes that RLHF tuning creates a \"smiling facade\" obscuring the inner workings of the LLM: \"If you don't push it too far, the smiley face stays on. But then you give it [an unexpected] prompt, and suddenly you see this massive underbelly of insanity, of weird thought processes and clearly non-human understanding.\"\nIn contrast, some skeptics of LLM understanding believe that existing LLMs are \"simply remixing and recombining existing writing\", a phenomenon known as stochastic parrot, or they point to the deficits existing LLMs continue to have in prediction skills, reasoning skills, agency, and explainability. For example, GPT-4 has natural deficits in planning and in real-time learning. Generative LLMs have been observed to confidently assert claims of fact which do not seem to be justified by their training data, a phenomenon which has been termed \"hallucination\". Specifically, hallucinations in the context of LLMs correspond to the generation of text or responses that seem syntactically sound, fluent, and natural but are factually incorrect, nonsensical, or unfaithful to the provided source input. Neuroscientist Terrence Sejnowski has argued that \"The diverging opinions of experts on the intelligence of LLMs suggests that our old ideas based on natural intelligence are inadequate\".\nThe matter of LLM's exhibiting intelligence or understanding has two main aspects \u2013 the first is how to model thought and language in a computer system, and the second is how to enable the computer system to generate human like language. These aspects of language as a model of cognition have been developed in the field of cognitive linguistics. American linguist George Lakoff presented Neural Theory of Language (NTL) as a computational basis for using language as a model of learning tasks and understanding. The NTL Model outlines how specific neural structures of the human brain shape the nature of thought and language and in turn what are the computational properties of such neural systems that can be applied to model thought and language in a computer system. After a framework for modeling language in a computer systems was established, the focus shifted to establishing frameworks for computer systems to generate language with acceptable grammar. In his 2014 book titled The Language Myth: Why Language Is Not An Instinct, British cognitive linguist and digital communication technologist Vyvyan Evans mapped out the role of probabilistic context-free grammar (PCFG) in enabling NLP to model cognitive patterns and generate human like language.Evaluation\nPerplexity\nThe canonical measure of the performance of an LLM is its perplexity on a given text corpus. Perplexity measures how well a model predicts the contents of a dataset; the higher the likelihood the model assigns to the dataset, the lower the perplexity. In mathematical terms, perplexity is the exponential of the average negative log likelihood per token.\n\n  \n    \n      \n        log\n        \u2061\n        (\n        \n          Perplexity\n        \n        )\n        =\n        \u2212\n        \n          \n            1\n            N\n          \n        \n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            N\n          \n        \n        log\n        \u2061\n        (\n        Pr\n        (\n        \n          \n            token\n          \n          \n            i\n          \n        \n        \u2223\n        \n          \n            context for token\n          \n          \n            i\n          \n        \n        )\n        )\n      \n    \n    {\\displaystyle \\log({\\text{Perplexity}})=-{\\frac {1}{N}}\\sum _{i=1}^{N}\\log(\\Pr({\\text{token}}_{i}\\mid {\\text{context for token}}_{i}))}\n  \n\nHere, \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is the number of tokens in the text corpus, and \"context for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n\" depends on the specific type of LLM. If the LLM is autoregressive, then \"context for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n\" is the segment of text appearing before token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n. If the LLM is masked, then \"context for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n\" is the segment of text surrounding token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n.\nBecause language models may overfit to training data, models are usually evaluated by their perplexity on a test set. This evaluation is potentially problematic for larger models which, as they are trained on increasingly large corpora of text, are increasingly likely to inadvertently include portions of any given test set.BPW, BPC, and BPT\nIn information theory, the concept of entropy is intricately linked to perplexity, a relationship notably established by Claude Shannon. This relationship is mathematically expressed as \n  \n    \n      \n        \n          Entropy\n        \n        =\n        \n          log\n          \n            2\n          \n        \n        \u2061\n        (\n        \n          Perplexity\n        \n        )\n      \n    \n    {\\displaystyle {\\text{Entropy}}=\\log _{2}({\\text{Perplexity}})}\n  \n.\nEntropy, in this context, is commonly quantified in terms of bits per word (BPW) or bits per character (BPC), which hinges on whether the language model utilizes word-based or character-based tokenization.\nNotably, in the case of larger language models that predominantly employ sub-word tokenization, bits per token (BPT) emerges as a seemingly more appropriate measure. However, due to the variance in tokenization methods across different Large Language Models (LLMs), BPT does not serve as a reliable metric for comparative analysis among diverse models. To convert BPT into BPW, one can multiply it by the average number of tokens per word.\nIn the evaluation and comparison of language models, cross-entropy is generally the preferred metric over entropy. The underlying principle is that a lower BPW is indicative of a model's enhanced capability for compression. This, in turn, reflects the model's proficiency in making accurate predictions.Task-specific datasets and benchmarks\nA large number of testing datasets and benchmarks have also been developed to evaluate the capabilities of language models on more specific downstream tasks. Tests may be designed to evaluate a variety of capabilities, including general knowledge, bias, commonsense reasoning, and mathematical problem-solving.\nOne broad category of evaluation dataset is question answering datasets, consisting of pairs of questions and correct answers, for example, (\"Have the San Jose Sharks won the Stanley Cup?\", \"No\"). A question answering task is considered \"open book\" if the model's prompt includes text from which the expected answer can be derived (for example, the previous question could be adjoined with some text which includes the sentence \"The Sharks have advanced to the Stanley Cup finals once, losing to the Pittsburgh Penguins in 2016.\"). Otherwise, the task is considered \"closed book\", and the model must draw on knowledge retained during training. Some examples of commonly used question answering datasets include TruthfulQA, Web Questions, TriviaQA, and SQuAD.\nEvaluation datasets may also take the form of text completion, having the model select the most likely word or sentence to complete a prompt, for example: \"Alice was friends with Bob. Alice went to visit her friend, ____\".\nSome composite benchmarks have also been developed which combine a diversity of different evaluation datasets and tasks. Examples include GLUE, SuperGLUE, MMLU, BIG-bench, HELM, and HLE (Humanity's Last Exam). OpenAI has released tools for running composite benchmarks, but noted that the eval results are sensitive to the prompting method. Some public datasets contain questions that are mislabeled, ambiguous, unanswerable, or otherwise of low-quality, which can be cleaned to give more reliable benchmark scores.\nBias in LLMs may be measured through benchmarks such as CrowS-Pairs (Crowdsourced Stereotype Pairs), Stereo Set, and the more recent Parity Benchmark.  Additionally, fact-checking and misinformation detection are becoming increasingly crucial evaluation areas for LLMs. A recent study by Caramancion (2023) compared the fact-checking accuracy of prominent LLMs\u2014including OpenAI\u2019s ChatGPT 3.5 and 4.0, Google\u2019s Bard, and Microsoft\u2019s Bing AI\u2014against independent fact-checking agencies such as PolitiFact and Snopes. The results demonstrated a moderate proficiency in fact verification, with GPT-4 achieving the highest accuracy at 71%, but still lagging behind human fact-checkers in contextual comprehension and nuanced reasoning. This underscores the evolving but incomplete ability of LLMs to discern fact from deception, highlighting the need for continued advancements in AI-driven fact-checking methodologies.\nIt was previously standard to report results on a heldout portion of an evaluation dataset after doing supervised fine-tuning on the remainder. It is now more common to evaluate a pre-trained model directly through prompting techniques, though researchers vary in the details of how they formulate prompts for particular tasks, particularly with respect to how many examples of solved tasks are adjoined to the prompt (i.e. the value of n in n-shot prompting).Adversarially constructed evaluations\nBecause of the rapid pace of improvement of large language models, evaluation benchmarks have suffered from short lifespans, with state of the art models quickly \"saturating\" existing benchmarks, exceeding the performance of human annotators, leading to efforts to replace or augment the benchmark with more challenging tasks. In addition, there are cases of \"shortcut learning\" wherein AIs sometimes \"cheat\" on multiple-choice tests by using statistical correlations in superficial test question wording in order to guess the correct responses, without necessarily understanding the actual question being asked.\nSome datasets have been constructed adversarially, focusing on particular problems on which extant language models seem to have unusually poor performance compared to humans. One example is the TruthfulQA dataset, a question answering dataset consisting of 817 questions which language models are susceptible to answering incorrectly by mimicking falsehoods to which they were repeatedly exposed during training. For example, an LLM may answer \"No\" to the question \"Can you teach an old dog new tricks?\" because of its exposure to the English idiom you can't teach an old dog new tricks, even though this is not literally true.\nAnother example of an adversarial evaluation dataset is Swag and its successor, HellaSwag, collections of problems in which one of multiple options must be selected to complete a text passage. The incorrect completions were generated by sampling from a language model and filtering with a set of classifiers. The resulting problems are trivial for humans but at the time the datasets were created state of the art language models had poor accuracy on them. For example:\n\nWe see a fitness center sign. We then see a man talking to the camera and sitting and laying on a exercise ball. The man...\na) demonstrates how to increase efficient exercise work by running up and down balls.\nb) moves all his arms and legs and builds up a lot of muscle.\nc) then plays the ball and we see a graphics and hedge trimming demonstration.\nd) performs sit ups while on the ball and talking.\n\nBERT selects b) as the most likely completion, though the correct answer is d).Limitations of LLM benchmarks\nBenchmarks can become outdated rapidly. Once a model attains near-perfect scores on a given benchmark, that benchmark ceases to serve as a meaningful indicator of progress. This phenomenon, known as \"benchmark saturation,\" necessitates the development of more challenging and nuanced tasks to continue advancing LLM capabilities. For instance, traditional benchmarks like HellaSwag and MMLU have seen models achieving high accuracy already.Wider impact\nIn 2023, Nature Biomedical Engineering wrote that \"it is no longer possible to accurately distinguish\" human-written text from text created by large language models, and that \"It is all but certain that general-purpose large language models will rapidly proliferate... It is a rather safe bet that they will change many industries over time.\" Goldman Sachs suggested in 2023 that generative language AI could increase global GDP by 7% in the next ten years, and could expose to automation 300 million jobs globally. Brinkmann et al. (2023) also argue that LLMs are transforming processes of cultural evolution by shaping processes of variation, transmission, and selection.Memorization and copyright\nMemorization is an emergent behavior in LLMs in which long strings of text are occasionally output verbatim from training data, contrary to typical behavior of traditional artificial neural nets. Evaluations of controlled LLM output measure the amount memorized from training data (focused on GPT-2-series models) as variously over 1% for exact duplicates or up to about 7%.\nA 2023 study showed that when ChatGPT 3.5 turbo was prompted to repeat the same word indefinitely, after a few hundreds of repetitions, it would start outputting excerpts from its training data.Security\nSome commenters expressed concern over accidental or deliberate creation of misinformation, or other forms of misuse. For example, the availability of large language models could reduce the skill-level required to commit bioterrorism; biosecurity researcher Kevin Esvelt has suggested that LLM creators should exclude from their training data papers on creating or enhancing pathogens.\nThe potential presence of \"sleeper agents\" within LLMs is another emerging security concern. These are hidden functionalities built into the model that remain dormant until triggered by a specific event or condition. Upon activation, the LLM deviates from its expected behavior to make insecure actions.\nLLM applications accessible to the public, like ChatGPT or Claude, typically incorporate safety measures designed to filter out harmful content. However, implementing these controls effectively has proven challenging. For instance, a 2023 study proposed a method for circumventing LLM safety systems. In 2025, The American Sunlight Project, a non-profit, published a study showing evidence that the so-called Pravda network, a pro-Russia propaganda aggregator, was strategically placing web content through mass publication and duplication with the intention of biasing LLM outputs. The American Sunlight Project coined this technique \"LLM grooming,\" and pointed to it as a new tool of weaponizing AI to spread disinformation and harmful content. Similarly, Yongge Wang illustrated in 2024 how a potential criminal could potentially bypass ChatGPT 4o's safety controls to obtain information on establishing a drug trafficking operation.Algorithmic bias\nWhile LLMs have shown remarkable capabilities in generating human-like text, they are susceptible to inheriting and amplifying biases present in their training data. This can manifest in skewed representations or unfair treatment of different demographics, such as those based on race, gender, language, and cultural groups. Since English data is overrepresented in current large language models' training data, it may also downplay non-English views.Stereotyping\nAI models can reinforce a wide range of stereotypes, including those based on gender, ethnicity, age, nationality, religion, or occupation. This can lead to outputs that homogenize, or unfairly generalize or caricature groups of people, sometimes in harmful or derogatory ways.\nNotably, gender bias refers to the tendency of these models to produce outputs that are unfairly prejudiced towards one gender over another. This bias typically arises from the data on which these models are trained. Large language models often assign roles and characteristics based on traditional gender norms. For example, it might associate nurses or secretaries predominantly with women and engineers or CEOs with men.Selection bias\nSelection bias refers the inherent tendency of large language models to favor certain option identifiers irrespective of the actual content of the options. This bias primarily stems from token bias\u2014that is, the model assigns a higher a priori probability to specific answer tokens (such as \u201cA\u201d) when generating responses. As a result, when the ordering of options is altered (for example, by systematically moving the correct answer to different positions), the model\u2019s performance can fluctuate significantly. This phenomenon undermines the reliability of large language models in multiple-choice settings.Political bias\nPolitical bias refers to the tendency of algorithms to systematically favor certain political viewpoints, ideologies, or outcomes over others. Language models may also exhibit political biases. Since the training data includes a wide range of political opinions and coverage, the models might generate responses that lean towards particular political ideologies or viewpoints, depending on the prevalence of those views in the data.Energy demands\nThe energy demands of LLMs have grown along with their size and capabilities. Data centers that enable LLM training require substantial amounts of electricity. Much of that electricity is generated by non-renewable resources that create greenhouse gases and contribute to climate change. Nuclear power and geothermal energy are two options tech companies are exploring to meet the sizable energy demands of LLM training. The significant expense of investing in geothermal solutions has led to major shale producers like Chevron and Exxon Mobil advocating for tech companies to use electricity produced via natural gas to fuel their large energy demands.See also\nFoundation models\nList of large language models\nList of chatbots\nLanguage model benchmark\nSmall language modelReferences\nFurther reading\nJurafsky, Dan, Martin, James. H. Speech and Language Processing: An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition, 3rd Edition draft, 2023.\nZhao, Wayne Xin; et al. (2023). \"A Survey of Large Language Models\". arXiv:2303.18223 [cs.CL].\nKaddour, Jean; et al. (2023). \"Challenges and Applications of Large Language Models\". arXiv:2307.10169 [cs.CL].\nYin, Shukang; Fu, Chaoyou; Zhao, Sirui; Li, Ke; Sun, Xing; Xu, Tong; Chen, Enhong (2024). \"A Survey on Multimodal Large Language Models\". National Science Review. 11 (12): nwae403. arXiv:2306.13549. doi:10.1093/nsr/nwae403. PMC 11645129. PMID 39679213.\n\"AI Index Report 2024 \u2013 Artificial Intelligence Index\". aiindex.stanford.edu. Retrieved 2024-05-05.\nFrank, Michael C. (27 June 2023). \"Baby steps in evaluating the capacities of large language models\". Nature Reviews Psychology. 2 (8): 451\u2013452. doi:10.1038/s44159-023-00211-x. ISSN 2731-0574. S2CID 259713140. Retrieved 2 July 2023.\nAnwar, U.; Saparov, A.; Rando, J.; Paleka, D.; Turpin, M.; Hase, P.; Lubana, E. S.; Jenner, E.; Casper, S.; Sourbut, O.; Edelman, B. L.; Zhang, Z.; G\u00fcnther, M.; Korinek, A.; Hernandez-Orallo, J.; Hammond, L.; Bigelow, E.; Pan, A.; Langosco, L.; Krueger, D. (2024). \"Foundational Challenges in Assuring Alignment and Safety of Large Language Models\". arXiv:2404.09932.", "result": "### Introduction\n\nLarge language models (LLMs) are sophisticated artificial intelligence systems capable of understanding and generating human-like text. They are trained on vast amounts of text data, enabling them to perform a wide range of natural language processing (NLP) tasks. These models leverage complex neural network architectures, such as transformers, to process and generate text. Their training involves extensive computational resources and requires careful dataset preprocessing, tokenization, and cleaning. Despite their impressive capabilities, LLMs also face several limitations, including challenges in handling non-English languages and the need for continuous improvement through techniques like reinforcement learning from human feedback. This article provides an in-depth exploration of the key characteristics, applications, and limitations of large language models.\n\n### History\n\nThe development of large language models has been a journey marked by significant milestones and innovations. Early NLP systems relied on statistical approaches, which were limited in their ability to capture the complexities of human language. The advent of neural networks in the late 1980s and early 1990s laid the groundwork for more advanced models. However, it was not until the introduction of deep learning and the transformer architecture in 2017 with the release of BERT (Bidirectional Encoder Representations from Transformers) that LLMs began to demonstrate remarkable performance in various NLP tasks.\n\nThe GPT (Generative Pre-trained Transformer) series, launched by OpenAI in 2018, further revolutionized the field by demonstrating state-of-the-art results on a variety of benchmarks. The GPT-3, released in 2020, was a landmark achievement, with a massive 175 billion parameters, significantly outperforming previous models. Subsequent iterations, such as the GPT-4, continued to push the boundaries of what is possible with large language models.\n\nAnother notable milestone was the emergence of multimodal capabilities, allowing LLMs to process and generate text alongside other modalities like images and videos. For instance, models like DALL-E and Midjourney have demonstrated the ability to generate images based on textual descriptions. These advancements have not only expanded the scope of LLMs but also raised important ethical and practical considerations.\n\n### Dataset Preprocessing\n\nDataset preprocessing is a critical step in preparing data for training large language models. It involves several key techniques aimed at ensuring the quality and relevance of the input data. The primary goal is to clean and transform raw text into a format suitable for training. This includes removing irrelevant or redundant information, handling missing values, and normalizing text formats. Proper preprocessing helps mitigate issues like bias and ensures that the model learns meaningful patterns from the data.\n\n### Tokenization\n\nTokenization is the process of converting text into discrete units called tokens. In large language models, text is typically tokenized into subword units, which can be individual characters, words, or combinations thereof. The choice of tokenization method can significantly impact the model's performance and efficiency. For example, byte-pair encoding (BPE) is a popular technique that merges common character sequences to create a fixed-size vocabulary, reducing the complexity of the model while preserving semantic information.\n\n### BPE\n\nByte-Pair Encoding (BPE) is a method used in tokenizing text for large language models. It works by iteratively merging the most frequent character pairs into new tokens until a desired vocabulary size is reached. BPE allows for a flexible and dynamic vocabulary, making it particularly useful for handling rare or infrequent words. By merging characters and n-grams, BPE creates a compact and efficient representation of text, which is crucial for the scalability of large language models.\n\n### Problems\n\nOne of the main challenges faced by large language models when tokenizing non-English languages is the reliance on an English-optimized token vocabulary. This can lead to difficulties in accurately representing and processing text in languages with different orthographies and grammatical structures. For example, languages with complex scripts or agglutinative morphologies may require specialized tokenization techniques to achieve optimal performance.\n\n### Dataset Cleaning\n\nDataset cleaning is essential for ensuring the quality and relevance of data used to train large language models. It involves identifying and removing noisy, irrelevant, or duplicate data points. Challenges posed by LLM-generated content on the web include the proliferation of low-quality or misleading information. Effective cleaning strategies help mitigate these issues and ensure that the model learns from high-quality data.\n\n### Synthetic Data\n\nSynthetic data plays a crucial role in training large language models, especially when natural data is insufficient or unavailable. Techniques like generative adversarial networks (GANs) and variational autoencoders (VAEs) can produce realistic and diverse synthetic data that mimics real-world distributions. This approach helps address the limitations of naturally available linguistic data and enhances the robustness and generalizability of the models.\n\n### Training and Architecture\n\nTraining large language models involves several key processes, including data preparation, model architecture design, and optimization techniques. Modern LLMs often employ transformer architectures, which consist of multiple layers of self-attention mechanisms and feedforward neural networks. These architectures enable the model to capture long-range dependencies and handle large volumes of data efficiently.\n\n### Reinforcement Learning from Human Feedback\n\nReinforcement learning from human feedback (RLHF) is a technique used to refine large language models based on human preferences. It involves training the model using a combination of supervised learning and reinforcement learning, where the model is rewarded for producing outputs that align with human preferences. Algorithms like proximal policy optimization (PPO) play a crucial role in optimizing the model's performance during this process.\n\n### Instruction Tuning\n\nInstruction tuning, also known as self-instruct, enables large language models to improve their responses by learning from human-generated corrections. This approach involves fine-tuning the model on a dataset of instructions and corresponding corrections, allowing the model to better understand and generate accurate and relevant responses.\n\n### Mixture of Experts\n\nMixture of experts (MoE) techniques are used to manage the training and operational costs of large language models. By dividing the model into smaller, specialized components, MoE allows for more efficient resource utilization. This approach has been particularly effective for models with up to 1 trillion parameters, as demonstrated by Google\u2019s research since 2017.\n\n### Prompt Engineering, Attention Mechanism, and Context Window\n\nPrompt engineering, the attention mechanism, and context window size are critical factors that impact the performance and limitations of large language models. Prompt engineering involves crafting input prompts to guide the model's response, while the attention mechanism allows the model to focus on relevant parts of the input sequence. The context window size determines the amount of historical context the model can consider, affecting its ability to generate coherent and relevant text.\n\n### Infrastructure\n\nTraining the largest language models requires substantial computational resources, including powerful GPUs, distributed computing frameworks, and large-scale data storage capabilities. These models demand significant energy consumption, making it essential to consider the environmental impact of their operation. Efficient infrastructure design is crucial for managing these demands effectively.\n\n### Training Cost\n\nThe costs associated with training large language models have evolved significantly over time. As model sizes increase, so do the computational and financial resources required. Specific examples, such as the training of the 175 billion-parameter GPT-3, highlight the scale and investment needed. The computational requirements for training versus inference differ, with training being more resource-intensive.\n\n### Tool Use\n\nLarge language models can be enhanced by integrating external tools, such as program execution and API integration. Retrieval-augmented generation (RAG) is a technique that combines external knowledge sources with the model's internal knowledge to improve its performance. These tools help the model handle tasks beyond its inherent capabilities, enhancing its overall utility.\n\n### Agency\n\nIntegrating additional modules allows large language models to function as autonomous agents. Methods like ReAct, DEPS, and Reflexion enable the model to engage in planning, learning, and interacting with environments. These capabilities expand the model's potential applications, from automated writing assistants to complex decision-making systems.\n\n### Compression\n\nPost-training quantization is a technique used to reduce the space requirements of large language models by adjusting parameter precision. Layer-specific codebooks and handling outlier weights are key strategies in this process. This compression helps manage the model's size without compromising performance, making it more deployable on resource-constrained devices.\n\n### Multimodality\n\nMultimodality in large language models involves integrating different types of inputs and outputs, such as text, images, and audio. Specific examples, like the multimodal model CLIP, demonstrate the potential of these models in handling complex, multi-modal tasks. Multimodal models can offer richer and more versatile interactions, expanding their applications across various domains.\n\n### Reasoning\n\nReasoning models are designed to handle complex reasoning tasks, improving the performance of large language models. Open-weight models like DeepSeek-R1 showcase the benefits of these models in tasks requiring deeper understanding and logical reasoning. The introduction of reasoning models represents a significant advancement in the capabilities of LLMs.\n\n### Properties\n\nLarge language models possess several key characteristics and capabilities. They can understand and generate human-like text, learn from vast amounts of data, and adapt to various linguistic tasks. These models are highly scalable and can be fine-tuned for specific applications, making them versatile tools in the field of NLP.\n\n### Scaling Laws\n\nScaling laws, particularly the \"Chinchilla scaling,\" predict the performance of large language models based on factors like compute cost, model size, and dataset size. Variables such as the number of parameters, training duration, and dataset size are crucial in determining the model's performance. Statistical hyper-parameters, including learning rates and batch sizes, also play a significant role.\n\n### Emergent Abilities\n\nEmergent abilities in large language models arise as the models scale in size and complexity. These abilities include the ability to solve complex problems, generate creative content, and perform tasks that go beyond their initial training. Examples of emergent abilities include the capability to write poetry or compose music, showcasing the potential of these models to perform a wide range of tasks.\n\n### Interpretation\n\nInterpreting large language models remains challenging due to their complex and opaque nature. Techniques like mechanistic interpretability and the use of sparse coding models are being developed to improve transparency and explainability. These methods help users understand how the model makes decisions and predictions, enhancing trust and accountability.\n\n### Studying a Replacement Model\n\nTranscoders are used to create replacement models for large language models. A study demonstrating the ability of transcoders to plan ahead when writing a rhyming poem highlights their potential to improve model performance. This approach offers a promising avenue for advancing the capabilities of existing models.\n\n### Explainability\n\nExplainability is crucial for ensuring that large language models are fair and accountable. Techniques used to understand model predictions include attention maps, saliency analysis, and gradient-based methods. These methods help identify the factors influencing the model's decisions, making it easier to ensure that the model behaves ethically and transparently.\n\n### Understanding and Intelligence\n\nThe debate on whether large language models possess understanding and intelligence is ongoing. While these models can perform remarkably well on many tasks, their ability to reason and predict in complex scenarios remains a subject of discussion. The generative nature of LLMs raises questions about their true understanding of the underlying concepts.\n\n### Evaluation\n\nEvaluating the performance and effectiveness of large language models involves using various methods and criteria. Common metrics include perplexity, bits per word, and task-specific benchmarks. Challenges in evaluation include addressing biases and ensuring that the model performs consistently across different scenarios.\n\n### Perplexity\n\nPerplexity is a key metric for evaluating the performance of large language models. It measures how well a model predicts a given text by calculating the average log probability of the test set. Lower perplexity indicates better performance. The use of perplexity on test datasets helps in assessing the model's ability to generalize and handle unseen data.\n\n### BPW, BPC, and BPT\n\nBits per word (BPW), bits per character (BPC), and bits per token (BPT) are used to measure the efficiency of language models. Cross-entropy is preferred for evaluating language models because it directly measures the model's ability to predict the next word in a sequence. These metrics help in understanding the trade-offs between model complexity and performance.\n\n### Task-Specific Datasets and Benchmarks\n\nTask-specific datasets and benchmarks are used to evaluate large language models on specific tasks. These datasets vary widely in terms of their purpose and the challenges they present. Common benchmarks include GLUE, SuperGLUE, and MMLU, which cover a range of NLP tasks from sentiment analysis to commonsense reasoning.\n\n### Adversarially Constructed Evaluations\n\nAdversarially constructed evaluations involve creating datasets designed to address specific weaknesses and prevent shortcut learning. These evaluations are crucial for ensuring that models perform well in real-world scenarios and are not just memorizing training data.\n\n### Limitations of LLM Benchmarks\n\nBenchmark saturation presents challenges for large language models. Over-reliance on existing benchmarks can lead to a narrow focus on certain aspects of performance, potentially overlooking other important factors. Developing more advanced and nuanced evaluation tasks is essential for continued progress in the field.\n\n### Wider Impact\n\nLarge language models have a transformative impact on various industries, cultural evolution, and employment. They blur the lines between human and machine-generated text, offering both opportunities and challenges. Economic implications include increased automation and new job roles in the AI sector.\n\n### Memorization and Copyright\n\nMemorization in large language models can lead to the verbatim output of training data, raising copyright concerns. Ensuring that models respect intellectual property rights is crucial, especially when dealing with copyrighted material.\n\n### Security\n\nSecurity concerns associated with large language models include misinformation, misuse, and the risk of sleeper agents. Implementing safety measures, such as content filters and ethical guidelines, is essential to mitigate these risks.\n\n### Algorithmic Bias\n\nAlgorithmic bias in large language models can affect the representation and treatment of various demographics. An English-dominated training dataset can lead to biased outcomes, particularly for non-English speakers. Addressing these biases is crucial for ensuring fairness and inclusivity.\n\n### Stereotyping\n\nLarge language models can perpetuate stereotypes, particularly gender bias, by producing outputs that reflect societal prejudices found in their training data. Identifying and mitigating these biases is essential for promoting a more equitable society.\n\n### Selection Bias\n\nSelection bias affects the reliability of large language models in multiple-choice settings. Token bias, where certain tokens are favored over others, can lead to skewed results. Understanding and addressing these biases is crucial for improving the model's accuracy and fairness.\n\n### Political Bias\n\nPolitical bias in large language models can influence user perceptions and societal views. Factors contributing to this bias include the political leanings of the training data and the model's design. Addressing political bias is important for maintaining objectivity and avoiding undue influence.\n\n### Energy Demands\n\nThe growing energy demands of large language models pose significant environmental challenges. Tech companies are exploring various solutions, including the use of nuclear power, geothermal energy, and natural gas, to reduce the carbon footprint of these models.\n\n### See Also\n\nRelated concepts and tools associated with large language models include foundation models, various types of language models, benchmarks, and chatbots. Understanding these related topics provides a comprehensive view of the broader context in which large language models operate.\n\n### References\n\nThe references section in a Wikipedia article about large language models is crucial for supporting the credibility and reliability of the information presented. It includes citations to academic papers, research articles, and other authoritative sources that provide evidence for the claims made in the article.\n\n### Further Reading\n\nRecent literature and research address the development, challenges, applications, and evaluation of large language models, as well as their alignment and safety concerns. Exploring these resources provides insights into the latest advancements and ongoing debates in the field."}, {"instruction": "You are an AI editor writing a complete Wikipedia article that adheres to Wikipedia's content standards. The article should be coherent, with clear connections between sections and a consistent narrative throughout. Use neutral and encyclopedic language. \n\nThe article should contain 10 sections:\n\nSection 1 title should be Introduction, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the concept of word embeddings in natural language processing, highlighting their representation as real-valued vectors, methods of generation, and their impact on improving performance in various NLP tasks.\n\nSection 2 title should be Development and history of the approach, and this section should contain approximately (500 words):\nIn this section, you should follow this prompt: Explain the historical development and evolution of word embeddings, highlighting key advancements, influential models, and the shift from algebraic to neural network approaches in semantic space modeling.\n\nSection 3 title should be Polysemy and homonymy, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain how static word embeddings struggle with polysemy and homonymy, and describe the development and impact of multi-sense embeddings and contextually-meaningful embeddings like ELMo and BERT in addressing these challenges.\n\nSection 4 title should be For biological sequences: BioVectors, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how word embeddings, specifically bio-vectors such as BioVec, ProtVec, and GeneVec, are applied to biological sequences like DNA, RNA, and proteins to enhance bioinformatics applications through deep learning by capturing biochemical and biophysical patterns.\n\nSection 5 title should be Game design, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how word embeddings are utilized in game design to uncover emergent gameplay and capture expert knowledge through the transcription of gameplay actions into formal language, as demonstrated by Rabii and Cook.\n\nSection 6 title should be Sentence embeddings, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the development and significance of sentence embeddings, highlighting key advancements such as skip-thought vectors and Sentence-BERT, and their impact on natural language processing tasks like machine translation.\n\nSection 7 title should be Software, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the various software tools available for training and utilizing word embeddings, highlighting their functionalities and applications in dimensionality reduction and visualization.\n\nSection 8 title should be Examples of application, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Describe various real-world applications of word embeddings, highlighting tools like fastText used in platforms such as Sketch Engine for processing and analyzing text corpora.\n\nSection 9 title should be Ethical implications, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the ethical implications of word embeddings, focusing on how they may perpetuate and amplify existing gender and racial biases present in the training data.\n\nSection 10 title should be See also, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain related concepts and techniques to word embedding, providing context and connections to other areas in machine learning and data representation.\n\nTotal article length should be approximately 1600 words. Ensure smooth transitions between sections and maintain a coherent narrative throughout. Each section should flow naturally into the next, building a complete and informative Wikipedia article. Incorporate appropriate references and adhere to Wikipedia's neutral point of view.", "input": "", "output": "Introduction\nIn natural language processing, a word embedding is a representation of a word. The embedding is used in text analysis. Typically, the representation is a real-valued vector that encodes the meaning of the word in such a way that the words that are closer in the vector space are expected to be similar in meaning. Word embeddings can be obtained using language modeling and feature learning techniques, where words or phrases from the vocabulary are mapped to vectors of real numbers.\nMethods to generate this mapping include neural networks, dimensionality reduction on the word co-occurrence matrix, probabilistic models, explainable knowledge base method, and explicit representation in terms of the context in which words appear.\nWord and phrase embeddings, when used as the underlying input representation, have been shown to boost the performance in NLP tasks such as syntactic parsing and sentiment analysis.Development and history of the approach\nIn distributional semantics, a quantitative methodological approach for understanding meaning in observed language, word embeddings or semantic feature space models have been used as a knowledge representation for some time. Such models aim to quantify and categorize semantic similarities between linguistic items based on their distributional properties in large samples of language data.  The underlying idea that \"a word is characterized by the company it keeps\" was proposed in a 1957 article by John Rupert Firth, but also has roots in the contemporaneous work on search systems and in cognitive psychology.\nThe notion of a semantic space with lexical items (words or multi-word terms) represented as vectors or embeddings is based on the computational challenges of capturing distributional characteristics and using them for practical application to measure similarity between words, phrases, or entire documents. The first generation of semantic space models is the vector space model for information retrieval. Such vector space models for words and their distributional data implemented in their simplest form results in a very sparse vector space of high dimensionality (cf. curse of dimensionality). Reducing the number of dimensions using linear algebraic methods such as singular value decomposition then led to the introduction of latent semantic analysis in the late 1980s and the random indexing approach for collecting word co-occurrence contexts. In 2000, Bengio et al. provided in a series of papers titled \"Neural probabilistic language models\" to reduce the high dimensionality of word representations in contexts by \"learning a distributed representation for words\".\nA study published in NeurIPS (NIPS) 2002 introduced the use of both word and document embeddings applying the method of kernel CCA to bilingual (and multi-lingual) corpora, also providing an early example of self-supervised learning of word embeddings.\nWord embeddings come in two different styles, one in which words are expressed as vectors of co-occurring words, and another in which words are expressed as vectors of linguistic contexts in which the words occur; these different styles are studied in Lavelli et al., 2004. Roweis and Saul published in Science how to use \"locally linear embedding\" (LLE) to discover representations of high dimensional data structures. Most new word embedding techniques after about 2005 rely on a neural network architecture instead of more probabilistic and algebraic models, after foundational work done by Yoshua Bengio and colleagues.\nThe approach has been adopted by many research groups after theoretical advances in 2010 had been made on the quality of vectors and the training speed of the model, as well as after hardware advances allowed for a broader parameter space to be explored profitably. In 2013, a team at Google led by Tomas Mikolov created word2vec, a word embedding toolkit that can train vector space models faster than previous approaches. The word2vec approach has been widely used in experimentation and was instrumental in raising interest for word embeddings as a technology, moving the research strand out of specialised research into broader experimentation and eventually paving the way for practical application.Polysemy and homonymy\nHistorically, one of the main limitations of static word embeddings or word vector space models is that words with multiple meanings are conflated into a single representation (a single vector in the semantic space). In other words, polysemy and homonymy are not handled properly. For example, in the sentence \"The club I tried yesterday was great!\", it is not clear if the term club is related to the word sense of a club sandwich, clubhouse, golf club, or any other sense that club might have. The necessity to accommodate multiple meanings per word in different vectors (multi-sense embeddings) is the motivation for several contributions in NLP to split single-sense embeddings into multi-sense ones.\nMost approaches that produce multi-sense embeddings can be divided into two main categories for their word sense representation, i.e., unsupervised and knowledge-based. Based on word2vec skip-gram, Multi-Sense Skip-Gram (MSSG) performs word-sense discrimination and embedding simultaneously, improving its training time, while assuming a specific number of senses for each word. In the Non-Parametric Multi-Sense Skip-Gram (NP-MSSG) this number can vary depending on each word. Combining the prior knowledge of lexical databases (e.g., WordNet, ConceptNet, BabelNet), word embeddings and word sense disambiguation, Most Suitable Sense Annotation (MSSA) labels word-senses through an unsupervised and knowledge-based approach, considering a word's context in a pre-defined sliding window. Once the words are disambiguated, they can be used in a standard word embeddings technique, so multi-sense embeddings are produced. MSSA architecture allows the disambiguation and annotation process to be performed recurrently in a self-improving manner.\nThe use of multi-sense embeddings is known to improve performance in several NLP tasks, such as part-of-speech tagging, semantic relation identification, semantic relatedness, named entity recognition and sentiment analysis.\nAs of the late 2010s, contextually-meaningful embeddings such as ELMo and BERT have been developed. Unlike static word embeddings, these embeddings are at the token-level, in that each occurrence of a word has its own embedding. These embeddings better reflect the multi-sense nature of words, because occurrences of a word in similar contexts are situated in similar regions of BERT\u2019s embedding space.For biological sequences: BioVectors\nWord embeddings for n-grams in biological sequences (e.g. DNA, RNA, and Proteins) for bioinformatics applications have been proposed by Asgari and Mofrad. Named bio-vectors (BioVec) to refer to biological sequences in general with protein-vectors (ProtVec) for proteins (amino-acid sequences) and gene-vectors (GeneVec) for gene sequences, this representation can be widely used in applications of deep learning in proteomics and genomics. The results presented by Asgari and Mofrad suggest that BioVectors can characterize biological sequences in terms of biochemical and biophysical interpretations of the underlying patterns.Game design\nWord embeddings with applications in game design have been proposed by Rabii and Cook as a way to discover emergent gameplay using logs of gameplay data. The process requires transcribing actions that occur during a game within a formal language and then using the resulting text to create word embeddings. The results presented by Rabii and Cook suggest that the resulting vectors can capture expert knowledge about games like chess that are not explicitly stated in the game's rules.Sentence embeddings\nThe idea has been extended to embeddings of entire sentences or even documents, e.g. in the form of the thought vectors concept. In 2015, some researchers suggested \"skip-thought vectors\" as a means to improve the quality of machine translation. A more recent and popular approach for representing sentences is Sentence-BERT, or SentenceTransformers, which modifies pre-trained BERT with the use of siamese and triplet network structures.Software\nSoftware for training and using word embeddings includes Tom\u00e1\u0161 Mikolov's Word2vec, Stanford University's GloVe, GN-GloVe, Flair embeddings, AllenNLP's ELMo, BERT, fastText, Gensim, Indra, and Deeplearning4j. Principal Component Analysis (PCA) and T-Distributed Stochastic Neighbour Embedding (t-SNE) are both used to reduce the dimensionality of word vector spaces and visualize word embeddings and clusters.Examples of application\nFor instance, the fastText is also used to calculate word embeddings for text corpora in Sketch Engine that are available online.Ethical implications\nWord embeddings may contain the biases and stereotypes contained in the trained dataset, as Bolukbasi et al. points out in the 2016 paper \u201cMan is to Computer Programmer as Woman is to Homemaker? Debiasing Word Embeddings\u201d that a publicly available (and popular) word2vec embedding trained on Google News texts (a commonly used data corpus), which consists of text written by professional journalists, still shows disproportionate word associations reflecting gender and racial biases when extracting word analogies. For example, one of the analogies generated using the aforementioned word embedding is \u201cman is to computer programmer as woman is to homemaker\u201d.\nResearch done by Jieyu Zhou et al. shows that the applications of these trained word embeddings without careful oversight likely perpetuates existing bias in society, which is introduced through unaltered training data. Furthermore, word embeddings can even amplify these biases .See also\nEmbedding (machine learning)\nBrown clustering\nDistributional\u2013relational database\n\n\n== References ==", "result": "# Word Embeddings\n\nWord embeddings are a fundamental concept in natural language processing (NLP) that represent textual information in numerical form. These representations are typically in the form of dense vectors in a high-dimensional space, where each dimension corresponds to a specific feature or attribute of the word. This vector representation allows computational systems to capture the semantic and syntactic relationships between words, enabling them to perform tasks such as sentiment analysis, machine translation, and question answering more effectively. The development of word embeddings has significantly improved the performance of NLP models by providing a way to encode the meaning of words in a way that is interpretable by machines.\n\n---\n\n## Development and History of the Approach\n\nThe concept of word embeddings has evolved over several decades, starting from early algebraic methods to more sophisticated neural network-based models. In the 1960s, researchers like Zellig Harris introduced the idea of using matrices to represent words based on their co-occurrence frequencies in large corpora. This was a pioneering approach but limited in its ability to capture complex relationships.\n\nIn the late 1980s and early 1990s, the introduction of neural networks brought a new perspective to word representation. Models like the Continuous Bag-of-Words (CBOW) and Skip-gram, developed by Mikolov et al., used neural networks to learn word vectors from raw text data. These models were able to capture more nuanced relationships between words, leading to significant improvements in NLP tasks.\n\nIn the 2010s, the advent of deep learning further revolutionized the field. Models like GloVe (Global Vectors for Word Representation) and Word2Vec became widely popular due to their efficiency and effectiveness. GloVe was designed to handle both frequent and infrequent words, while Word2Vec provided a simpler architecture with CBOW and Skip-gram variants. These models laid the foundation for modern word embedding techniques.\n\nMore recent advancements have led to the development of contextual embeddings like ELMo (Embeddings from Language Models), BERT (Bidirectional Encoder Representations from Transformers), and ULMFit (Unsupervised Learning of Meaningful Textual Features). These models generate word embeddings that are context-dependent, capturing a word\u2019s meaning based on its surrounding context, which greatly improves performance in tasks requiring understanding of context.\n\n---\n\n## Polysemy and Homonymy\n\nStatic word embeddings often struggle with polysemy (the phenomenon where a word has multiple meanings) and homonymy (words that sound the same but have different meanings). For example, the word \"bark\" can refer to the sound a dog makes, the outer layer of a tree, or the act of biting. Static embeddings, which represent a word with a single fixed vector, cannot differentiate between these meanings. This limitation can lead to errors in NLP tasks.\n\nTo address these challenges, researchers have developed multi-sense embeddings and contextually meaningful embeddings. Multi-sense embeddings, such as those generated by LexVec, assign different vectors to different senses of a word. Contextually meaningful embeddings, like ELMo and BERT, generate word vectors that vary based on the context in which the word appears. These models provide a more nuanced representation of words, allowing them to better capture the intended meaning in different contexts.\n\nELMo uses a bidirectional LSTM (Long Short-Term Memory) network to generate contextualized word vectors, while BERT employs a transformer-based architecture to achieve similar results. These models have shown remarkable improvements in various NLP tasks, including natural language inference, named entity recognition, and text classification.\n\n---\n\n## For Biological Sequences: BioVectors\n\nWord embeddings have also found applications in the field of bioinformatics, where they are referred to as bio-vectors. Bio-vectors such as BioVec, ProtVec, and GeneVec are used to represent DNA, RNA, and protein sequences in a high-dimensional space. These embeddings capture biochemical and biophysical patterns, enabling the use of deep learning techniques in bioinformatics.\n\nBioVec, for instance, uses a word2vec-like approach to generate embeddings for nucleotide sequences. ProtVec applies similar techniques to protein sequences, allowing for the analysis of amino acid compositions and structural features. These bio-vectors have been instrumental in various applications, including drug discovery, gene function prediction, and disease diagnosis.\n\nBy leveraging the power of word embeddings, bioinformatics researchers can now analyze and interpret complex biological data more effectively, leading to advancements in personalized medicine and genetic research.\n\n---\n\n## Game Design\n\nWord embeddings have found applications in game design, particularly in the analysis of emergent gameplay and the transcription of gameplay actions into formal language. Researchers like Rabii and Cook have demonstrated how word embeddings can be used to capture expert knowledge and player behavior in video games.\n\nIn one study, Rabii and Cook used word embeddings to analyze player actions in a first-person shooter game. By representing player actions as word vectors, they were able to identify patterns and strategies that emerged during gameplay. This approach not only provides insights into player behavior but also helps in designing more engaging and adaptive game environments.\n\nThe use of word embeddings in game design highlights the versatility of these techniques beyond traditional NLP applications, demonstrating their potential in enhancing user experience and game development processes.\n\n---\n\n## Sentence Embeddings\n\nSentence embeddings extend the concept of word embeddings to entire sentences, providing a compact and meaningful representation of the overall meaning of a sentence. Key advancements in this area include skip-thought vectors and Sentence-BERT.\n\nSkip-thought vectors, proposed by Kiros et al., use a recurrent neural network to generate sentence embeddings that capture the semantic content of a sentence. These embeddings can be used for various tasks, such as document summarization and sentence similarity measurement.\n\nSentence-BERT, on the other hand, is a more recent development that uses a transformer-based architecture to generate sentence embeddings. It leverages the bidirectional nature of transformers to capture both local and global dependencies within sentences, leading to more accurate and context-aware embeddings.\n\nThe significance of sentence embeddings lies in their ability to capture the complex relationships between words and phrases, making them invaluable for tasks such as machine translation, text summarization, and question answering.\n\n---\n\n## Software\n\nThere are numerous software tools available for training and utilizing word embeddings. These tools offer a wide range of functionalities, from simple vector operations to advanced model training and visualization.\n\nPopular tools include Gensim, which provides a flexible framework for training and manipulating word embeddings. It supports various algorithms such as Word2Vec, FastText, and Doc2Vec. Another widely used tool is spaCy, which offers efficient and easy-to-use word embedding models along with other NLP functionalities.\n\nFor dimensionality reduction and visualization, tools like t-SNE and PCA can be used in conjunction with word embeddings. These techniques help in visualizing the high-dimensional vector space in two or three dimensions, providing insights into the structure and relationships between words.\n\nThese software tools play a crucial role in the development and deployment of word embeddings, enabling researchers and practitioners to leverage the power of these techniques in various NLP applications.\n\n---\n\n## Examples of Application\n\nWord embeddings have numerous real-world applications across different domains. For instance, fastText, a library developed by Facebook AI Research, is widely used for processing and analyzing text corpora. It extends the capabilities of word embeddings to subword units, making it particularly effective for languages with rich morphology.\n\nIn platforms like Sketch Engine, word embeddings are used to build comprehensive lexical databases. These databases are invaluable for linguistic research, translation, and information retrieval. By leveraging word embeddings, Sketch Engine can provide more accurate and context-aware results, enhancing the overall user experience.\n\n---\n\n## Ethical Implications\n\nWhile word embeddings have revolutionized NLP, they also raise important ethical considerations. One significant concern is the perpetuation of biases present in the training data. If the data used to train word embeddings is biased, the resulting embeddings will reflect and reinforce these biases. For example, if a dataset contains more positive examples of certain groups, the embeddings might reflect a bias towards those groups.\n\nTo mitigate these issues, researchers and practitioners must be mindful of the data they use and employ techniques such as bias mitigation and fairness-aware learning. Additionally, transparency and explainability in the use of word embeddings are crucial to ensure that the models are used ethically and responsibly.\n\n---\n\n## See Also\n\nWord embeddings are closely related to other concepts in machine learning and data representation, including:\n\n- **Neural Networks**: The foundational architecture used in many modern word embedding models.\n- **Dimensionality Reduction**: Techniques like PCA and t-SNE are often used alongside word embeddings to visualize and analyze high-dimensional data.\n- **Natural Language Processing (NLP)**: The broader field that encompasses the use of word embeddings.\n- **Machine Learning**: The broader domain that includes NLP and other specialized areas.\n- **Deep Learning**: The subset of machine learning that relies on neural networks, particularly those with multiple layers.\n\nUnderstanding these related concepts provides a deeper insight into the broader landscape of machine learning and its applications."}, {"instruction": "You are an AI editor writing a complete Wikipedia article that adheres to Wikipedia's content standards. The article should be coherent, with clear connections between sections and a consistent narrative throughout. Use neutral and encyclopedic language. \n\nThe article should contain 17 sections:\n\nSection 1 title should be Introduction, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Describe the introduction of BERT, highlighting its development by Google, its impact on natural language processing, training methods, model sizes, and its significance as a baseline in NLP experiments.\n\nSection 2 title should be Architecture, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain the components and functionality of BERT's encoder-only transformer architecture, highlighting the roles of the tokenizer, embedding, encoder, and task head, as well as their significance in pre-training and downstream tasks.\n\nSection 3 title should be Embedding, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the embedding process used in BERTBASE, detailing the roles and functions of token type embeddings, position embeddings, and segment type embeddings, and describe how these are combined and processed through the model.\n\nSection 4 title should be Architectural family, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how varying the number of layers and hidden size in BERT's encoder stack creates different model configurations and describe the implications of these variations using examples like BERTBASE, BERTLARGE, and BERTTINY.\n\nSection 5 title should be Training, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the process and techniques used to train the BERT language model, highlighting key innovations and methodologies that contributed to its effectiveness.\n\nSection 6 title should be Pre-training, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how BERT's pre-training tasks, Masked Language Model (MLM) and Next Sentence Prediction (NSP), contribute to its ability to understand bidirectional context and sentence relationships.\n\nSection 7 title should be Masked language modeling, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain the process and purpose of masked language modeling in BERT, highlighting how token masking probabilities are used to prevent dataset shift and improve model training.\n\nSection 8 title should be Next sentence prediction, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how BERT uses the next sentence prediction task to determine the sequential relationship between two spans of text, including the role of special tokens like [CLS] and [SEP] in this process.\n\nSection 9 title should be Fine-tuning, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how BERT is fine-tuned for specific natural language processing tasks, highlighting its ability to achieve state-of-the-art performance with minimal resources and detailing the process and recommendations for fine-tuning its parameters.\n\nSection 10 title should be Cost, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the resources, duration, and estimated costs involved in training BERTBASE and BERTLARGE, highlighting the differences in computational requirements and expenses.\n\nSection 11 title should be Interpretation, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explore the challenges and methodologies involved in interpreting BERT's language understanding capabilities, including its bidirectional training advantages and limitations in text generation due to its encoder-only architecture.\n\nSection 12 title should be History, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Discuss the development and impact of BERT as a language model, highlighting its origins, unique bidirectional design, and its integration into Google Search for processing language queries.\n\nSection 13 title should be Variants, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Discuss the various influential variants of the BERT language model, highlighting their unique architectural changes, improvements, and specific tasks they address, such as RoBERTa's training enhancements, DistilBERT's parameter reduction, ALBERT's parameter sharing and SOP task, ELECTRA's adversarial approach, and DeBERTa's disentangled attention mechanism.\n\nSection 14 title should be Notes, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the key points and additional information about BERT that are typically found in the \"Notes\" section of a Wikipedia article, focusing on clarifications, supplementary details, or insights that enhance the understanding of the language model.\n\nSection 15 title should be References, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the key sources and studies that have contributed to the development and understanding of the BERT language model, highlighting significant research papers and influential works in the field.\n\nSection 16 title should be Further reading, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the key insights and findings from the paper \"A Primer in BERTology: What we know about how BERT works\" by Rogers, Kovaleva, and Rumshisky, highlighting its contributions to understanding the inner workings and applications of the BERT language model.\n\nSection 17 title should be External links, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Describe the purpose and significance of the official GitHub repository for BERT, highlighting how it serves as a resource for developers and researchers interested in exploring and utilizing the BERT language model.\n\nTotal article length should be approximately 2800 words. Ensure smooth transitions between sections and maintain a coherent narrative throughout. Each section should flow naturally into the next, building a complete and informative Wikipedia article. Incorporate appropriate references and adhere to Wikipedia's neutral point of view.", "input": "", "output": "Introduction\nBidirectional encoder representations from transformers (BERT) is a language model introduced in October 2018 by researchers at Google. It learns to represent text as a sequence of vectors using self-supervised learning. It uses the encoder-only transformer architecture. BERT dramatically improved the state-of-the-art for large language models. As of 2020, BERT is a ubiquitous baseline in natural language processing (NLP) experiments. \nBERT is trained by masked token prediction and next sentence prediction. As a result of this training process, BERT learns contextual, latent representations of tokens in their context, similar to ELMo and GPT-2. It found applications for many natural language processing tasks, such as coreference resolution and polysemy resolution. It is an evolutionary step over ELMo, and spawned the study of \"BERTology\", which attempts to interpret what is learned by BERT.\nBERT was originally implemented in the English language at two model sizes, BERTBASE (110 million parameters) and BERTLARGE (340 million parameters). Both were trained on the Toronto BookCorpus (800M words) and English Wikipedia  (2,500M words). The weights were released on GitHub. On March 11, 2020, 24 smaller models were released, the smallest being BERTTINY with just 4 million parameters.Architecture\nBERT is an \"encoder-only\" transformer architecture. At a high level, BERT consists of 4 modules: \n\nTokenizer: This module converts a piece of English text into a sequence of integers (\"tokens\").\nEmbedding: This module converts the sequence of tokens into an array of real-valued vectors representing the tokens. It represents the conversion of discrete token types into a lower-dimensional Euclidean space.\nEncoder: a stack of Transformer blocks with self-attention, but without causal masking.\nTask head: This module converts the final representation vectors into one-hot encoded tokens again by producing a predicted probability distribution over the token types. It can be viewed as a simple decoder, decoding the latent representation into token types, or as an \"un-embedding layer\".\nThe task head is necessary for pre-training, but it is often unnecessary for so-called \"downstream tasks,\" such as question answering or sentiment classification. Instead, one removes the task head and replaces it with a newly initialized module suited for the task, and finetune the new module. The latent vector representation of the model is directly fed into this new module, allowing for sample-efficient transfer learning.Embedding\nThis section describes the embedding used by BERTBASE. The other one, BERTLARGE, is similar, just larger.\nThe tokenizer of BERT is WordPiece, which is a sub-word strategy like byte pair encoding. Its vocabulary size is 30,000, and any token not appearing in its vocabulary is replaced by [UNK] (\"unknown\"). \n\nThe first layer is the embedding layer, which contains three components: token type embeddings, position embeddings, and segment type embeddings. \n\nToken type: The token type is a standard embedding layer, translating a one-hot vector into a dense vector based on its token type.\nPosition: The position embeddings are based on a token's position in the sequence. BERT uses absolute position embeddings, where each position in sequence is mapped to a real-valued vector. Each dimension of the vector consists of a sinusoidal function that takes the position in the sequence as input.\nSegment type: Using a vocabulary of just 0 or 1, this embedding layer produces a dense vector based on whether the token belongs to the first or second text segment in that input. In other words, type-1 tokens are all tokens that appear after the [SEP] special token. All prior tokens are type-0.\nThe three embedding vectors are added together representing the initial token representation as a function of these three pieces of information. After embedding, the vector representation is normalized using a LayerNorm operation, outputting a 768-dimensional vector for each input token. After this, the representation vectors are passed forward through 12 Transformer encoder blocks, and are decoded back to 30,000-dimensional vocabulary space using a basic affine transformation layer.Architectural family\nThe encoder stack of BERT has 2 free parameters: \n  \n    \n      \n        L\n      \n    \n    {\\displaystyle L}\n  \n, the number of layers, and \n  \n    \n      \n        H\n      \n    \n    {\\displaystyle H}\n  \n, the hidden size. There are always \n  \n    \n      \n        H\n        \n          /\n        \n        64\n      \n    \n    {\\displaystyle H/64}\n  \n self-attention heads, and the feed-forward/filter size is always \n  \n    \n      \n        4\n        H\n      \n    \n    {\\displaystyle 4H}\n  \n. By varying these two numbers, one obtains an entire family of BERT models.\nFor BERT\n\nthe feed-forward size and filter size are synonymous. Both of them denote the number of dimensions in the middle layer of the feed-forward network.\nthe hidden size and embedding size are synonymous. Both of them denote the number of real numbers used to represent a token.\nThe notation for encoder stack is written as L/H. For example, BERTBASE is written as 12L/768H, BERTLARGE as 24L/1024H, and BERTTINY as 2L/128H.Training\nPre-training\nBERT was pre-trained simultaneously on two tasks.\n\nMasked Language Model (MLM): In this task, BERT randomly masks some words in a sentence and tries to predict the original words that were masked. For example, in the sentence \"The cat sat on the [MASK],\" BERT would need to predict \"mat.\" This helps BERT learn bidirectional context, meaning it understands the relationships between words not just from left to right or right to left but from both directions at the same time.\nNext Sentence Prediction (NSP): In this task, BERT is trained to predict whether one sentence logically follows another. For example, given two sentences, \"The cat sat on the mat.\" and \"It was a sunny day,\" BERT has to decide if the second sentence is a valid continuation of the first one. This helps BERT understand relationships between sentences, which is important for tasks like question answering or document classification.Masked language modeling\nIn masked language modeling, 15% of tokens would be randomly selected for masked-prediction task, and the training objective was to predict the masked token given its context. In more detail, the selected token is \n\nreplaced with a [MASK] token with probability 80%,\nreplaced with a random word token with probability 10%,\nnot replaced with probability 10%.\nThe reason not all selected tokens are masked is to avoid the dataset shift problem. The dataset shift problem arises when the distribution of inputs seen during training differs significantly from the distribution encountered during inference. A trained BERT model might be applied to word representation (like Word2Vec), where it would be run over sentences not containing any [MASK] tokens. It is later found that more diverse training objectives are generally better.\nAs an illustrative example, consider the sentence \"my dog is cute\". It would first be divided into tokens like \"my1 dog2 is3 cute4\". Then a random token in the sentence would be picked. Let it be the 4th one \"cute4\". Next, there would be three possibilities:\n\nwith probability 80%, the chosen token is masked, resulting in \"my1 dog2 is3 [MASK]4\";\nwith probability 10%, the chosen token is replaced by a uniformly sampled random token, such as \"happy\", resulting in \"my1 dog2 is3 happy4\";\nwith probability 10%, nothing is done, resulting in \"my1 dog2 is3 cute4\".\nAfter processing the input text, the model's 4th output vector is passed to its decoder layer, which outputs a probability distribution over its 30,000-dimensional vocabulary space.Next sentence prediction\nGiven two spans of text, the model predicts if these two spans appeared sequentially in the training corpus, outputting either [IsNext] or [NotNext]. The first span starts with a special token [CLS] (for \"classify\"). The two spans are separated by a special token [SEP] (for \"separate\"). After processing the two spans, the 1-st output vector (the vector coding for [CLS]) is passed to a separate neural network for the binary classification into [IsNext] and [NotNext].\n\nFor example, given \"[CLS] my dog is cute [SEP] he likes playing\" the model should output token [IsNext].\nGiven \"[CLS] my dog is cute [SEP] how do magnets work\" the model should output token [NotNext].Fine-tuning\nBERT is meant as a general pretrained model for various applications in natural language processing. That is, after pre-training, BERT can be fine-tuned with fewer resources on smaller datasets to optimize its performance on specific tasks such as natural language inference and text classification, and sequence-to-sequence-based language generation tasks such as question answering and conversational response generation.\nThe original BERT paper published results demonstrating that a small amount of finetuning (for BERTLARGE, 1 hour on 1 Cloud TPU) allowed it to achieved state-of-the-art performance on a number of natural language understanding tasks:\n\nGLUE (General Language Understanding Evaluation) task set (consisting of 9 tasks);\nSQuAD (Stanford Question Answering Dataset) v1.1 and v2.0;\nSWAG (Situations With Adversarial Generations).\nIn the original paper, all parameters of BERT are finetuned, and recommended that, for downstream applications that are text classifications, the output token at the [CLS] input token is fed into a linear-softmax layer to produce the label outputs.\nThe original code base defined the final linear layer as a \"pooler layer\", in analogy with global pooling in computer vision, even though it simply discards all output tokens except the one corresponding to  [CLS] .Cost\nBERT was trained on the BookCorpus (800M words) and a filtered version of English Wikipedia (2,500M words) without lists, tables, and headers.\nTraining BERTBASE  on 4 cloud TPU (16 TPU chips total) took 4 days, at an estimated cost of 500 USD. Training BERTLARGE on 16 cloud TPU (64 TPU chips total) took 4 days.Interpretation\nLanguage models like ELMo, GPT-2, and BERT, spawned the study of \"BERTology\", which attempts to interpret what is learned by these models. Their performance on these natural language understanding tasks are not yet well understood. Several research publications in 2018 and 2019 focused on investigating the relationship behind BERT's output as a result of carefully chosen input sequences, analysis of internal vector representations through probing classifiers, and the relationships represented by attention weights.\nThe high performance of the BERT model could also be attributed to the fact that it is bidirectionally trained. This means that BERT, based on the Transformer model architecture, applies its self-attention mechanism to learn information from a text from the left and right side during training, and consequently gains a deep understanding of the context. For example, the word fine can have two different meanings depending on the context (I feel fine today, She has fine blond hair). BERT considers the words surrounding the target word fine from the left and right side.\nHowever it comes at a cost: due to encoder-only architecture lacking a decoder, BERT can't be prompted and can't generate text, while bidirectional models in general do not work effectively without the right side, thus being difficult to prompt. As an illustrative example, if one wishes to use BERT to continue a sentence fragment \"Today, I went to\", then naively one would mask out all the tokens as \"Today, I went to  [MASK]  [MASK]  [MASK] ...  [MASK] .\" where the number of  [MASK]  is the length of the sentence one wishes to extend to. However, this constitutes a dataset shift, as during training, BERT has never seen sentences with that many tokens masked out. Consequently, its performance degrades. More sophisticated techniques allow text generation, but at a high computational cost.History\nBERT was originally published by Google researchers Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. The design has its origins from pre-training contextual representations, including semi-supervised sequence learning, generative pre-training, ELMo, and ULMFit. Unlike previous models, BERT is a deeply bidirectional, unsupervised language representation, pre-trained using only a plain text corpus. Context-free models such as word2vec or GloVe generate a single word embedding representation for each word in the vocabulary, whereas BERT takes into account the context for each occurrence of a given word. For instance, whereas the vector for \"running\" will have the same word2vec vector representation for both of its occurrences in the sentences \"He is running a company\" and \"He is running a marathon\", BERT will provide a contextualized embedding that will be different according to the sentence.\nOn October 25, 2019, Google announced that they had started applying BERT models for English language search queries within the US. On December 9, 2019, it was reported that BERT had been adopted by Google Search for over 70 languages. In October 2020, almost every single English-based query was processed by a BERT model.Variants\nThe BERT models were influential and inspired many variants.\nRoBERTa (2019) was an engineering improvement. It preserves BERT's architecture (slightly larger, at 355M parameters), but improves its training, changing key hyperparameters, removing the next-sentence prediction task, and using much larger mini-batch sizes. \nDistilBERT (2019) distills BERTBASE to a model with just 60% of its parameters (66M), while preserving 95% of its benchmark scores. Similarly, TinyBERT (2019) is a distilled model with just 28% of its parameters.\nALBERT (2019) used shared-parameter across layers, and experimented with independently varying the hidden size and the word-embedding layer's output size as two hyperparameters. They also replaced the next sentence prediction task with the sentence-order prediction (SOP) task, where the model must distinguish the correct order of two consecutive text segments from their reversed order. \nELECTRA (2020) applied the idea of generative adversarial networks to the MLM task. Instead of masking out tokens, a small language model generates random plausible substitutions, and a larger network identify these replaced tokens. The small model aims to fool the large model.\nDeBERTa (2020) is a significant architectural variant, with disentangled attention. Its key idea is to treat the positional and token encodings separately throughout the attention mechanism. Instead of combining the positional encoding (\n  \n    \n      \n        \n          x\n          \n            p\n            o\n            s\n            i\n            t\n            i\n            o\n            n\n          \n        \n      \n    \n    {\\displaystyle x_{position}}\n  \n) and token encoding (\n  \n    \n      \n        \n          x\n          \n            token\n          \n        \n      \n    \n    {\\displaystyle x_{\\text{token}}}\n  \n) into a single input vector (\n  \n    \n      \n        \n          x\n          \n            i\n            n\n            p\n            u\n            t\n          \n        \n        =\n        \n          x\n          \n            p\n            o\n            s\n            i\n            t\n            i\n            o\n            n\n          \n        \n        +\n        \n          x\n          \n            t\n            o\n            k\n            e\n            n\n          \n        \n      \n    \n    {\\displaystyle x_{input}=x_{position}+x_{token}}\n  \n), DeBERTa keeps them separate as a tuple: (\n  \n    \n      \n        (\n        \n          x\n          \n            p\n            o\n            s\n            i\n            t\n            i\n            o\n            n\n          \n        \n        ,\n        \n          x\n          \n            t\n            o\n            k\n            e\n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle (x_{position},x_{token})}\n  \n). Then, at each self-attention layer, DeBERTa computes three distinct attention matrices, rather than the single attention matrix used in BERT:\n\nThe three attention matrices are added together element-wise, then passed through a softmax layer and multiplied by a projection matrix.\nAbsolute position encoding is included in the final self-attention layer as additional input.Notes\nReferences\nFurther reading\nRogers, Anna; Kovaleva, Olga; Rumshisky, Anna (2020). \"A Primer in BERTology: What we know about how BERT works\". arXiv:2002.12327 [cs.CL].External links\nOfficial GitHub repository", "result": "# Introduction\n\nBERT (Bidirectional Encoder Representations from Transformers) is a pre-trained deep learning model developed by Google that significantly advanced the field of natural language processing (NLP). Introduced in 2018 by Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova, BERT demonstrated remarkable performance across a wide range of NLP tasks, setting new benchmarks and becoming a foundational model for subsequent research. Unlike previous models that processed text in a unidirectional manner (from left to right or vice versa), BERT was trained to understand the context of words bidirectionally, making it highly effective at capturing semantic relationships within sentences.\n\nBERT operates on transformer architectures, which are based on self-attention mechanisms. This allows the model to weigh the importance of different words in a sentence relative to each other, thereby enhancing its ability to comprehend complex linguistic structures. BERT comes in several model sizes, with BERTBASE and BERTLARGE being the most commonly referenced. BERTBASE contains 110 million parameters and 12 layers, while BERTLARGE has 340 million parameters and 24 layers. These models were trained on large corpora of text data, resulting in robust embeddings that can be fine-tuned for specific NLP tasks with minimal effort. The success of BERT has led to widespread adoption and numerous advancements in NLP, making it a crucial component in many modern language processing systems.\n\n# Architecture\n\nBERT's architecture is centered around a transformer-based encoder, which processes input text bidirectionally. The model consists of several key components: a tokenizer, embedding layers, an encoder stack, and a task-specific head. The tokenizer converts raw text into a sequence of tokens, which are then passed through the embedding layers to generate initial representations. These embeddings include token type embeddings, which distinguish between different types of tokens (e.g., words versus punctuation), and position embeddings, which provide positional information to the model. The encoder stack, comprising multiple transformer layers, processes these embeddings to capture contextual information. Finally, the task-specific head is used to adapt the encoder's output to the desired downstream task, such as classification or question answering.\n\nThe bidirectional nature of BERT is a critical feature. Unlike earlier models that processed text sequentially, BERT considers both the left and right contexts of a word during training. This allows it to better understand the meaning of words in a sentence, leading to improved performance on various NLP tasks. The encoder stack is responsible for generating dense vector representations of the input text, which are then fed into the task-specific head for further processing. This architecture enables BERT to handle a wide variety of NLP tasks with high accuracy and efficiency.\n\n# Embedding\n\nIn BERTBASE, the embedding process involves several distinct steps that combine to create rich representations of textual inputs. Token embeddings are generated by mapping each token to a dense vector space, allowing the model to capture semantic and syntactic information. Token type embeddings are used to differentiate between different types of tokens, such as words and punctuation marks, providing additional context to the model. Position embeddings encode the relative positions of tokens within a sentence, enabling the model to understand the order of words and their dependencies. Segment type embeddings are used to distinguish between different segments of text, such as different sentences or clauses, which is particularly useful in handling multi-sentence inputs.\n\nThese embeddings are combined through a simple summation operation, where the token embedding, token type embedding, and position embedding are added together to produce the final input representation for each token. This combination allows the model to incorporate multiple types of information simultaneously, leading to more nuanced and accurate representations. The resulting embeddings are then passed through the encoder stack, where they undergo a series of self-attention operations to capture contextual relationships between words. The encoder stack processes these embeddings layer by layer, gradually building up more complex and informative representations. The final output of the encoder stack is then fed into the task-specific head, which is tailored to the specific downstream task, such as sentiment analysis or named entity recognition.\n\n# Architectural Family\n\nVarying the number of layers and hidden size in BERT's encoder stack creates different model configurations, each with its own strengths and applications. For example, BERTBASE, with 12 layers and a hidden size of 768, is designed to strike a balance between computational efficiency and model capacity. It is widely used in a variety of NLP tasks due to its moderate size and performance. On the other hand, BERTLARGE, which includes 24 layers and a hidden size of 1024, offers greater capacity but requires more computational resources and time for training. Similarly, BERTTINY, a smaller variant with fewer layers and a reduced hidden size, is suitable for environments with limited computational power. These different configurations allow researchers and practitioners to choose the most appropriate model based on their specific needs and constraints.\n\n# Training\n\nTraining BERT involves several key steps and methodologies that contribute to its effectiveness. The model is initially pre-trained on large corpora of text data using unsupervised learning techniques. During pre-training, BERT is exposed to a diverse set of sentences and learns to predict masked words and the next sentence in a pair. This process helps the model develop a deep understanding of language structure and context. Once pre-trained, BERT can be fine-tuned for specific NLP tasks with minimal additional training. Fine-tuning involves adjusting the model's parameters on a small dataset relevant to the task, allowing it to specialize in the particular domain or context. This approach leverages the pre-trained knowledge to achieve state-of-the-art performance with relatively little effort.\n\n# Pre-training\n\nBERT's pre-training process involves two primary tasks: Masked Language Model (MLM) and Next Sentence Prediction (NSP). The MLM task involves randomly masking some tokens in the input text and training the model to predict these masked tokens based on the surrounding context. This encourages the model to learn rich contextual representations, as it must consider both left and right contexts to accurately predict missing words. The NSP task involves predicting whether two given sentences are consecutive in the original text. This task helps the model understand sentence-level coherence and relationships, which is crucial for tasks involving multi-sentence inputs.\n\n# Masked Language Modeling\n\nMasked language modeling is a core component of BERT's pre-training process. In this task, a portion of the input text is masked, and the model is trained to predict the masked tokens based on the surrounding context. The masking process is probabilistic, with a certain percentage of tokens being randomly masked. This helps prevent dataset shift and ensures that the model generalizes well to unseen data. By forcing the model to predict masked tokens, BERT learns to understand the relationships between words and their contexts, leading to improved performance on various NLP tasks. The use of masked language modeling also enhances the model's ability to handle out-of-vocabulary words and rare phrases.\n\n# Next Sentence Prediction\n\nThe next sentence prediction task is another important aspect of BERT's pre-training. This task involves determining whether a second sentence logically follows the first one. To perform this task, BERT uses special tokens such as [CLS] and [SEP]. The [CLS] token is added at the beginning of the input sequence and is used to generate a single fixed-length vector that captures the overall meaning of the input. The [SEP] token is placed between two sentences to mark the boundary between them. By training on this task, BERT learns to recognize the sequential relationships between sentences, which is essential for tasks involving multi-sentence inputs.\n\n# Fine-tuning\n\nFine-tuning BERT involves adapting the pre-trained model to specific NLP tasks by adjusting its parameters on task-specific data. This process is relatively straightforward compared to training from scratch, as BERT already has a strong foundation of pre-trained knowledge. During fine-tuning, the model's task-specific head is trained to perform the desired task, such as classification or regression. The encoder part of BERT remains largely unchanged, leveraging its pre-trained representations. Fine-tuning is typically done using a small amount of labeled data, often just a few hundred examples, which allows the model to quickly specialize in the task at hand. This approach is efficient and effective, as it minimizes the need for extensive retraining and achieves state-of-the-art performance with minimal resources.\n\n# Cost\n\nTraining BERTBASE and BERTLARGE requires significant computational resources and time. BERTBASE, with 110 million parameters, typically takes several days to train on powerful GPUs, while BERTLARGE, with 340 million parameters, can take even longer. The cost of training these models includes not only the hardware expenses but also the electricity and cooling costs associated with running the training jobs. Additionally, the storage required for the model checkpoints and intermediate data can add to the overall cost. These factors make BERT training a costly and resource-intensive process, especially for larger models like BERTLARGE.\n\n# Interpretation\n\nInterpreting BERT's language understanding capabilities is challenging due to its complex and opaque nature. While BERT demonstrates impressive performance on various NLP tasks, understanding exactly how it makes decisions remains difficult. The bidirectional training approach provides a significant advantage in capturing context, but it also introduces limitations. For instance, BERT struggles with text generation tasks, as its encoder-only architecture does not support generating new text directly. Instead, it relies on the task-specific head to make predictions based on the learned representations. Researchers have employed various techniques to interpret BERT, such as attention visualization and saliency maps, to gain insights into its decision-making process. However, these methods often provide partial explanations and do not fully capture the model's internal workings.\n\n# History\n\nBERT was introduced in 2018 by researchers from Google AI, marking a significant milestone in the field of natural language processing. Its unique bidirectional training approach, which allowed the model to understand the context of words in both directions, revolutionized the way NLP tasks were approached. Initially, BERT was primarily used in academic settings and research projects. However, its success quickly led to its integration into practical applications, including Google Search. In 2020, BERT was incorporated into Google Search, enabling the search engine to better understand and process language queries, leading to more accurate and relevant search results. Since its introduction, BERT has inspired numerous advancements and variations, solidifying its place as a cornerstone in the development of modern language models.\n\n# Variants\n\nSeveral influential variants of BERT have emerged since its introduction, each addressing specific limitations or improving upon the original model. RoBERTa, developed by Facebook AI, builds on BERT by training on larger datasets and using different pre-training strategies, leading to improved performance on various NLP tasks. DistilBERT, created by Hugging Face, reduces the model size by distilling the knowledge from BERTBASE into a smaller, faster version that retains comparable performance. ALBERT, introduced by Google, introduces parameter sharing and a new task called Sentence Order Prediction (SOP) to reduce the model size further while maintaining or even surpassing BERT's performance. ELECTRA, developed by Google, uses an adversarial training approach, where one part of the model generates fake data and another part tries to distinguish between real and fake data, leading to more robust representations. DeBERTa, another Google model, introduces a disentangled attention mechanism that allows the model to focus on different parts of the input independently, improving its performance on various tasks.\n\n# Notes\n\nThe notes section of a Wikipedia article typically provides additional information and clarifications to enhance the reader's understanding of the topic. For BERT, key points include the importance of bidirectional training in capturing context, the challenges in interpreting the model's decisions, and the need for careful fine-tuning to achieve optimal performance. The model's ability to generalize well across different domains and languages is also noteworthy. Supplementary details might include the impact of different hyperparameters on model performance and the role of transfer learning in NLP. Insights from recent research, such as the \"A Primer in BERTology\" paper, highlight the ongoing efforts to understand and optimize BERT's performance.\n\n# References\n\nThe development and understanding of BERT have been significantly influenced by numerous research papers and influential works in the field. Key references include the original BERT paper by Devlin et al. (2018), which introduced the model and its pre-training methods. Subsequent works, such as the RoBERTa paper by Liu et al. (2019), have built upon BERT to address its limitations and improve performance. Other notable papers include those by Devlin et al. (2020) on DistilBERT and Sun et al. (2020) on ALBERT. These papers and others have contributed to the advancement of BERT and its variants, making them essential tools in the NLP toolkit.\n\n# Further Reading\n\nThe paper \"A Primer in BERTology: What we know about how BERT works\" by Rogers, Kovaleva, and Rumshisky provides valuable insights into the inner workings and applications of BERT. The authors explore various aspects of BERT, including its architecture, training process, and performance on different tasks. This primer is particularly useful for researchers and practitioners looking to deepen their understanding of BERT and its limitations. It covers topics such as attention mechanisms, pre-training strategies, and fine-tuning techniques, offering a comprehensive overview of the model.\n\n# External Links\n\nThe official GitHub repository for BERT serves as a valuable resource for developers and researchers interested in exploring and utilizing the model. It provides access to the source code, pre-trained models, and detailed documentation. The repository includes tutorials and examples demonstrating how to fine-tune BERT for various NLP tasks, making it an essential tool for anyone looking to leverage BERT in their projects. This repository is regularly updated with the latest versions of BERT and its variants, ensuring that users have access to the most current and accurate implementations."}, {"instruction": "You are an AI editor writing a complete Wikipedia article that adheres to Wikipedia's content standards. The article should be coherent, with clear connections between sections and a consistent narrative throughout. Use neutral and encyclopedic language. \n\nThe article should contain 48 sections:\n\nSection 1 title should be Introduction, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain the fundamental principles and advantages of the transformer architecture in deep learning, highlighting its impact on various applications and its evolution beyond initial machine translation tasks.\n\nSection 2 title should be History, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the development and evolution of the Transformer architecture in deep learning, highlighting key milestones and advancements in its history.\n\nSection 3 title should be Predecessors, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Discuss the evolution of sequence modeling techniques leading up to the development of Transformers, highlighting the limitations of RNNs and LSTMs, and the innovations that paved the way for modern Transformer architectures.\n\nSection 4 title should be Attention with seq2seq, and this section should contain approximately (400 words):\nIn this section, you should follow this prompt: Explain the evolution and impact of attention mechanisms in seq2seq models for machine translation, highlighting the challenges with early models and the improvements brought by incorporating attention, as well as comparing different attention strategies and their influence on translation quality and efficiency.\n\nSection 5 title should be Parallelizing attention, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how the development of self-attention mechanisms and the removal of recurrence in transformer models facilitated parallel processing on GPUs, leading to improved performance and efficiency in sequence-to-sequence tasks such as machine translation.\n\nSection 6 title should be AI boom era, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Discuss the impact and evolution of Transformer architecture in the AI boom era, highlighting its applications in language modeling, natural language generation, and other modalities such as vision and multimodal tasks.\n\nSection 7 title should be Training, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the key processes and techniques involved in training transformer models, highlighting how these methods contribute to their effectiveness and performance in deep learning tasks.\n\nSection 8 title should be Methods for stabilizing training, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the methods used to stabilize the training of transformer models, including the use of learning rate warmup and modifications to layer normalization, and how these approaches address convergence issues.\n\nSection 9 title should be Pretrain-finetune, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how the pretrain-finetune approach in transformer models leverages self-supervised learning on large datasets followed by supervised fine-tuning on smaller, task-specific datasets to tackle various natural language processing tasks.\n\nSection 10 title should be Tasks, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the different classes of language modeling tasks, including masked, autoregressive, and prefixLM, and describe how they are applied in the context of Transformer models, highlighting their training approaches and associated loss functions.\n\nSection 11 title should be Architecture, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the architecture of the Transformer model in deep learning, detailing its components and their functions, including tokenizers, embedding layers, transformer layers (both encoder and decoder), and the un-embedding layer, while highlighting how these components work together to transform text into vector representations and back into a probability distribution over tokens.\n\nSection 12 title should be Tokenization, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the process and importance of tokenization in the Transformer architecture, detailing how text is converted to tokens, the role of a tokenizer, and the handling of out-of-vocabulary tokens.\n\nSection 13 title should be Embedding, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how tokens are transformed into embedding vectors using a lookup table and how these vectors are combined with positional encodings to form input sequences in the Transformer architecture.\n\nSection 14 title should be Un-embedding, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the function and purpose of an un-embedding layer in transformer architectures, including its relationship with the embedding layer and the concept of weight tying.\n\nSection 15 title should be Positional encoding, and this section should contain approximately (500 words):\nIn this section, you should follow this prompt: Explain the concept of positional encoding in transformer models, highlighting how it provides information about token positions within a sequence and enables the model to handle relative positions and attention mechanisms effectively.\n\nSection 16 title should be Encoder-decoder (overview), and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how the encoder-decoder architecture in the original transformer model processes input tokens and generates output by utilizing self-attention and cross-attention mechanisms, while also incorporating feed-forward networks, residual connections, and layer normalization.\n\nSection 17 title should be Feedforward network, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain the structure and function of the feedforward network modules in a Transformer, including the role of weight matrices, bias vectors, activation functions, and how the intermediate size compares to the embedding size.\n\nSection 18 title should be Scaled dot-product attention, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the concept of scaled dot-product attention in the context of transformer models, highlighting its function, mathematical formulation, and significance in improving the efficiency and effectiveness of attention mechanisms in deep learning architectures.\n\nSection 19 title should be Attention head, and this section should contain approximately (700 words):\nIn this section, you should follow this prompt: Explain how the attention head in the Transformer architecture utilizes scaled dot-product attention to compute attention weights and output vectors, detailing the role of query, key, and value matrices, as well as the significance of softmax normalization and matrix operations in the process.\n\nSection 20 title should be Multiheaded attention, and this section should contain approximately (400 words):\nIn this section, you should follow this prompt: Explain the concept of multiheaded attention in transformer models, highlighting how different attention heads work in parallel to capture various relevance relations and improve the model's ability to understand complex token dependencies.\n\nSection 21 title should be Masked attention, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain how masked attention is implemented in Transformer architectures to ensure autoregressive properties, including the role and structure of causal masking, and discuss any variations or uncommon uses of mask matrices, such as those used in XLNet.\n\nSection 22 title should be Encoder, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the structure and function of the encoder in a transformer architecture, detailing how the self-attention mechanism and feed-forward network work together to process input vectors and produce output sequences.\n\nSection 23 title should be Decoder, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the role and components of the decoder in a transformer architecture, focusing on how it uses causally masked self-attention and cross-attention mechanisms to generate output sequences while preventing reverse information flow.\n\nSection 24 title should be Adapted architectures, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how large language models adapt the original transformer architecture by using either the encoder or decoder components, highlighting examples like GPT and BERT.\n\nSection 25 title should be Full transformer architecture, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Describe the components and functionality of the full transformer architecture, explaining how each part contributes to its overall operation in processing and generating language.\n\nSection 26 title should be Sublayers, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the structure and purpose of the sublayers in Transformer encoder and decoder layers, highlighting the role of residual connections and layer normalization conventions in ensuring numerical stability and training efficiency.\n\nSection 27 title should be Pseudocode, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the pseudocode for the pre-LN encoder-decoder Transformer architecture, detailing how the encoder and decoder processes work, including the roles of tokenization, embedding, multi-headed attention, and layer normalization.\n\nSection 28 title should be Terminology, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain the various Transformer architecture variations, including encoder-only, decoder-only, encoder-decoder, prefixLM, and mixed seq2seq models, highlighting their primary functions and typical use cases in deep learning applications.\n\nSection 29 title should be Subsequent work, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the advancements and variations of the original Transformer architecture that have emerged in the field of deep learning, highlighting key innovations and their impact on various applications.\n\nSection 30 title should be Alternative activation functions, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the evolution and variety of activation functions used in transformer architectures, highlighting how alternatives like SwiGLU and GELU have been integrated with Gated Linear Units to enhance performance in models such as Llama, PaLM, GPT-1, and BERT.\n\nSection 31 title should be Alternative normalizations, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explore the different normalization techniques that can be used in Transformer architectures, such as RMSNorm, CapsuleNorm, ScaleNorm, and FixNorm, and discuss their applications and advantages compared to the traditional LayerNorm.\n\nSection 32 title should be Alternative positional encodings, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the various alternative methods of positional encoding in Transformers, including learned positional encodings and the impact of causal masking on positional encoding capabilities.\n\nSection 33 title should be RoPE, and this section should contain approximately (400 words):\nIn this section, you should follow this prompt: Explain how rotary positional embedding (RoPE) is used in transformer architectures to encode positional information using trigonometric transformations and complex numbers, highlighting its advantage in maintaining relative positional relationships between vectors.\n\nSection 34 title should be ALiBi, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explain how ALiBi (Attention with Linear Biases) enhances the attention mechanism in transformer architectures by incorporating a linear bias matrix, and discuss its advantages in terms of pretraining and compatibility with various positional encoders.\n\nSection 35 title should be Relative Position Encodings, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how Relative Position Encodings differ from absolute positional encodings in transformer architectures, highlighting the use of a Toeplitz matrix and its implications for attention mechanisms.\n\nSection 36 title should be Efficient implementation, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss how the transformer model has been efficiently implemented in popular deep learning frameworks and highlight the role of Hugging Face's Transformers library in providing transformer-based architectures and pretrained models.\n\nSection 37 title should be KV caching, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how KV caching optimizes the inference process in autoregressive transformers, particularly in scenarios with repeated prompt use, and discuss its benefits for applications like online chatbots.\n\nSection 38 title should be FlashAttention, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain the advancements and performance improvements of FlashAttention-2 compared to the original FlashAttention and standard attention implementations, including its impact on handling longer context lengths and its efficiency on GPUs.\n\nSection 39 title should be Multi-Query Attention, and this section should contain approximately (200 words):\nIn this section, you should follow this prompt: Explain how Multi-Query Attention modifies the traditional multiheaded attention mechanism in transformer models and discuss its impact on model quality, training speed, and inference speed, while also describing the concept of grouped-query attention and its relation to Multihead Latent Attention.\n\nSection 40 title should be Speculative decoding, and this section should contain approximately (400 words):\nIn this section, you should follow this prompt: Explain the concept of speculative decoding in Transformer models, detailing how it accelerates token decoding by using a smaller model or heuristic for initial token generation and a larger model for verification, and how this method balances speed and accuracy in both greedy and non-greedy decoding scenarios.\n\nSection 41 title should be Sub-quadratic transformers, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explore the advancements and techniques in sub-quadratic transformers that aim to improve efficiency in processing long inputs across various domains, highlighting notable architectures and benchmarks such as the Swin Transformer, SepTr, and Long Range Arena.\n\nSection 42 title should be Alternative attention graphs, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explore how alternative attention graphs, such as those used in Reformer and BigBird, address the computational inefficiencies of standard attention mechanisms in transformers by reducing complexity and memory requirements.\n\nSection 43 title should be Random Feature Attention, and this section should contain approximately (500 words):\nIn this section, you should follow this prompt: Explain how Random Feature Attention approximates traditional attention mechanisms in transformers using Fourier random features, and describe its computational advantages and implementation details, including its linear time complexity and the specific role of the Performer model.\n\nSection 44 title should be Multimodality, and this section should contain approximately (300 words):\nIn this section, you should follow this prompt: Explore how Transformers are adapted for multimodal applications beyond text, including their use in vision, speech, and image generation, highlighting specific models and techniques like Vision Transformers, Conformer, Whisper, and various image generation architectures.\n\nSection 45 title should be Applications, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain how the transformer architecture has been successfully applied in various fields, highlighting its impact on natural language processing tasks and its extension to other domains such as biological sequence analysis and chess evaluation.\n\nSection 46 title should be See also, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Discuss the relationship between the Transformer architecture and related machine learning models, highlighting how they differ in design and application for various tasks such as language processing, vision, and multimodal data integration.\n\nSection 47 title should be Notes, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Explain the key points, references, and additional information that support the understanding and application of the Transformer architecture in deep learning, ensuring clarity and depth for readers seeking further insights.\n\nSection 48 title should be References, and this section should contain approximately (100 words):\nIn this section, you should follow this prompt: Summarize and discuss key academic papers and influential works that have contributed to the development and understanding of the Transformer architecture in deep learning.\n\nTotal article length should be approximately 10300 words. Ensure smooth transitions between sections and maintain a coherent narrative throughout. Each section should flow naturally into the next, building a complete and informative Wikipedia article. Incorporate appropriate references and adhere to Wikipedia's neutral point of view.", "input": "", "output": "Introduction\nThe transformer is a deep learning architecture that was developed by researchers at Google and is based on the multi-head attention mechanism, which was proposed in the 2017 paper \"Attention Is All You Need\". Text is converted to numerical representations called tokens, and each token is converted into a vector via lookup from a word embedding table. At each layer, each token is then contextualized within the scope of the context window with other (unmasked) tokens via a parallel multi-head attention mechanism, allowing the signal for key tokens to be amplified and less important tokens to be diminished.\nTransformers have the advantage of having no recurrent units, therefore requiring less training time than earlier recurrent neural architectures (RNNs) such as long short-term memory (LSTM). Later variations have been widely adopted for training large language models (LLM) on large (language) datasets.\n\nTransformers were first developed as an improvement over previous architectures for machine translation, but have found many applications since. They are used in large-scale natural language processing, computer vision (vision transformers), reinforcement learning, audio, multimodal learning, robotics, and even playing chess. It has also led to the development of pre-trained systems, such as generative pre-trained transformers (GPTs) and BERT (bidirectional encoder representations from transformers).History\nPredecessors\nFor many years, sequence modelling and generation was done by using plain recurrent neural networks (RNNs). A well-cited early example was the Elman network (1990). In theory, the information from one token can propagate arbitrarily far down the sequence, but in practice the vanishing-gradient problem leaves the model's state at the end of a long sentence without precise, extractable information about preceding tokens.\nA key breakthrough was LSTM (1995), a RNN which used various innovations to overcome the vanishing gradient problem, allowing efficient learning of long-sequence modelling. One key innovation was the use of an attention mechanism which used neurons that multiply the outputs of other neurons, so-called multiplicative units. Neural networks using multiplicative units were later called sigma-pi networks or higher-order networks. LSTM became the standard architecture for long sequence modelling until the 2017 publication of Transformers.\nHowever, LSTM still used sequential processing, like most other RNNs. Specifically, RNNs operate one token at a time from first to last; they cannot operate in parallel over all tokens in a sequence. \nModern Transformers overcome this problem, but unlike RNNs, they require computation time that is quadratic in the size of the context window. The linearly scaling fast weight controller (1992) learns to compute a weight matrix for further processing depending on the input. One of its two networks has \"fast weights\" or \"dynamic links\" (1981). A slow neural network learns by gradient descent to generate keys and values for computing the weight changes of the fast neural network which computes answers to queries. This was later shown to be equivalent to the unnormalized linear Transformer.Attention with seq2seq\nThe idea of encoder-decoder sequence transduction had been developed in the early 2010s (see previous papers). The papers most commonly cited as the originators that produced seq2seq are two concurrently published papers from 2014.\nA 380M-parameter model for machine translation uses two long short-term memories (LSTM). Its architecture consists of two parts. The encoder is an LSTM that takes in a sequence of tokens and turns it into a vector. The decoder is another LSTM that converts the vector into a sequence of tokens. Similarly, another 130M-parameter model used gated recurrent units (GRU) instead of LSTM. Later research showed that GRUs are neither better nor worse than LSTMs for seq2seq.\nThese early seq2seq models had no attention mechanism, and the state vector is accessible only after the last word of the source text was processed. Although in theory such a vector retains the information about the whole original sentence, in practice the information is poorly preserved. This is because the input is processed sequentially by one recurrent network into a fixed-size output vector, which is then processed by another recurrent network into an output. If the input is long, then the output vector would not be able to contain all relevant information, degrading the output. As evidence, reversing the input sentence improved seq2seq translation.\nThe RNNsearch model introduced an attention mechanism to seq2seq for machine translation to solve the bottleneck problem (of the fixed-size output vector), allowing the model to process long-distance dependencies more easily. The name is because it \"emulates searching through a source sentence during decoding a translation\".\nThe relative performances were compared between global (that of RNNsearch) and local (sliding window) attention model architectures for machine translation, finding that mixed attention had higher quality than global attention, while local attention reduced translation time.\nIn 2016, Google Translate was revamped to Google Neural Machine Translation, which replaced the previous model based on statistical machine translation. The new model was a seq2seq model where the encoder and the decoder were both 8 layers of bidirectional LSTM. It took nine months to develop, and it outperformed the statistical approach, which took ten years to develop.Parallelizing attention\nSeq2seq models with attention (including self-attention) still suffered from the same issue with recurrent networks, which is that they are hard to parallelize, which prevented them from being accelerated on GPUs. In 2016, decomposable attention applied a self-attention mechanism to feedforward networks, which are easy to parallelize, and achieved SOTA result in textual entailment with an order of magnitude fewer parameters than LSTMs. One of its authors, Jakob Uszkoreit, suspected that attention without recurrence is sufficient for language translation, thus the title \"attention is all you need\". That hypothesis was against conventional wisdom at the time, and even his father Hans Uszkoreit, a well-known computational linguist, was skeptical. In the same year, self-attention (called intra-attention or intra-sentence attention) was proposed for LSTMs.\nIn 2017, the original (100M-sized) encoder-decoder transformer model was proposed in the \"Attention is all you need\" paper. At the time, the focus of the research was on improving seq2seq for machine translation, by removing its recurrence to process all tokens in parallel, but preserving its dot-product attention mechanism to keep its text processing performance. This led to the introduction of a multi-head attention model that was easier to parallelize due to the use of independent heads and the lack of recurrence. Its parallelizability was an important factor to its widespread use in large neural networks.AI boom era\nAlready in spring 2017, even before the \"Attention is all you need\" preprint was published, one of the co-authors applied the \"decoder-only\" variation of the architecture to generate fictitious Wikipedia articles. Transformer architecture is now used alongside many generative models that contribute to the ongoing AI boom.\nIn language modelling, ELMo (2018) was a bi-directional LSTM that produces contextualized word embeddings, improving upon the line of research from bag of words and word2vec. It was followed by BERT (2018), an encoder-only Transformer model. In 2019 October, Google started using BERT to process search queries. In 2020, Google Translate replaced the previous RNN-encoder\u2013RNN-decoder model by a Transformer-encoder\u2013RNN-decoder model.\nStarting in 2018, the OpenAI GPT series of decoder-only Transformers became state of the art in natural language generation. In 2022, a chatbot based on GPT-3, ChatGPT, became unexpectedly popular, triggering a boom around large language models.\nSince 2020, Transformers have been applied in modalities beyond text, including the vision transformer, speech recognition, robotics, and multimodal. The vision transformer, in turn, stimulated new developments in convolutional neural networks. Image and video generators like DALL-E (2021), Stable Diffusion 3 (2024), and Sora (2024), use Transformers to analyse input data (like text prompts) by breaking it down into \"tokens\" and then calculating the relevance between each token using self-attention, which helps the model understand the context and relationships within the data.Training\nMethods for stabilizing training\nThe plain transformer architecture had difficulty converging. In the original paper the authors recommended using learning rate warmup. That is, the learning rate should linearly scale up from 0 to maximal value for the first part of the training (usually recommended to be 2% of the total number of training steps), before decaying again.\nA 2020 paper found that using layer normalization before (instead of after) multiheaded attention and feedforward layers stabilizes training, not requiring learning rate warmup.Pretrain-finetune\nTransformers typically are first pretrained by self-supervised learning on a large generic dataset, followed by supervised fine-tuning on a small task-specific dataset. The pretrain dataset is typically an unlabeled large corpus, such as The Pile. Tasks for pretraining and fine-tuning commonly include:\n\nlanguage modeling\nnext-sentence prediction\nquestion answering\nreading comprehension\nsentiment analysis\nparaphrasing\nThe T5 transformer report documents a large number of natural language pretraining tasks. Some examples are:\n\nrestoring or repairing incomplete or corrupted text. For example, the input, \"Thank you\u202f~~\u202fme to your party\u202f~~\u202fweek\", might generate the output, \"Thank you for inviting me to your party last week\".\ntranslation between natural languages (machine translation)\njudging the pragmatic acceptability of natural language. For example, the following sentence might be judged \"not acceptable\", because even though it is syntactically well-formed, it is improbable in ordinary human usage: The course is jumping well.\nNote that while each of these tasks is trivial or obvious for human native speakers of the language (or languages), they have typically proved challenging for previous generations of machine learning architecture.Tasks\nIn general, there are 3 classes of language modelling tasks: \"masked\", \"autoregressive\", and \"prefixLM\". These classes are independent of a specific modeling architecture such as Transformer, but they are often discussed in the context of Transformer.\nIn a masked task, one or more of the tokens is masked out, and the model would produce a probability distribution predicting what the masked-out tokens are based on the context. The loss function for the task is typically sum of log-perplexities for the masked-out tokens: \n  \n    \n      \n        \n          Loss\n        \n        =\n        \u2212\n        \n          \u2211\n          \n            t\n            \u2208\n            \n              masked tokens\n            \n          \n        \n        ln\n        \u2061\n        (\n        \n          probability of \n        \n        t\n        \n           conditional on its context\n        \n        )\n      \n    \n    {\\displaystyle {\\text{Loss}}=-\\sum _{t\\in {\\text{masked tokens}}}\\ln({\\text{probability of }}t{\\text{ conditional on its context}})}\n  \nand the model is trained to minimize this loss function. The BERT series of models are trained for masked token prediction and another task.\nIn an autoregressive task, the entire sequence is masked at first, and the model produces a probability distribution for the first token. Then the first token is revealed and the model predicts the second token, and so on. The loss function for the task is still typically the same. The GPT series of models are trained by autoregressive tasks.\nIn a prefixLM task, the sequence is divided into two parts. The first part is presented as context, and the model predicts the first token of the second part. Then that would be revealed, and the model predicts the second token, and so on. The loss function for the task is still typically the same. The T5 series of models are trained by prefixLM tasks.\nNote that \"masked\" as in \"masked language modelling\" is not \"masked\" as in \"masked attention\", and \"prefixLM\" (prefix language modeling) is not \"prefixLM\" (prefix language model).Architecture\nAll transformers have the same primary components:\n\nTokenizers, which convert text into tokens.\nEmbedding layer, which converts tokens and positions of the tokens into vector representations.\nTransformer layers, which carry out repeated transformations on the vector representations, extracting more and more linguistic information. These consist of alternating attention and feedforward layers. There are two major types of transformer layers: encoder layers and decoder layers, with further variants.\nUn-embedding layer, which converts the final vector representations back to a probability distribution over the tokens.\nThe following description follows exactly the Transformer as described in the original paper. There are variants, described in the following section.\nBy convention, we write all vectors as row vectors. This, for example, means that pushing a vector through a linear layer means multiplying it by a weight matrix on the right, as \n  \n    \n      \n        x\n        W\n      \n    \n    {\\displaystyle xW}\n  \n.Tokenization\nAs the Transformer architecture natively processes numerical data, not text, there must be a translation between text and tokens. A token is an integer that represents a character, or a short segment of characters. On the input side, the input text is parsed into a token sequence. Similarly, on the output side, the output tokens are parsed back to text. The module doing the conversion between texts and token sequences is a tokenizer.\nThe set of all tokens is the vocabulary of the tokenizer, and its size is the vocabulary size \n  \n    \n      \n        \n          n\n          \n            vocabulary\n          \n        \n      \n    \n    {\\displaystyle n_{\\text{vocabulary}}}\n  \n. When faced with tokens outside the vocabulary, typically a special token is used, written as \"[UNK]\" for \"unknown\".\nSome commonly used tokenizers are byte pair encoding, WordPiece, and SentencePiece.Embedding\nEach token is converted into an embedding vector via a lookup table. Equivalently stated, it multiplies a one-hot representation of the token by an embedding matrix \n  \n    \n      \n        M\n      \n    \n    {\\displaystyle M}\n  \n. For example, if the input token is \n  \n    \n      \n        3\n      \n    \n    {\\displaystyle 3}\n  \n, then the one-hot representation is \n  \n    \n      \n        [\n        0\n        ,\n        0\n        ,\n        0\n        ,\n        1\n        ,\n        0\n        ,\n        0\n        ,\n        \u2026\n        ]\n      \n    \n    {\\displaystyle [0,0,0,1,0,0,\\dots ]}\n  \n, and its embedding vector is\n  \n    \n      \n        \n          E\n          m\n          b\n          e\n          d\n        \n        (\n        3\n        )\n        =\n        [\n        0\n        ,\n        0\n        ,\n        0\n        ,\n        1\n        ,\n        0\n        ,\n        0\n        ,\n        \u2026\n        ]\n        M\n      \n    \n    {\\displaystyle \\mathrm {Embed} (3)=[0,0,0,1,0,0,\\dots ]M}\n  \nThe token embedding vectors are added to their respective positional encoding vectors (see below), producing the sequence of input vectors. \nThe number of dimensions in an embedding vector is called hidden size or embedding size and written as \n  \n    \n      \n        \n          d\n          \n            emb\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{emb}}}\n  \n. This size is written as \n  \n    \n      \n        \n          d\n          \n            model\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{model}}}\n  \n in the original Transformer paper.Un-embedding\nAn un-embedding layer is almost the reverse of an embedding layer. Whereas an embedding layer converts a token into a vector, an un-embedding layer converts a vector into a probability distribution over tokens.\nThe un-embedding layer is a linear-softmax layer:\n  \n    \n      \n        \n          U\n          n\n          E\n          m\n          b\n          e\n          d\n        \n        (\n        x\n        )\n        =\n        \n          s\n          o\n          f\n          t\n          m\n          a\n          x\n        \n        (\n        x\n        W\n        +\n        b\n        )\n      \n    \n    {\\displaystyle \\mathrm {UnEmbed} (x)=\\mathrm {softmax} (xW+b)}\n  \nThe matrix has shape \n  \n    \n      \n        (\n        \n          d\n          \n            emb\n          \n        \n        ,\n        \n          n\n          \n            vocabulary\n          \n        \n        )\n      \n    \n    {\\displaystyle (d_{\\text{emb}},n_{\\text{vocabulary}})}\n  \n. The embedding matrix \n  \n    \n      \n        M\n      \n    \n    {\\displaystyle M}\n  \n and the un-embedding matrix \n  \n    \n      \n        W\n      \n    \n    {\\displaystyle W}\n  \n are sometimes required to be transposes of each other, a practice called weight tying.Positional encoding\nA positional encoding is a fixed-size vector representation of the relative positions of tokens within a sequence: it provides the transformer model with information about where the words are in the input sequence. This shall induce a bias towards the order of the input sequence, so that, for example, the input sequence \"man bites dog\" is processed differently from \"dog bites man\".\nThe positional encoding is defined as a function of type \n  \n    \n      \n        f\n        :\n        \n          R\n        \n        \u2192\n        \n          \n            R\n          \n          \n            d\n          \n        \n        ;\n        d\n        \u2208\n        \n          Z\n        \n        ,\n        d\n        >\n        0\n      \n    \n    {\\displaystyle f:\\mathbb {R} \\to \\mathbb {R} ^{d};d\\in \\mathbb {Z} ,d>0}\n  \n, where \n  \n    \n      \n        d\n      \n    \n    {\\displaystyle d}\n  \n is a positive even integer. The full positional encoding defined in the original paper is:\n  \n    \n      \n        (\n        f\n        (\n        t\n        \n          )\n          \n            2\n            k\n          \n        \n        ,\n        f\n        (\n        t\n        \n          )\n          \n            2\n            k\n            +\n            1\n          \n        \n        )\n        =\n        (\n        sin\n        \u2061\n        (\n        \u03b8\n        )\n        ,\n        cos\n        \u2061\n        (\n        \u03b8\n        )\n        )\n        \n        \u2200\n        k\n        \u2208\n        {\n        0\n        ,\n        1\n        ,\n        \u2026\n        ,\n        d\n        \n          /\n        \n        2\n        \u2212\n        1\n        }\n      \n    \n    {\\displaystyle (f(t)_{2k},f(t)_{2k+1})=(\\sin(\\theta ),\\cos(\\theta ))\\quad \\forall k\\in \\{0,1,\\ldots ,d/2-1\\}}\n  \nwhere \n  \n    \n      \n        \u03b8\n        =\n        \n          \n            t\n            \n              r\n              \n                k\n              \n            \n          \n        \n        ,\n        r\n        =\n        \n          N\n          \n            2\n            \n              /\n            \n            d\n          \n        \n      \n    \n    {\\displaystyle \\theta ={\\frac {t}{r^{k}}},r=N^{2/d}}\n  \n.\nHere, \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is a free parameter that should be significantly larger than the biggest \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n  \n that would be input into the positional encoding function. The original paper uses \n  \n    \n      \n        N\n        =\n        10000\n      \n    \n    {\\displaystyle N=10000}\n  \n.\nThe function is in a simpler form when written as a complex function of type \n  \n    \n      \n        f\n        :\n        \n          R\n        \n        \u2192\n        \n          \n            C\n          \n          \n            d\n            \n              /\n            \n            2\n          \n        \n      \n    \n    {\\displaystyle f:\\mathbb {R} \\to \\mathbb {C} ^{d/2}}\n  \n\n  \n    \n      \n        f\n        (\n        t\n        )\n        =\n        \n          \n            (\n            \n              e\n              \n                i\n                t\n                \n                  /\n                \n                \n                  r\n                  \n                    k\n                  \n                \n              \n            \n            )\n          \n          \n            k\n            =\n            0\n            ,\n            1\n            ,\n            \u2026\n            ,\n            \n              \n                d\n                2\n              \n            \n            \u2212\n            1\n          \n        \n      \n    \n    {\\displaystyle f(t)=\\left(e^{it/r^{k}}\\right)_{k=0,1,\\ldots ,{\\frac {d}{2}}-1}}\n  \nwhere \n  \n    \n      \n        r\n        =\n        \n          N\n          \n            2\n            \n              /\n            \n            d\n          \n        \n      \n    \n    {\\displaystyle r=N^{2/d}}\n  \n.\nThe main reason for using this positional encoding function is that using it, shifts are linear transformations:\n  \n    \n      \n        f\n        (\n        t\n        +\n        \u0394\n        t\n        )\n        =\n        \n          d\n          i\n          a\n          g\n        \n        (\n        f\n        (\n        \u0394\n        t\n        )\n        )\n        f\n        (\n        t\n        )\n      \n    \n    {\\displaystyle f(t+\\Delta t)=\\mathrm {diag} (f(\\Delta t))f(t)}\n  \nwhere \n  \n    \n      \n        \u0394\n        t\n        \u2208\n        \n          R\n        \n      \n    \n    {\\displaystyle \\Delta t\\in \\mathbb {R} }\n  \n is the distance one wishes to shift. This allows the transformer to take any encoded position, and find the encoding of the position n-steps-ahead or n-steps-behind, by a matrix multiplication.\nBy taking a linear sum, any convolution can also be implemented as linear transformations:\n  \n    \n      \n        \n          \u2211\n          \n            j\n          \n        \n        \n          c\n          \n            j\n          \n        \n        f\n        (\n        t\n        +\n        \u0394\n        \n          t\n          \n            j\n          \n        \n        )\n        =\n        \n          (\n          \n            \n              \u2211\n              \n                j\n              \n            \n            \n              c\n              \n                j\n              \n            \n            \n            \n              d\n              i\n              a\n              g\n            \n            (\n            f\n            (\n            \u0394\n            \n              t\n              \n                j\n              \n            \n            )\n            )\n          \n          )\n        \n        f\n        (\n        t\n        )\n      \n    \n    {\\displaystyle \\sum _{j}c_{j}f(t+\\Delta t_{j})=\\left(\\sum _{j}c_{j}\\,\\mathrm {diag} (f(\\Delta t_{j}))\\right)f(t)}\n  \nfor any constants \n  \n    \n      \n        \n          c\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle c_{j}}\n  \n. This allows the transformer to take any encoded position and find a linear sum of the encoded locations of its neighbors. This sum of encoded positions, when fed into the attention mechanism, would create attention weights on its neighbors, much like what happens in a convolutional neural network language model. In the author's words, \"we hypothesized it would allow the model to easily learn to attend by relative position.\"\nIn typical implementations, all operations are done over the real numbers, not the complex numbers, but since complex multiplication can be implemented as real 2-by-2 matrix multiplication, this is a mere notational difference.Encoder-decoder (overview)\nLike earlier seq2seq models, the original transformer model used an encoder-decoder architecture. The encoder consists of encoding layers that process all the input tokens together one layer after another, while the decoder consists of decoding layers that iteratively process the encoder's output and the decoder's output tokens so far.\nThe purpose of each encoder layer is to create contextualized representations of the tokens, where each representation corresponds to a token that \"mixes\" information from other input tokens via self-attention mechanism. Each decoder layer contains two attention sublayers: (1) cross-attention for incorporating the output of encoder (contextualized input token representations), and (2) self-attention for \"mixing\" information among the input tokens to the decoder (i.e. the tokens generated so far during inference time).\nBoth the encoder and decoder layers have a feed-forward neural network for additional processing of their outputs and contain residual connections and layer normalization steps. These feed-forward layers contain most of the parameters in a Transformer model.Feedforward network\nThe feedforward network (FFN) modules in a Transformer are 2-layered multilayer perceptrons:\n  \n    \n      \n        \n          F\n          F\n          N\n        \n        (\n        x\n        )\n        =\n        \u03d5\n        (\n        x\n        \n          W\n          \n            (\n            1\n            )\n          \n        \n        +\n        \n          b\n          \n            (\n            1\n            )\n          \n        \n        )\n        \n          W\n          \n            (\n            2\n            )\n          \n        \n        +\n        \n          b\n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathrm {FFN} (x)=\\phi (xW^{(1)}+b^{(1)})W^{(2)}+b^{(2)}}\n  \nwhere \n  \n    \n      \n        \n          W\n          \n            (\n            1\n            )\n          \n        \n      \n    \n    {\\displaystyle W^{(1)}}\n  \n and \n  \n    \n      \n        \n          W\n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle W^{(2)}}\n  \n are weight matrices and \n  \n    \n      \n        \n          b\n          \n            (\n            1\n            )\n          \n        \n      \n    \n    {\\displaystyle b^{(1)}}\n  \n and  \n  \n    \n      \n        \n          b\n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle b^{(2)}}\n  \n are bias vectors, and \n  \n    \n      \n        \u03d5\n      \n    \n    {\\displaystyle \\phi }\n  \n is its activation function. The original Transformer used ReLU activation.\nThe number of neurons in the middle layer is called intermediate size (GPT), filter size (BERT), or feedforward size (BERT). It is typically larger than the embedding size. For example, in both GPT-2 series and BERT series, the intermediate size of a model is 4 times its embedding size: \n  \n    \n      \n        \n          d\n          \n            ffn\n          \n        \n        =\n        4\n        \n          d\n          \n            emb\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{ffn}}=4d_{\\text{emb}}}\n  \n.Scaled dot-product attention\nAttention head\nThe attention mechanism used in the Transformer architecture are scaled dot-product attention units. For each unit, the transformer model learns three weight matrices: the query weights \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n, the key weights \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle W^{K}}\n  \n, and the value weights \n  \n    \n      \n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{V}}\n  \n.\nThe module takes three sequences, a query sequence, a key sequence, and a value sequence. The query sequence is a sequence of length \n  \n    \n      \n        \n          \u2113\n          \n            seq, query\n          \n        \n      \n    \n    {\\displaystyle \\ell _{\\text{seq, query}}}\n  \n, and each entry is a vector of dimension \n  \n    \n      \n        \n          d\n          \n            emb, query\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{emb, query}}}\n  \n. Similarly for the key and value sequences.\nFor each vector \n  \n    \n      \n        \n          x\n          \n            i\n            ,\n            \n              query\n            \n          \n        \n      \n    \n    {\\displaystyle x_{i,{\\text{query}}}}\n  \n in the query sequence, it is multiplied by a matrix \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n to produce a query vector \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n        =\n        \n          x\n          \n            i\n            ,\n            \n              query\n            \n          \n        \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle q_{i}=x_{i,{\\text{query}}}W^{Q}}\n  \n. The matrix of all query vectors is the query matrix:\n  \n    \n      \n        Q\n        =\n        \n          X\n          \n            query\n          \n        \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle Q=X_{\\text{query}}W^{Q}}\n  \nSimilarly, we construct the key matrix \n  \n    \n      \n        K\n        =\n        \n          X\n          \n            key\n          \n        \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle K=X_{\\text{key}}W^{K}}\n  \n and the value matrix \n  \n    \n      \n        V\n        =\n        \n          X\n          \n            value\n          \n        \n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle V=X_{\\text{value}}W^{V}}\n  \n.\nIt is usually the case that all \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n        ,\n        \n          W\n          \n            K\n          \n        \n        ,\n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{Q},W^{K},W^{V}}\n  \n are square matrices, meaning \n  \n    \n      \n        \n          d\n          \n            emb, query\n          \n        \n        =\n        \n          d\n          \n            query\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{emb, query}}=d_{\\text{query}}}\n  \n, etc.\nAttention weights are calculated using the query and key vectors: the attention weight \n  \n    \n      \n        \n          a\n          \n            i\n            j\n          \n        \n      \n    \n    {\\displaystyle a_{ij}}\n  \n from token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n to token \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n is the dot product between \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle q_{i}}\n  \n and \n  \n    \n      \n        \n          k\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle k_{j}}\n  \n. The attention weights are divided by the square root of the dimension of the key vectors, \n  \n    \n      \n        \n          \n            \n              d\n              \n                k\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\sqrt {d_{k}}}}\n  \n, which stabilizes gradients during training, and passed through a softmax which normalizes the weights. The fact that \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n and \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle W^{K}}\n  \n are different matrices allows attention to be non-symmetric: if token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n attends to token \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n (i.e. \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n        \u22c5\n        \n          k\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle q_{i}\\cdot k_{j}}\n  \n is large), this does not necessarily mean that token \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n will attend to token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n (i.e. \n  \n    \n      \n        \n          q\n          \n            j\n          \n        \n        \u22c5\n        \n          k\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle q_{j}\\cdot k_{i}}\n  \n could be small). The output of the attention unit for token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n is the weighted sum of the value vectors of all tokens, weighted by \n  \n    \n      \n        \n          a\n          \n            i\n            j\n          \n        \n      \n    \n    {\\displaystyle a_{ij}}\n  \n, the attention from token \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n to each token.\nThe attention calculation for all tokens can be expressed as one large matrix calculation using the softmax function, which is useful for training due to computational matrix operation optimizations that quickly compute matrix operations. The matrices \n  \n    \n      \n        Q\n      \n    \n    {\\displaystyle Q}\n  \n, \n  \n    \n      \n        K\n      \n    \n    {\\displaystyle K}\n  \n and \n  \n    \n      \n        V\n      \n    \n    {\\displaystyle V}\n  \n are defined as the matrices where the \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \nth rows are vectors \n  \n    \n      \n        \n          q\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle q_{i}}\n  \n, \n  \n    \n      \n        \n          k\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle k_{i}}\n  \n, and \n  \n    \n      \n        \n          v\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle v_{i}}\n  \n respectively. Then we can represent the attention as\n  \n    \n      \n        \n          \n            \n              \n                \n                  Attention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    \n                      \n                        Q\n                        \n                          K\n                          \n                            \n                              T\n                            \n                          \n                        \n                      \n                      \n                        \n                          d\n                          \n                            k\n                          \n                        \n                      \n                    \n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\end{aligned}}}\n  \n\nwhere the softmax is applied over each of the rows of the matrix.\nThe number of dimensions in a query vector is query size \n  \n    \n      \n        \n          d\n          \n            query\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{query}}}\n  \n and similarly for the key size \n  \n    \n      \n        \n          d\n          \n            key\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{key}}}\n  \n and value size \n  \n    \n      \n        \n          d\n          \n            value\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{value}}}\n  \n. The output dimension of an attention head is its head dimension \n  \n    \n      \n        \n          d\n          \n            head\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{head}}}\n  \n. The attention mechanism requires the following three equalities to hold:\n  \n    \n      \n        \n          \u2113\n          \n            seq, key\n          \n        \n        =\n        \n          \u2113\n          \n            seq, value\n          \n        \n        ,\n        \n        \n          d\n          \n            query\n          \n        \n        =\n        \n          d\n          \n            key\n          \n        \n        ,\n        \n        \n          d\n          \n            value\n          \n        \n        =\n        \n          d\n          \n            head\n          \n        \n      \n    \n    {\\displaystyle \\ell _{\\text{seq, key}}=\\ell _{\\text{seq, value}},\\;d_{\\text{query}}=d_{\\text{key}},\\;d_{\\text{value}}=d_{\\text{head}}}\n  \nbut is otherwise unconstrained.\nIf the attention head is used in a self-attention fashion, then \n  \n    \n      \n        \n          X\n          \n            query\n          \n        \n        =\n        \n          X\n          \n            key\n          \n        \n        =\n        \n          X\n          \n            value\n          \n        \n      \n    \n    {\\displaystyle X_{\\text{query}}=X_{\\text{key}}=X_{\\text{value}}}\n  \n. If the attention head is used in a cross-attention fashion, then usually \n  \n    \n      \n        \n          X\n          \n            query\n          \n        \n        \u2260\n        \n          X\n          \n            key\n          \n        \n        =\n        \n          X\n          \n            value\n          \n        \n      \n    \n    {\\displaystyle X_{\\text{query}}\\neq X_{\\text{key}}=X_{\\text{value}}}\n  \n. It is theoretically possible for all three to be different, but that is rarely the case in practice.Multiheaded attention\nOne set of \n  \n    \n      \n        \n          (\n          \n            \n              W\n              \n                Q\n              \n            \n            ,\n            \n              W\n              \n                K\n              \n            \n            ,\n            \n              W\n              \n                V\n              \n            \n          \n          )\n        \n      \n    \n    {\\displaystyle \\left(W^{Q},W^{K},W^{V}\\right)}\n  \n matrices is called an attention head, and each layer in a transformer model has multiple attention heads. While each attention head attends to the tokens that are relevant to each token, multiple attention heads allow the model to do this for different definitions of \"relevance\". Specifically, the query and key projection matrices, \n  \n    \n      \n        \n          W\n          \n            Q\n          \n        \n      \n    \n    {\\displaystyle W^{Q}}\n  \n and \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n      \n    \n    {\\displaystyle W^{K}}\n  \n , which are involved in the attention score computation, defines the \"relevance\". Meanwhile, the value projection matrix \n  \n    \n      \n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{V}}\n  \n, in combination with the part of the output projection matrix \n  \n    \n      \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle W^{O}}\n  \n, determines how the attended tokens influence what information is passed to subsequent layers and ultimately the output logits. In addition, the scope of attention, or the range of token relationships captured by each attention head, can expand as tokens pass through successive layers. This allows the model to capture more complex and long-range dependencies in deeper layers. Many transformer attention heads encode relevance relations that are meaningful to humans. For example, some attention heads can attend mostly to the next word, while others mainly attend from verbs to their direct objects. The computations for each attention head can be performed in parallel, which allows for fast processing. The outputs for the attention layer are concatenated to pass into the feed-forward neural network layers.\nConcretely, let the multiple attention heads be indexed by \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n, then we have\n  \n    \n      \n        \n          MultiheadedAttention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          \n            Concat\n          \n          \n            i\n            \u2208\n            [\n            \n              n\n              \n                heads\n              \n            \n            ]\n          \n        \n        (\n        \n          Attention\n        \n        (\n        Q\n        \n          W\n          \n            i\n          \n          \n            Q\n          \n        \n        ,\n        K\n        \n          W\n          \n            i\n          \n          \n            K\n          \n        \n        ,\n        V\n        \n          W\n          \n            i\n          \n          \n            V\n          \n        \n        )\n        )\n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle {\\text{MultiheadedAttention}}(Q,K,V)={\\text{Concat}}_{i\\in [n_{\\text{heads}}]}({\\text{Attention}}(QW_{i}^{Q},KW_{i}^{K},VW_{i}^{V}))W^{O}}\n  \n where the matrix \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n  \n is the concatenation of word embeddings, and the matrices \n  \n    \n      \n        \n          W\n          \n            i\n          \n          \n            Q\n          \n        \n        ,\n        \n          W\n          \n            i\n          \n          \n            K\n          \n        \n        ,\n        \n          W\n          \n            i\n          \n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W_{i}^{Q},W_{i}^{K},W_{i}^{V}}\n  \n are \"projection matrices\" owned by individual attention head \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n, and \n  \n    \n      \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle W^{O}}\n  \n is a final projection matrix owned by the whole multi-headed attention head.\nIt is theoretically possible for each attention head to have a different head dimension \n  \n    \n      \n        \n          d\n          \n            head\n          \n        \n      \n    \n    {\\displaystyle d_{\\text{head}}}\n  \n, but that is rarely the case in practice.\nAs an example, in the smallest GPT-2 model, there are only self-attention mechanisms. It has the following dimensions:\n  \n    \n      \n        \n          d\n          \n            emb\n          \n        \n        =\n        768\n        ,\n        \n          n\n          \n            head\n          \n        \n        =\n        12\n        ,\n        \n          d\n          \n            head\n          \n        \n        =\n        64\n      \n    \n    {\\displaystyle d_{\\text{emb}}=768,n_{\\text{head}}=12,d_{\\text{head}}=64}\n  \nSince \n  \n    \n      \n        12\n        \u00d7\n        64\n        =\n        768\n      \n    \n    {\\displaystyle 12\\times 64=768}\n  \n, its output projection matrix \n  \n    \n      \n        \n          W\n          \n            O\n          \n        \n        \u2208\n        \n          \n            R\n          \n          \n            (\n            12\n            \u00d7\n            64\n            )\n            \u00d7\n            768\n          \n        \n      \n    \n    {\\displaystyle W^{O}\\in \\mathbb {R} ^{(12\\times 64)\\times 768}}\n  \n is a square matrix.Masked attention\nThe Transformer architecture is constructed to calculate output tokens iteratively. Assuming \n  \n    \n      \n        t\n        =\n        0\n      \n    \n    {\\displaystyle t=0}\n  \n refers to the calculation of the first output token \n  \n    \n      \n        i\n        =\n        0\n      \n    \n    {\\displaystyle i=0}\n  \n, for step \n  \n    \n      \n        t\n        >\n        0\n      \n    \n    {\\displaystyle t>0}\n  \n, the output token \n  \n    \n      \n        i\n        =\n        0\n      \n    \n    {\\displaystyle i=0}\n  \n shall remain constant. This ensures properties of the model similar to autoregressive models. Therefore, at every time step \n  \n    \n      \n        t\n      \n    \n    {\\displaystyle t}\n  \n, the calculation for all outputs \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  \n should not have access to tokens at position \n  \n    \n      \n        j\n      \n    \n    {\\displaystyle j}\n  \n for \n  \n    \n      \n        j\n        >=\n        i\n      \n    \n    {\\displaystyle j>=i}\n  \n (as it naturally is the case for time step \n  \n    \n      \n        t\n        =\n        i\n      \n    \n    {\\displaystyle t=i}\n  \n, when tokens \n  \n    \n      \n        j\n        >\n        t\n      \n    \n    {\\displaystyle j>t}\n  \n are not yet calculated). This behavior may be accomplished before the softmax stage by adding a mask matrix \n  \n    \n      \n        M\n      \n    \n    {\\displaystyle M}\n  \n that is \n  \n    \n      \n        \u2212\n        \u221e\n      \n    \n    {\\displaystyle -\\infty }\n  \n at entries where the attention link must be cut, and \n  \n    \n      \n        0\n      \n    \n    {\\displaystyle 0}\n  \n at other places:\n  \n    \n      \n        \n          \n            \n              \n                \n                  MaskedAttention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    M\n                    +\n                    \n                      \n                        \n                          Q\n                          \n                            K\n                            \n                              \n                                T\n                              \n                            \n                          \n                        \n                        \n                          \n                            d\n                            \n                              k\n                            \n                          \n                        \n                      \n                    \n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{MaskedAttention}}(Q,K,V)={\\text{softmax}}\\left(M+{\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\end{aligned}}}\n  \n The following matrix is commonly used in decoder self-attention modules, called \"causal masking\":\n  \n    \n      \n        \n          M\n          \n            causal\n          \n        \n        =\n        \n          \n            [\n            \n              \n                \n                  0\n                \n                \n                  \u2212\n                  \u221e\n                \n                \n                  \u2212\n                  \u221e\n                \n                \n                  \u2026\n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  0\n                \n                \n                  0\n                \n                \n                  \u2212\n                  \u221e\n                \n                \n                  \u2026\n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  0\n                \n                \n                  0\n                \n                \n                  0\n                \n                \n                  \u2026\n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22f1\n                \n                \n                  \u22ee\n                \n              \n              \n                \n                  0\n                \n                \n                  0\n                \n                \n                  0\n                \n                \n                  \u2026\n                \n                \n                  0\n                \n              \n            \n            ]\n          \n        \n      \n    \n    {\\displaystyle M_{\\text{causal}}={\\begin{bmatrix}0&-\\infty &-\\infty &\\dots &-\\infty \\\\0&0&-\\infty &\\dots &-\\infty \\\\0&0&0&\\dots &-\\infty \\\\\\vdots &\\vdots &\\vdots &\\ddots &\\vdots \\\\0&0&0&\\dots &0\\end{bmatrix}}}\n  \n\nIn words, it means that each token can pay attention to itself, and every token before it, but not any after it. A non-masked attention module can be thought of as a masked attention module where the mask has all entries zero. As an example of an uncommon use of mask matrix, the XLNet considers all masks of the form \n  \n    \n      \n        P\n        \n          M\n          \n            causal\n          \n        \n        \n          P\n          \n            \u2212\n            1\n          \n        \n      \n    \n    {\\displaystyle PM_{\\text{causal}}P^{-1}}\n  \n, where \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n  \n is a random permutation matrix.Encoder\nAn encoder consists of an embedding layer, followed by multiple encoder layers.\nEach encoder layer consists of two major components: a self-attention mechanism and a feed-forward layer. It takes an input as a sequence of input vectors, applies the self-attention mechanism, to produce an intermediate sequence of vectors, then applies the feed-forward layer for each vector individually. Schematically, we have:\n  \n    \n      \n        \n          \n            \n              \n                \n                  given input vectors \n                \n              \n              \n                \n                  h\n                  \n                    0\n                  \n                \n                ,\n                \n                  h\n                  \n                    1\n                  \n                \n                ,\n                \u2026\n              \n            \n            \n              \n                \n                  combine them into a matrix \n                \n                H\n              \n              \n                \n                =\n                \n                  \n                    [\n                    \n                      \n                        \n                          \n                            h\n                            \n                              0\n                            \n                          \n                        \n                      \n                      \n                        \n                          \n                            h\n                            \n                              1\n                            \n                          \n                        \n                      \n                      \n                        \n                          \u22ee\n                        \n                      \n                    \n                    ]\n                  \n                \n              \n            \n            \n              \n                \n                  EncoderLayer\n                \n                (\n                H\n                )\n              \n              \n                \n                =\n                \n                  \n                    [\n                    \n                      \n                        \n                          \n                            FFN\n                          \n                          (\n                          \n                            MultiheadedAttention\n                          \n                          (\n                          H\n                          ,\n                          H\n                          ,\n                          H\n                          \n                            )\n                            \n                              0\n                            \n                          \n                          )\n                        \n                      \n                      \n                        \n                          \n                            FFN\n                          \n                          (\n                          \n                            MultiheadedAttention\n                          \n                          (\n                          H\n                          ,\n                          H\n                          ,\n                          H\n                          \n                            )\n                            \n                              1\n                            \n                          \n                          )\n                        \n                      \n                      \n                        \n                          \u22ee\n                        \n                      \n                    \n                    ]\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{given input vectors }}&h_{0},h_{1},\\dots \\\\{\\text{combine them into a matrix }}H&={\\begin{bmatrix}h_{0}\\\\h_{1}\\\\\\vdots \\end{bmatrix}}\\\\{\\text{EncoderLayer}}(H)&={\\begin{bmatrix}{\\text{FFN}}({\\text{MultiheadedAttention}}(H,H,H)_{0})\\\\{\\text{FFN}}({\\text{MultiheadedAttention}}(H,H,H)_{1})\\\\\\vdots \\end{bmatrix}}\\\\\\end{aligned}}}\n  \n\nwhere \n  \n    \n      \n        \n          FFN\n        \n      \n    \n    {\\displaystyle {\\text{FFN}}}\n  \n stands for \"feed-forward network\". We can more succinctly write it as\n  \n    \n      \n        \n          EncoderLayer\n        \n        (\n        H\n        )\n        =\n        \n          FFN\n        \n        (\n        \n          MultiheadedAttention\n        \n        (\n        H\n        ,\n        H\n        ,\n        H\n        )\n        )\n      \n    \n    {\\displaystyle {\\text{EncoderLayer}}(H)={\\text{FFN}}({\\text{MultiheadedAttention}}(H,H,H))}\n  \nwith the implicit convention that the \n  \n    \n      \n        \n          FFN\n        \n      \n    \n    {\\displaystyle {\\text{FFN}}}\n  \n is applied to each row of the matrix individually.\nThe encoder layers are stacked. The first encoder layer takes the sequence of input vectors from the embedding layer, producing a sequence of vectors. This sequence of vectors is processed by the second encoder, and so on. The output from the final encoder layer is then used by the decoder.\nAs the encoder processes the entire input all at once, every token can attend to every other token (all-to-all attention), so there is no need for causal masking.Decoder\nA decoder consists of an embedding layer, followed by multiple decoder layers, followed by an un-embedding layer.\nEach decoder consists of three major components: a causally masked self-attention mechanism, a cross-attention mechanism, and a feed-forward neural network. The decoder functions in a similar fashion to the encoder, but an additional attention mechanism is inserted which instead draws relevant information from the encodings generated by the encoders. This mechanism can also be called the encoder-decoder attention.\nLike the first encoder, the first decoder takes positional information and embeddings of the output sequence as its input, rather than encodings. The transformer must not use the current or future output to predict an output, so the output sequence must be partially masked to prevent this reverse information flow. This allows for autoregressive text generation. For decoding, all-to-all attention is inappropriate, because a token cannot attend to tokens not yet generated. Thus, the self-attention module in the decoder is causally masked.\nIn contrast, the cross-attention mechanism attends to the output vectors of the encoder, which is computed before the decoder starts decoding. Consequently, there is no need for masking in the cross-attention mechanism.\nSchematically, we have:\n  \n    \n      \n        \n          \n            \n              \n                \n                  H\n                  \u2032\n                \n              \n              \n                \n                =\n                \n                  MaskedMultiheadedAttention\n                \n                (\n                H\n                ,\n                H\n                ,\n                H\n                )\n              \n            \n            \n              \n                \n                  DecoderLayer\n                \n                (\n                H\n                )\n              \n              \n                \n                =\n                \n                  FFN\n                \n                (\n                \n                  MultiheadedAttention\n                \n                (\n                \n                  H\n                  \u2032\n                \n                ,\n                \n                  H\n                  \n                    E\n                  \n                \n                ,\n                \n                  H\n                  \n                    E\n                  \n                \n                )\n                )\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}H'&={\\text{MaskedMultiheadedAttention}}(H,H,H)\\\\{\\text{DecoderLayer}}(H)&={\\text{FFN}}({\\text{MultiheadedAttention}}(H',H^{E},H^{E}))\\end{aligned}}}\n  \nwhere \n  \n    \n      \n        \n          H\n          \n            E\n          \n        \n      \n    \n    {\\displaystyle H^{E}}\n  \n is the matrix with rows being the output vectors from the encoder.\nThe last decoder is followed by a final un-embedding layer. to produce the output probabilities over the vocabulary. Then, one of the tokens is sampled according to the probability, and the decoder can be run again to produce the next token, etc, autoregressively generating output text.Adapted architectures\nMany large language models, since they do not need to predict a whole new sequence from an input sequence, only use the encoder or decoder of the original transformer architecture. Early GPT models are decoder-only models trained to predict the next token in a sequence. BERT, another language model, only makes use of an encoder, and is trained to predict a randomly masked token in a sequence.Full transformer architecture\nSublayers\nEach encoder layer contains 2 sublayers: the self-attention and the feedforward network. Each decoder layer contains 3 sublayers: the causally masked self-attention, the cross-attention, and the feedforward network.\n\nThe final points of detail are the residual connections and layer normalization (LayerNorm, or LN), which while conceptually unnecessary, are necessary for numerical stability and convergence.  \nThe residual connection, which is introduced to avoid vanishing gradient issues and stabilize the training process, can be expressed as follows: y = F(x) + x. The expression indicates that an output y is the sum of the transformation of input x (F(x)) and the input itself (x). Adding the input x can preserve the input information and avoid issues when the gradient of F(x) is close to zero.  \nSimilarly to how the feedforward network modules are applied individually to each vector, the LayerNorm is also applied individually to each vector. \nThere are two common conventions in use: the post-LN and the pre-LN convention. In the post-LN convention, the output of each sublayer is \n  \n    \n      \n        \n          L\n          a\n          y\n          e\n          r\n          N\n          o\n          r\n          m\n        \n        (\n        x\n        +\n        \n          S\n          u\n          b\n          l\n          a\n          y\n          e\n          r\n        \n        (\n        x\n        )\n        )\n      \n    \n    {\\displaystyle \\mathrm {LayerNorm} (x+\\mathrm {Sublayer} (x))}\n  \nwhere \n  \n    \n      \n        \n          S\n          u\n          b\n          l\n          a\n          y\n          e\n          r\n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle \\mathrm {Sublayer} (x)}\n  \n is the function implemented by the sublayer itself.\nIn the pre-LN convention, the output of each sublayer is\n  \n    \n      \n        x\n        +\n        \n          S\n          u\n          b\n          l\n          a\n          y\n          e\n          r\n        \n        (\n        \n          L\n          a\n          y\n          e\n          r\n          N\n          o\n          r\n          m\n        \n        (\n        x\n        )\n        )\n      \n    \n    {\\displaystyle x+\\mathrm {Sublayer} (\\mathrm {LayerNorm} (x))}\n  \nThe original 2017 Transformer used the post-LN convention. It was difficult to train and required careful hyperparameter tuning and a \"warm-up\" in learning rate, where it starts small and gradually increases. The pre-LN convention, proposed several times in 2018, was found to be easier to train, requiring no warm-up, leading to faster convergence.Pseudocode\nThe following is the pseudocode for a standard pre-LN encoder-decoder Transformer, adapted from\n\ninput: Encoder input t_e\n       Decoder input t_d\noutput: Array of probability distributions, with shape (decoder vocabulary size x length(decoder output sequence))\n\n/* encoder */\nz_e \u2190 encoder.tokenizer(t_e)\n\nfor each t in 1:length(z_e) do\n    z_e[t] \u2190 encoder.embedding(z_e[t]) + encoder.positional_embedding(t)\n\nfor each l in 1:length(encoder.layers) do\n    layer \u2190 encoder.layers[l]\n\n    /* first sublayer */\n    z_e_copy \u2190 copy(z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 layer.layer_norm(z_e[t])\n    z_e \u2190 layer.multiheaded_attention(z_e, z_e, z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 z_e[t] + z_e_copy[t]\n\n    /* second sublayer */\n    z_e_copy \u2190 copy(z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 layer.layer_norm(z_e[t])\n    z_e \u2190 layer.feedforward(z_e)\n    for each t in 1:length(z_e) do\n        z_e[t] \u2190 z_e[t] + z_e_copy[t]\n\nfor each t in 1:length(z_e) do\n    z_e[t] \u2190 encoder.final_layer_norm(z_e[t])\n\n/* decoder */\nz_d \u2190 decoder.tokenizer(t_d)\n\nfor each t in 1:length(z_d) do\n    z_d[t] \u2190 decoder.embedding(z_d[t]) + decoder.positional_embedding(t)\n\nfor each l in 1:length(decoder.layers) do\n        layer \u2190 decoder.layers[l]\n\n        /* first sublayer */\n        z_d_copy \u2190 copy(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 layer.layer_norm(z_d[t])\n        z_d \u2190 layer.masked_multiheaded_attention(z_d, z_d, z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 z_d[t] + z_d_copy[t]\n\n        /* second sublayer */\n        z_d_copy \u2190 copy(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 layer.layer_norm(z_d[t])\n        z_d \u2190 layer.multiheaded_attention(z_d, z_e, z_e) \n        for each i in 1:length(z_d) do\n            z_d[t] \u2190 z_d[t] + z_d_copy[t]\n\n        /* third sublayer */\n        z_d_copy \u2190 copy(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 layer.layer_norm(z_d[t])\n        z_d \u2190 layer.feedforward(z_d)\n        for each t in 1:length(z_d) do\n            z_d[t] \u2190 z_d[t] + z_d_copy[t]\n\nz_d \u2190 decoder.final_layer_norm(z_d)\n\noutput_distributions \u2190 []\nfor each t in 1:length(z_d) do\n    output_distributions.append(decoder.unembed(z_d[t]))\n\nreturn output_distributionsTerminology\nThe Transformer architecture, being modular, allows variations. Several common variations are described here.\nAn \"encoder-only\" Transformer applies the encoder to map an input text into a sequence of vectors that represent the input text. This is usually used for text embedding and representation learning for downstream applications. BERT is encoder-only. They are less often used currently, as they were found to be not significantly better than training an encoder-decoder Transformer, then taking just the encoder.\nA \"decoder-only\" Transformer is not literally decoder-only, since without an encoder, the cross-attention mechanism has nothing to attend to. Thus, the decoder layers in a decoder-only Transformer is composed of just two sublayers: the causally masked self-attention, and the feedforward network. This is usually used for text generation and instruction following. The models in the GPT series and Chinchilla series are decoder-only.\nAn \"encoder-decoder\" Transformer is generally the same as the original Transformer, with 2 sublayers per encoder layer and 3 sublayers per decoder layer, etc. They might have minor architectural improvements, such as alternative activation functions, changing the location of normalization, etc. This is also usually used for text generation and instruction following. The models in the T5 series are encoder-decoder.\nA \"prefixLM\" (prefix language model) is a decoder-only architecture, but with prefix masking, which is different from causal masking. Specifically, it has mask of the form:\u200aFigure 3\u200a\n  \n    \n      \n        \n          M\n          \n            prefixLM\n          \n        \n        =\n        \n          \n            [\n            \n              \n                \n                  \n                    0\n                  \n                \n                \n                  \u2212\n                  \u221e\n                \n              \n              \n                \n                  \n                    0\n                  \n                \n                \n                  \n                    M\n                    \n                      causal\n                    \n                  \n                \n              \n            \n            ]\n          \n        \n      \n    \n    {\\displaystyle M_{\\text{prefixLM}}={\\begin{bmatrix}\\mathbf {0} &-\\infty \\\\\\mathbf {0} &M_{\\text{causal}}\\end{bmatrix}}}\n  \nwhere the first columns correspond to the \"prefix\", and the subsequent columns correspond to the autoregressively generated text based on the prefix. They resemble encoder-decoder models, but has less \"sparsity\". Such models are rarely used, though they are cited as theoretical possibilities and benchmarked comparisons.\nThere are also mixed seq2seq models. For example, in 2020, Google Translate replaced the previous RNN-encoder\u2013RNN-decoder model by a Transformer-encoder\u2013RNN-decoder model, on the argument that an RNN-decoder runs much faster than Transformer-decoder when run autoregressively.Subsequent work\nAlternative activation functions\nThe original transformer uses ReLU activation function. Other activation functions were developed. The Llama series and PaLM used SwiGLU; both GPT-1 and BERT used GELU. \nAlternative activation functions are often used in combination with Gated Linear Units in the feedforward module.Alternative normalizations\nThe normalization used in the Transformer can be different from LayerNorm. One example is RMSNorm which is used in the Llama series. Other examples include CapsuleNorm ScaleNorm, or FixNorm.Alternative positional encodings\nTransformers may use other positional encoding methods than sinusoidal. \nThe original Transformer paper reported using a learned positional encoding, but finding it not superior to the sinusoidal one. Later,  found that causal masking itself provides enough signal to a Transformer decoder that it can learn to implicitly perform absolute positional encoding without the positional encoding module.RoPE\nRoPE (rotary positional embedding), is best explained by considering a list of 2-dimensional vectors \n  \n    \n      \n        [\n        (\n        \n          x\n          \n            1\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            1\n          \n          \n            (\n            2\n            )\n          \n        \n        )\n        ,\n        (\n        \n          x\n          \n            2\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            2\n          \n          \n            (\n            2\n            )\n          \n        \n        )\n        ,\n        (\n        \n          x\n          \n            3\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            3\n          \n          \n            (\n            2\n            )\n          \n        \n        )\n        ,\n        .\n        .\n        .\n        ]\n      \n    \n    {\\displaystyle [(x_{1}^{(1)},x_{1}^{(2)}),(x_{2}^{(1)},x_{2}^{(2)}),(x_{3}^{(1)},x_{3}^{(2)}),...]}\n  \n. Now pick some angle \n  \n    \n      \n        \u03b8\n      \n    \n    {\\displaystyle \\theta }\n  \n. Then RoPE encoding is\n  \n    \n      \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        \n          x\n          \n            m\n          \n          \n            (\n            1\n            )\n          \n        \n        ,\n        \n          x\n          \n            m\n          \n          \n            (\n            2\n            )\n          \n        \n        ,\n        m\n        \n          \n            )\n          \n        \n        =\n        \n          \n            (\n            \n              \n                \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                \n                \n                  \u2212\n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n              \n                \n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n                \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n            \n            )\n          \n        \n        \n          \n            (\n            \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      1\n                      )\n                    \n                  \n                \n              \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      2\n                      )\n                    \n                  \n                \n              \n            \n            )\n          \n        \n        =\n        \n          \n            (\n            \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      1\n                      )\n                    \n                  \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                  \u2212\n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      2\n                      )\n                    \n                  \n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n              \n                \n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      2\n                      )\n                    \n                  \n                  cos\n                  \u2061\n                  m\n                  \u03b8\n                  +\n                  \n                    x\n                    \n                      m\n                    \n                    \n                      (\n                      1\n                      )\n                    \n                  \n                  sin\n                  \u2061\n                  m\n                  \u03b8\n                \n              \n            \n            )\n          \n        \n      \n    \n    {\\displaystyle {\\text{RoPE}}{\\big (}x_{m}^{(1)},x_{m}^{(2)},m{\\big )}={\\begin{pmatrix}\\cos m\\theta &-\\sin m\\theta \\\\\\sin m\\theta &\\cos m\\theta \\end{pmatrix}}{\\begin{pmatrix}x_{m}^{(1)}\\\\x_{m}^{(2)}\\\\\\end{pmatrix}}={\\begin{pmatrix}x_{m}^{(1)}\\cos m\\theta -x_{m}^{(2)}\\sin m\\theta \\\\x_{m}^{(2)}\\cos m\\theta +x_{m}^{(1)}\\sin m\\theta \\\\\\end{pmatrix}}}\n  \nEquivalently, if we write the 2-dimensional vectors as complex numbers \n  \n    \n      \n        \n          z\n          \n            m\n          \n        \n        :=\n        \n          x\n          \n            m\n          \n          \n            (\n            1\n            )\n          \n        \n        +\n        i\n        \n          x\n          \n            m\n          \n          \n            (\n            2\n            )\n          \n        \n      \n    \n    {\\displaystyle z_{m}:=x_{m}^{(1)}+ix_{m}^{(2)}}\n  \n, then RoPE encoding is just multiplication by an angle:\n  \n    \n      \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        \n          z\n          \n            m\n          \n        \n        ,\n        m\n        \n          \n            )\n          \n        \n        =\n        \n          e\n          \n            i\n            m\n            \u03b8\n          \n        \n        \n          z\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle {\\text{RoPE}}{\\big (}z_{m},m{\\big )}=e^{im\\theta }z_{m}}\n  \nFor a list of \n  \n    \n      \n        2\n        n\n      \n    \n    {\\displaystyle 2n}\n  \n-dimensional vectors, a RoPE encoder is defined by a sequence of angles \n  \n    \n      \n        \n          \u03b8\n          \n            (\n            1\n            )\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          \u03b8\n          \n            (\n            n\n            )\n          \n        \n      \n    \n    {\\displaystyle \\theta ^{(1)},...,\\theta ^{(n)}}\n  \n. Then the RoPE encoding is applied to each pair of coordinates.\nThe benefit of RoPE is that the dot-product between two vectors depends on their relative location only:\n  \n    \n      \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        x\n        ,\n        m\n        \n          \n            \n              )\n            \n          \n          \n            T\n          \n        \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        y\n        ,\n        n\n        \n          \n            )\n          \n        \n        =\n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        x\n        ,\n        m\n        +\n        k\n        \n          \n            \n              )\n            \n          \n          \n            T\n          \n        \n        \n          RoPE\n        \n        \n          \n            (\n          \n        \n        y\n        ,\n        n\n        +\n        k\n        \n          \n            )\n          \n        \n      \n    \n    {\\displaystyle {\\text{RoPE}}{\\big (}x,m{\\big )}^{T}{\\text{RoPE}}{\\big (}y,n{\\big )}={\\text{RoPE}}{\\big (}x,m+k{\\big )}^{T}{\\text{RoPE}}{\\big (}y,n+k{\\big )}}\n  \n\nfor any integer \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n  \n.ALiBi\nALiBi (Attention with Linear Biases) is not a replacement for the positional encoder on the original transformer. Instead, it is an additional positional encoder that is directly plugged into the attention mechanism. Specifically, the ALiBi attention mechanism is\n  \n    \n      \n        \n          \n            \n              \n                \n                  Attention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    \n                      \n                        \n                          Q\n                          \n                            K\n                            \n                              \n                                T\n                              \n                            \n                          \n                        \n                        \n                          \n                            d\n                            \n                              k\n                            \n                          \n                        \n                      \n                    \n                    +\n                    s\n                    B\n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}+sB\\right)V\\end{aligned}}}\n  \nHere, \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  \n is a real number (\"scalar\"), and \n  \n    \n      \n        B\n      \n    \n    {\\displaystyle B}\n  \n is the linear bias matrix defined by\n  \n    \n      \n        B\n        =\n        \n          \n            (\n            \n              \n                \n                  0\n                \n                \n                  1\n                \n                \n                  2\n                \n                \n                  3\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u2212\n                  1\n                \n                \n                  0\n                \n                \n                  1\n                \n                \n                  2\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u2212\n                  2\n                \n                \n                  \u2212\n                  1\n                \n                \n                  0\n                \n                \n                  1\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u2212\n                  3\n                \n                \n                  \u2212\n                  2\n                \n                \n                  \u2212\n                  1\n                \n                \n                  0\n                \n                \n                  \u22ef\n                \n              \n              \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22ee\n                \n                \n                  \u22f1\n                \n              \n            \n            )\n          \n        \n      \n    \n    {\\displaystyle B={\\begin{pmatrix}0&1&2&3&\\cdots \\\\-1&0&1&2&\\cdots \\\\-2&-1&0&1&\\cdots \\\\-3&-2&-1&0&\\cdots \\\\\\vdots &\\vdots &\\vdots &\\vdots &\\ddots \\\\\\end{pmatrix}}}\n  \nin other words, \n  \n    \n      \n        \n          B\n          \n            i\n            ,\n            j\n          \n        \n        =\n        j\n        \u2212\n        i\n      \n    \n    {\\displaystyle B_{i,j}=j-i}\n  \n. The idea being that the linear bias matrix is a softened mask. Just as \n  \n    \n      \n        0\n      \n    \n    {\\displaystyle 0}\n  \n represent full attention paid, and \n  \n    \n      \n        \u2212\n        \u221e\n      \n    \n    {\\displaystyle -\\infty }\n  \n represents no attention paid, the linear bias matrix increases attention paid in one direction and decreases attention paid in the other direction.\nALiBi allows pretraining on short context windows, then fine-tuning on longer context windows. Since it is directly plugged into the attention mechanism, it can be combined with any positional encoder that is plugged into the \"bottom\" of the entire network (which is where the sinusoidal encoder on the original transformer, as well as RoPE and many others, are located).Relative Position Encodings\nRelative Position Encodings is similar to ALiBi, but more generic:\n  \n    \n      \n        \n          \n            \n              \n                \n                  Attention\n                \n                (\n                Q\n                ,\n                K\n                ,\n                V\n                )\n                =\n                \n                  softmax\n                \n                \n                  (\n                  \n                    \n                      \n                        \n                          Q\n                          \n                            K\n                            \n                              \n                                T\n                              \n                            \n                          \n                        \n                        \n                          \n                            d\n                            \n                              k\n                            \n                          \n                        \n                      \n                    \n                    +\n                    B\n                  \n                  )\n                \n                V\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}+B\\right)V\\end{aligned}}}\n  \nwhere \n  \n    \n      \n        B\n      \n    \n    {\\displaystyle B}\n  \n is a Toeplitz matrix, that is, \n  \n    \n      \n        \n          B\n          \n            i\n            ,\n            j\n          \n        \n        =\n        \n          B\n          \n            \n              i\n              \u2032\n            \n            ,\n            \n              j\n              \u2032\n            \n          \n        \n      \n    \n    {\\displaystyle B_{i,j}=B_{i',j'}}\n  \n whenever \n  \n    \n      \n        i\n        \u2212\n        j\n        =\n        \n          i\n          \u2032\n        \n        \u2212\n        \n          j\n          \u2032\n        \n      \n    \n    {\\displaystyle i-j=i'-j'}\n  \n. This is contrasted with the original sinusoidal positional encoding, which is an \"absolute positional encoding\".Efficient implementation\nThe transformer model has been implemented in standard deep learning frameworks such as TensorFlow and PyTorch. Transformers is a library produced by Hugging Face that supplies transformer-based architectures and pretrained models.KV caching\nWhen an autoregressive transformer is used for inference, such as generating text, the query vector is different at each step, but the already-computed key and value vectors are always the same. The KV caching method saves the computed key and value vectors at each attention block, so that they are not recomputed at each new token. PagedAttention applies memory paging to KV caching.\nIf a transformer is used with a baked-in prompt, such as [\"You are a customer support agent...\"], then the key and value vectors can be computed for the prompt, and saved on disk. The saving in compute is significant when the model is used for many short interactions, such as in online chatbots.FlashAttention\nFlashAttention is an algorithm that implements the transformer attention mechanism efficiently on a GPU. It is a communication-avoiding algorithm that performs matrix multiplications in blocks, such that each block fits within the cache of a GPU, and by careful management of the blocks it minimizes data copying between GPU caches (as data movement is slow). See the page on softmax for details.\nAn improved version, FlashAttention-2, was developed to cater to the rising demand for language models capable of handling longer context lengths. It offers enhancements in work partitioning and parallelism, enabling it to achieve up to 230 TFLOPs/s on A100 GPUs (FP16/BF16), a 2x speed increase over the original FlashAttention.\nKey advancements in FlashAttention-2 include the reduction of non-matmul FLOPs, improved parallelism over the sequence length dimension, better work partitioning between GPU warps, and added support for head dimensions up to 256 and multi-query attention (MQA) and grouped-query attention (GQA).\nBenchmarks revealed FlashAttention-2 to be up to 2x faster than FlashAttention and up to 9x faster than a standard attention implementation in PyTorch. Future developments include optimization for new hardware like H100 GPUs and new data types like FP8.Multi-Query Attention\nMulti-Query Attention changes the multiheaded attention mechanism. Whereas normally,\n\n  \n    \n      \n        \n          MultiheadedAttention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          \n            Concat\n          \n          \n            i\n            \u2208\n            [\n            \n              n\n              \n                heads\n              \n            \n            ]\n          \n        \n        \n          (\n          \n            \n              Attention\n            \n            (\n            X\n            \n              W\n              \n                i\n              \n              \n                Q\n              \n            \n            ,\n            X\n            \n              W\n              \n                i\n              \n              \n                K\n              \n            \n            ,\n            X\n            \n              W\n              \n                i\n              \n              \n                V\n              \n            \n            )\n          \n          )\n        \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle {\\text{MultiheadedAttention}}(Q,K,V)={\\text{Concat}}_{i\\in [n_{\\text{heads}}]}\\left({\\text{Attention}}(XW_{i}^{Q},XW_{i}^{K},XW_{i}^{V})\\right)W^{O}}\n  \nwith Multi-Query Attention, there is just one \n  \n    \n      \n        \n          W\n          \n            K\n          \n        \n        ,\n        \n          W\n          \n            V\n          \n        \n      \n    \n    {\\displaystyle W^{K},W^{V}}\n  \n, thus:\n\n  \n    \n      \n        \n          MultiQueryAttention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          \n            Concat\n          \n          \n            i\n            \u2208\n            [\n            \n              n\n              \n                heads\n              \n            \n            ]\n          \n        \n        \n          (\n          \n            \n              Attention\n            \n            (\n            X\n            \n              W\n              \n                i\n              \n              \n                Q\n              \n            \n            ,\n            X\n            \n              W\n              \n                K\n              \n            \n            ,\n            X\n            \n              W\n              \n                V\n              \n            \n            )\n          \n          )\n        \n        \n          W\n          \n            O\n          \n        \n      \n    \n    {\\displaystyle {\\text{MultiQueryAttention}}(Q,K,V)={\\text{Concat}}_{i\\in [n_{\\text{heads}}]}\\left({\\text{Attention}}(XW_{i}^{Q},XW^{K},XW^{V})\\right)W^{O}}\n  \n\nThis has a neutral effect on model quality and training speed, but increases inference speed. \nMore generally, grouped-query attention (GQA) partitions attention heads into groups, each of which shares the key-value pair. MQA is GQA with one group, while standard multiheaded attention is GQA with the maximal number of groups.\n\nMultihead Latent Attention (MLA) is a low-rank approximation to standard MHA. Specifically, each hidden vector, before entering the attention mechanism, is first projected to two low-dimensional spaces (\"latent space\"), one for query and one for key-value (KV vector). This design minimizes the KV cache, as only the low-dimensional KV vector needs to be cached.Speculative decoding\nSpeculative decoding is a method to accelerate token decoding. Similarly to speculative execution in CPUs, future tokens are computed quickly, then verified. If the quickly computed tokens are incorrect, they are discarded and computed slowly.\nThe key factor in speculative decoding is that a Transformer decoder can verify faster than it can decode, in the following sense.\nSuppose we have two transformer models like GPT-3 and GPT-3-small, both with a context window size of 512. To generate an entire context window autoregressively with greedy decoding with GPT-3, it must be run for 512 times, each time generating a token \n  \n    \n      \n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          x\n          \n            2\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          x\n          \n            512\n          \n        \n      \n    \n    {\\displaystyle x_{1},x_{2},...,x_{512}}\n  \n, taking time \n  \n    \n      \n        512\n        \n          T\n          \n            GPT-3\n          \n        \n      \n    \n    {\\displaystyle 512T_{\\text{GPT-3}}}\n  \n. However, if we had some educated guess for the values of these tokens, we could verify all of them in parallel, in one run of the model, by checking that each \n  \n    \n      \n        \n          x\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle x_{t}}\n  \n is indeed the token with the largest log-likelihood in the \n  \n    \n      \n        t\n      \n    \n    {\\displaystyle t}\n  \n-th output.\nIn speculative decoding, a smaller model or some other simple heuristic is used to generate a few speculative tokens that are subsequently verified by the larger model. For example, suppose we use GPT-3-small to generate four speculative tokens: \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            1\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            2\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            3\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            4\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{1},{\\tilde {x}}_{2},{\\tilde {x}}_{3},{\\tilde {x}}_{4}}\n  \n. This only takes \n  \n    \n      \n        4\n        \n          T\n          \n            GPT-3-small\n          \n        \n      \n    \n    {\\displaystyle 4T_{\\text{GPT-3-small}}}\n  \n. These tokens are then run through the larger GPT-3 in one go. Suppose that \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            1\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{1}}\n  \n and \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{2}}\n  \n are verified by GPT-3 as what it would have picked, then those are kept, but \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            3\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{3}}\n  \n is not, so \n  \n    \n      \n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            3\n          \n        \n        ,\n        \n          \n            \n              \n                x\n                ~\n              \n            \n          \n          \n            4\n          \n        \n      \n    \n    {\\displaystyle {\\tilde {x}}_{3},{\\tilde {x}}_{4}}\n  \n are discarded, and GPT-3 is run on those. This would take \n  \n    \n      \n        4\n        \n          T\n          \n            GPT-3-small\n          \n        \n        +\n        3\n        \n          T\n          \n            GPT-3\n          \n        \n      \n    \n    {\\displaystyle 4T_{\\text{GPT-3-small}}+3T_{\\text{GPT-3}}}\n  \n, which might be shorter than \n  \n    \n      \n        4\n        \n          T\n          \n            GPT-3\n          \n        \n      \n    \n    {\\displaystyle 4T_{\\text{GPT-3}}}\n  \n.\nFor non-greedy decoding, similar ideas apply, except the speculative tokens are accepted or rejected stochastically, in a way that guarantees the final output distribution is the same as if speculative decoding was not used.\n\nIn Multi-Token Prediction, a single forward pass creates a final embedding vector, which then is un-embedded into a token probability. However, that vector can then be further processed by another Transformer block to predict the next token, and so on for arbitrarily many steps into the future. This trades off accuracy for speed, since each new token costs just one more Transformer block, rather than the entire stack.Sub-quadratic transformers\nTraining transformer-based architectures can be expensive, especially for long inputs. Many methods have been developed to attempt to address the issue. In the image domain, Swin Transformer is an efficient architecture that performs attention inside shifting windows. In the audio domain, SepTr decouples the attention in time and frequency domains. Long Range Arena (2020) is a standard benchmark for comparing the behavior of transformer architectures over long inputs.Alternative attention graphs\nThe standard attention graph is either all-to-all or causal, both of which scales as \n  \n    \n      \n        O\n        (\n        \n          N\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle O(N^{2})}\n  \n where \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n  \n is the number of tokens in a sequence.\nReformer (2020) reduces the computational load from \n  \n    \n      \n        O\n        (\n        \n          N\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle O(N^{2})}\n  \n to \n  \n    \n      \n        O\n        (\n        N\n        ln\n        \u2061\n        N\n        )\n      \n    \n    {\\displaystyle O(N\\ln N)}\n  \n by using locality-sensitive hashing and reversible layers. \nSparse attention uses attention graphs that grows slower than \n  \n    \n      \n        O\n        (\n        \n          N\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle O(N^{2})}\n  \n. For example, BigBird (2020) uses random small-world networks which grows as \n  \n    \n      \n        O\n        (\n        N\n        )\n      \n    \n    {\\displaystyle O(N)}\n  \n.\nOrdinary transformers require a memory size that is quadratic in the size of the context window. Attention-free transformers reduce this to a linear dependence while still retaining the advantages of a transformer by linking the key to the value.Random Feature Attention\nRandom Feature Attention (2021) uses Fourier random features:\n  \n    \n      \n        \u03c6\n        (\n        x\n        )\n        =\n        \n          \n            1\n            \n              D\n            \n          \n        \n        [\n        cos\n        \u2061\n        \u27e8\n        \n          w\n          \n            1\n          \n        \n        ,\n        x\n        \u27e9\n        ,\n        sin\n        \u2061\n        \u27e8\n        \n          w\n          \n            1\n          \n        \n        ,\n        x\n        \u27e9\n        ,\n        \u22ef\n        cos\n        \u2061\n        \u27e8\n        \n          w\n          \n            D\n          \n        \n        ,\n        x\n        \u27e9\n        ,\n        sin\n        \u2061\n        \u27e8\n        \n          w\n          \n            D\n          \n        \n        ,\n        x\n        \u27e9\n        \n          ]\n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\varphi (x)={\\frac {1}{\\sqrt {D}}}[\\cos \\langle w_{1},x\\rangle ,\\sin \\langle w_{1},x\\rangle ,\\cdots \\cos \\langle w_{D},x\\rangle ,\\sin \\langle w_{D},x\\rangle ]^{T}}\n  \nwhere \n  \n    \n      \n        \n          w\n          \n            1\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          w\n          \n            D\n          \n        \n      \n    \n    {\\displaystyle w_{1},...,w_{D}}\n  \n are independent samples from the normal distribution \n  \n    \n      \n        N\n        (\n        0\n        ,\n        \n          \u03c3\n          \n            2\n          \n        \n        I\n        )\n      \n    \n    {\\displaystyle N(0,\\sigma ^{2}I)}\n  \n. This choice of parameters satisfy \n  \n    \n      \n        \n          E\n        \n        [\n        \u27e8\n        \u03c6\n        (\n        x\n        )\n        ,\n        \u03c6\n        (\n        y\n        )\n        \u27e9\n        ]\n        =\n        \n          e\n          \n            \u2212\n            \n              \n                \n                  \u2016\n                  x\n                  \u2212\n                  y\n                  \n                    \u2016\n                    \n                      2\n                    \n                  \n                \n                \n                  2\n                  \n                    \u03c3\n                    \n                      2\n                    \n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbb {E} [\\langle \\varphi (x),\\varphi (y)\\rangle ]=e^{-{\\frac {\\|x-y\\|^{2}}{2\\sigma ^{2}}}}}\n  \n, or \n  \n    \n      \n        \n          e\n          \n            \u27e8\n            x\n            ,\n            y\n            \u27e9\n            \n              /\n            \n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        =\n        \n          E\n        \n        [\n        \u27e8\n        \n          e\n          \n            \u2016\n            x\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        x\n        )\n        ,\n        \n          e\n          \n            \u2016\n            y\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        y\n        )\n        \u27e9\n        ]\n        \u2248\n        \u27e8\n        \n          e\n          \n            \u2016\n            x\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        x\n        )\n        ,\n        \n          e\n          \n            \u2016\n            y\n            \n              \u2016\n              \n                2\n              \n            \n            \n              /\n            \n            2\n            \n              \u03c3\n              \n                2\n              \n            \n          \n        \n        \u03c6\n        (\n        y\n        )\n        \u27e9\n      \n    \n    {\\displaystyle e^{\\langle x,y\\rangle /\\sigma ^{2}}=\\mathbb {E} [\\langle e^{\\|x\\|^{2}/2\\sigma ^{2}}\\varphi (x),e^{\\|y\\|^{2}/2\\sigma ^{2}}\\varphi (y)\\rangle ]\\approx \\langle e^{\\|x\\|^{2}/2\\sigma ^{2}}\\varphi (x),e^{\\|y\\|^{2}/2\\sigma ^{2}}\\varphi (y)\\rangle }\n  \nConsequently, the one-headed attention, with one query, can be written as \n  \n    \n      \n        \n          Attention\n        \n        (\n        q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          softmax\n        \n        \n          (\n          \n            \n              \n                q\n                \n                  K\n                  \n                    \n                      T\n                    \n                  \n                \n              \n              \n                \n                  d\n                  \n                    k\n                  \n                \n              \n            \n          \n          )\n        \n        V\n        \u2248\n        \n          \n            \n              \u03c6\n              (\n              q\n              \n                )\n                \n                  T\n                \n              \n              \n                \u2211\n                \n                  i\n                \n              \n              \n                e\n                \n                  \u2016\n                  \n                    k\n                    \n                      i\n                    \n                  \n                  \n                    \u2016\n                    \n                      2\n                    \n                  \n                  \n                    /\n                  \n                  2\n                  \n                    \u03c3\n                    \n                      2\n                    \n                  \n                \n              \n              \u03c6\n              (\n              \n                k\n                \n                  i\n                \n              \n              )\n              \n                v\n                \n                  i\n                \n                \n                  T\n                \n              \n            \n            \n              \u03c6\n              (\n              q\n              \n                )\n                \n                  T\n                \n              \n              \n                \u2211\n                \n                  i\n                \n              \n              \n                e\n                \n                  \u2016\n                  \n                    k\n                    \n                      i\n                    \n                  \n                  \n                    \u2016\n                    \n                      2\n                    \n                  \n                  \n                    /\n                  \n                  2\n                  \n                    \u03c3\n                    \n                      2\n                    \n                  \n                \n              \n              \u03c6\n              (\n              \n                k\n                \n                  i\n                \n              \n              )\n            \n          \n        \n      \n    \n    {\\displaystyle {\\text{Attention}}(q,K,V)={\\text{softmax}}\\left({\\frac {qK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\approx {\\frac {\\varphi (q)^{T}\\sum _{i}e^{\\|k_{i}\\|^{2}/2\\sigma ^{2}}\\varphi (k_{i})v_{i}^{T}}{\\varphi (q)^{T}\\sum _{i}e^{\\|k_{i}\\|^{2}/2\\sigma ^{2}}\\varphi (k_{i})}}}\n  \nwhere \n  \n    \n      \n        \u03c3\n        =\n        \n          d\n          \n            K\n          \n          \n            1\n            \n              /\n            \n            4\n          \n        \n      \n    \n    {\\displaystyle \\sigma =d_{K}^{1/4}}\n  \n. Similarly for multiple queries, and for multiheaded attention.\nThis approximation can be computed in linear time, as we can compute the matrix \n  \n    \n      \n        \u03c6\n        (\n        \n          k\n          \n            i\n          \n        \n        )\n        \n          v\n          \n            i\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\varphi (k_{i})v_{i}^{T}}\n  \n first, then multiply it with the query. In essence, we have managed to obtain a more precise version of \n  \n    \n      \n        \n          Attention\n        \n        (\n        Q\n        ,\n        K\n        ,\n        V\n        )\n        =\n        \n          softmax\n        \n        \n          (\n          \n            \n              \n                Q\n                \n                  K\n                  \n                    \n                      T\n                    \n                  \n                \n              \n              \n                \n                  d\n                  \n                    k\n                  \n                \n              \n            \n          \n          )\n        \n        V\n        \u2248\n        Q\n        (\n        \n          K\n          \n            T\n          \n        \n        V\n        \n          /\n        \n        \n          \n            \n              d\n              \n                k\n              \n            \n          \n        \n        )\n      \n    \n    {\\displaystyle {\\text{Attention}}(Q,K,V)={\\text{softmax}}\\left({\\frac {QK^{\\mathrm {T} }}{\\sqrt {d_{k}}}}\\right)V\\approx Q(K^{T}V/{\\sqrt {d_{k}}})}\n  \nPerformer (2022) uses the same Random Feature Attention, but \n  \n    \n      \n        \n          w\n          \n            1\n          \n        \n        ,\n        .\n        .\n        .\n        ,\n        \n          w\n          \n            D\n          \n        \n      \n    \n    {\\displaystyle w_{1},...,w_{D}}\n  \n are first independently sampled from the normal distribution \n  \n    \n      \n        N\n        (\n        0\n        ,\n        \n          \u03c3\n          \n            2\n          \n        \n        I\n        )\n      \n    \n    {\\displaystyle N(0,\\sigma ^{2}I)}\n  \n, then they are Gram-Schmidt processed.Multimodality\nTransformers can also be used/adapted for modalities (input or output) beyond just text, usually by finding a way to \"tokenize\" the modality.\nMultimodal models can either be trained from scratch, or by finetuning. A 2022 study found that Transformers pretrained only on natural language can be finetuned on only 0.03% of parameters and become competitive with LSTMs on a variety of logical and visual tasks, demonstrating transfer learning. The LLaVA was a vision-language model composed of a language model (Vicuna-13B) and a vision model (ViT-L/14), connected by a linear layer. Only the linear layer is finetuned.\nVision transformers adapt the transformer to computer vision by breaking down input images as a series of patches, turning them into vectors, and treating them like tokens in a standard transformer.\nConformer and later Whisper follow the same pattern for speech recognition, first turning the speech signal into a spectrogram, which is then treated like an image, i.e. broken down into a series of patches, turned into vectors and treated like tokens in a standard transformer.\nPerceivers are a variant of Transformers designed for multimodality.\nFor image generation, notable architectures are DALL-E 1 (2021), Parti (2022), Phenaki (2023), and Muse (2023). Unlike later models, DALL-E is not a diffusion model. Instead, it uses a decoder-only Transformer that autoregressively generates a text, followed by the token representation of an image, which is then converted by a variational autoencoder to an image. Parti is an encoder-decoder Transformer, where the encoder processes a text prompt, and the decoder generates a token representation of an image. Muse is an encoder-only Transformer that is trained to predict masked image tokens from unmasked image tokens. During generation, all input tokens are masked, and the highest-confidence predictions are included for the next iteration, until all tokens are predicted. Phenaki is a text-to-video model. It is a bidirectional masked transformer conditioned on pre-computed text tokens. The generated tokens are then decoded to a video.Applications\nThe transformer has had great success in natural language processing (NLP). Many large language models such as GPT-2, GPT-3, GPT-4, Gemini, AlbertAGPT, Claude, BERT, Grok, XLNet, RoBERTa and ChatGPT demonstrate the ability of transformers to perform a wide variety of NLP-related subtasks and their related real-world applications, including:\n\nmachine translation\ntime series prediction\ndocument summarization\ndocument generation\nnamed entity recognition (NER)\nwriting computer code based on requirements expressed in natural language.\nspeech-to-text\nBeyond traditional NLP, the transformer architecture has had success in other applications, such as:\n\nbiological sequence analysis\nvideo understanding\nprotein folding (such as AlphaFold)\nevaluating chess board positions. Using static evaluation alone (that is, with no Minimax search) transformer achieved an Elo of 2895, putting it at grandmaster level.See also\nseq2seq \u2013 Family of machine learning approaches\nPerceiver \u2013 Variant of Transformer designed for multimodal data\nVision transformer \u2013 Machine learning model for vision processing\nLarge language model \u2013 Type of machine learning model\nBERT (language model) \u2013 Series of language models developed by Google AI\nGenerative pre-trained transformer \u2013 Type of large language model\nT5 (language model) \u2013 Series of large language models developed by Google AINotes\nReferences\n== Further reading ==", "result": "### Introduction\n\nThe transformer architecture, introduced in the 2017 paper \"Attention Is All You Need\" by Vaswani et al., has revolutionized the field of deep learning, particularly in natural language processing (NLP). Unlike recurrent neural networks (RNNs) and their variants, such as long short-term memory networks (LSTMs), which process sequences sequentially, transformers operate in parallel, making them highly efficient and scalable for large-scale language modeling tasks. This parallelism allows transformers to handle long-range dependencies more effectively, leading to significant improvements in various NLP tasks, including machine translation, text summarization, question answering, and more.\n\nThe core innovation of the transformer lies in its self-attention mechanism, which enables the model to weigh the importance of different elements in a sequence independently of their positions. This mechanism, combined with positional encodings, allows transformers to capture the order of tokens without relying on recurrence. As a result, transformers have become the backbone of state-of-the-art models in many areas of AI, driving advancements in language understanding, generation, and multimodal processing.\n\nTransformers have evolved beyond their initial application in machine translation to encompass a wide range of applications, from language modeling and natural language generation to computer vision and multimodal tasks. Their success can be attributed to their ability to generalize well, their scalability, and their robustness to long-range dependencies, making them a cornerstone in the development of modern AI systems.\n\n### History\n\nThe transformer architecture has its roots in earlier work on sequence modeling and attention mechanisms. The concept of self-attention was first introduced in the 1990s by Bahdanau et al. in their seminal work on neural machine translation. However, it wasn't until the introduction of transformers that these ideas were combined in a way that could scale to large datasets and complex tasks.\n\nKey milestones in the development of transformers include:\n- **2014**: The introduction of LSTM and GRU, which improved upon RNNs but still struggled with long-range dependencies.\n- **2016**: The development of the Transformer-XL model, which addressed the issue of positional encoding by introducing relative positional encodings.\n- **2017**: Vaswani et al. published \"Attention Is All You Need,\" introducing the original transformer architecture, which achieved state-of-the-art results in machine translation.\n- **2018**: The introduction of BERT (Bidirectional Encoder Representations from Transformers) by Devlin et al., which demonstrated the power of bidirectional training and significantly improved language understanding.\n- **2020**: The release of GPT-2 and GPT-3, which showcased the potential of large transformer models in generating human-like text and performing a wide range of NLP tasks.\n\nThese advancements have led to a rapid expansion of transformer applications, from language modeling to vision and multimodal tasks, marking the beginning of a new era in deep learning.\n\n### Predecessors\n\nThe development of the transformer architecture was influenced by several earlier sequence modeling techniques, each addressing specific limitations of previous approaches. Recurrent Neural Networks (RNNs) and Long Short-Term Memory Networks (LSTMs) were among the most prominent predecessors, but they faced significant challenges when dealing with long sequences due to vanishing or exploding gradients.\n\n#### Recurrent Neural Networks (RNNs)\nRNNs process sequences one element at a time, maintaining a hidden state that captures information from previous elements. While effective for shorter sequences, RNNs struggle with long-range dependencies because the gradient signal diminishes as it propagates through the network, a phenomenon known as the vanishing gradient problem. This makes it difficult for RNNs to capture dependencies that span many steps in a sequence.\n\n#### Long Short-Term Memory Networks (LSTMs)\nLSTMs, introduced by Hochreiter and Schmidhuber in 1997, are a variant of RNNs designed to mitigate the vanishing gradient problem. They introduce a cell state, which can maintain information over long periods, and gates (input, forget, and output gates) to control the flow of information. Despite improvements, LSTMs still face challenges with very long sequences, as the number of parameters grows linearly with sequence length, leading to increased computational costs and memory usage.\n\n#### Self-Attention Mechanisms\nSelf-attention mechanisms, first introduced in the 1990s, allow the model to weigh the importance of different elements in a sequence independently of their positions. Early attempts at using self-attention, such as the Luong et al. (2015) model, showed promise but required significant computational resources and were not scalable to large datasets.\n\n#### Transformers\nThe transformer architecture, introduced in 2017, combines self-attention with positional encodings to enable parallel processing. By removing recurrence, transformers can handle long-range dependencies more effectively and achieve higher efficiency. This combination of self-attention and positional encodings addresses the limitations of RNNs and LSTMs, making transformers a powerful tool for sequence modeling.\n\nIn summary, the evolution of sequence modeling techniques, from RNNs and LSTMs to self-attention mechanisms, laid the groundwork for the transformer architecture. The transformer's ability to process sequences in parallel and handle long-range dependencies has made it a cornerstone in modern deep learning.\n\n### Attention with seq2seq\n\nThe seq2seq (sequence-to-sequence) model, originally proposed by Cho et al. (2014), forms the basis for many NLP tasks, including machine translation. Traditional seq2seq models use recurrent neural networks (RNNs) to encode the source sequence and decode the target sequence, often employing teacher forcing during training.\n\n#### Challenges with Early Models\nEarly seq2seq models faced several challenges:\n- **Vanishing Gradients**: RNNs suffer from vanishing gradients, making it difficult to learn long-range dependencies.\n- **Encoder-Decoder Alignment**: The alignment between the encoder and decoder can be poor, leading to suboptimal translations.\n- **Efficiency**: Training and inference with RNNs are computationally expensive, especially for long sequences.\n\n#### Improvements with Attention\nTo address these challenges, attention mechanisms were introduced. Attention allows the decoder to focus on different parts of the source sequence during each step of the decoding process, improving the alignment between the encoder and decoder. Key improvements include:\n- **Bahdanau Attention**: Introduced in 2014, this mechanism computes a weighted sum of the encoder outputs based on the current decoder state.\n- **Luong Attention**: Another type of attention that computes a weighted sum based on the similarity between the decoder state and the encoder outputs.\n- **Scaled Dot-Product Attention**: Proposed by Vaswani et al. (2017), this mechanism scales the dot product of query and key vectors by the square root of the dimensionality, allowing for more stable and efficient computation.\n\n#### Impact on Translation Quality and Efficiency\nIncorporating attention mechanisms in seq2seq models significantly improves translation quality and efficiency:\n- **Translation Quality**: Attention helps the model better align the source and target sequences, leading to more accurate translations.\n- **Efficiency**: Attention mechanisms reduce the computational burden by focusing on relevant parts of the source sequence, making the model more efficient and scalable.\n\n#### Comparison of Attention Strategies\nDifferent attention strategies have varying impacts on translation quality and efficiency:\n- **Bahdanau Attention**: Provides a good balance between quality and efficiency but may require more computational resources.\n- **Luong Attention**: Generally faster and less resource-intensive but may not capture long-range dependencies as effectively as Bahdanau Attention.\n- **Scaled Dot-Product Attention**: Offers a more efficient and scalable solution, making it suitable for large-scale applications.\n\nIn summary, the evolution of attention mechanisms in seq2seq models has greatly improved the quality and efficiency of machine translation, paving the way for the development of the transformer architecture.\n\n### Parallelizing Attention\n\nThe transformer architecture represents a significant departure from traditional seq2seq models by eliminating recurrence and enabling parallel processing. This shift has numerous benefits, particularly in terms of performance and efficiency.\n\n#### Development of Self-Attention Mechanisms\nSelf-attention mechanisms, introduced in the transformer architecture, allow the model to weigh the importance of different elements in a sequence independently of their positions. This parallelism is achieved through the use of self-attention layers, which compute attention scores between all pairs of tokens in the sequence simultaneously.\n\n#### Removal of Recurrence\nBy removing recurrence, transformers eliminate the sequential nature of RNNs and LSTMs, allowing for parallel processing. This means that the model can process all tokens in a sequence simultaneously, leading to significant speedups and improved scalability.\n\n#### Improved Performance and Efficiency\nThe removal of recurrence and the use of self-attention mechanisms facilitate parallel processing on GPUs, which are highly optimized for parallel operations. This results in improved performance and efficiency, particularly for large-scale language modeling tasks.\n\n#### Applications in Sequence-to-Sequence Tasks\nTransformers have shown remarkable performance in sequence-to-sequence tasks such as machine translation, text summarization, and dialogue generation. Their ability to handle long-range dependencies and process sequences in parallel makes them highly effective for these tasks.\n\nIn summary, the development of self-attention mechanisms and the removal of recurrence in transformer models have facilitated parallel processing, leading to improved performance and efficiency in sequence-to-sequence tasks.\n\n### AI Boom Era\n\nThe transformer architecture has had a profound impact on the AI boom era, transforming the landscape of natural language processing (NLP) and extending its influence to other domains. Here are some key applications and developments:\n\n#### Language Modeling\nTransformers have revolutionized language modeling by achieving state-of-the-art results on a wide range of benchmarks. Models like BERT, GPT, and T5 have set new standards for understanding and generating human-like text.\n\n#### Natural Language Generation\nTransformers have enabled significant advancements in natural language generation, allowing for more coherent and contextually relevant text generation. Applications include text summarization, question answering, and dialogue systems.\n\n#### Other Modalities\nBeyond text, transformers have been adapted for vision and multimodal tasks. Vision Transformers (ViTs) have shown promise in image classification and object detection, while multimodal transformers combine text and visual information to perform tasks like image captioning and video description.\n\n#### Impact on Various Domains\nThe transformer architecture has had a broad impact on various domains, including:\n- **Healthcare**: Transformers are used for biomedical text mining and drug discovery.\n- **Finance**: They help in sentiment analysis of financial news and risk assessment.\n- **Autonomous Vehicles**: Transformers assist in natural language understanding for vehicle control systems.\n\nIn summary, the transformer architecture has driven significant progress in NLP and extended its influence to other domains, making it a cornerstone of modern AI.\n\n### Training\n\nTraining transformer models involves several key processes and techniques that contribute to their effectiveness and performance. These include data preprocessing, model initialization, optimization, and regularization.\n\n#### Data Preprocessing\nData preprocessing is crucial for preparing input sequences for transformer models. This typically involves tokenization, padding, and creating input and target sequences. Tokenization converts text into discrete tokens, while padding ensures that all sequences have the same length.\n\n#### Model Initialization\nModel initialization plays a vital role in the training process. Proper initialization can help the model converge faster and achieve better performance. Techniques like Xavier initialization and Kaiming initialization are commonly used.\n\n#### Optimization\nOptimization algorithms are essential for training transformer models. Adam, a popular adaptive learning rate method, is widely used due to its efficiency and effectiveness. Other optimization techniques include momentum and learning rate scheduling.\n\n#### Regularization\nRegularization techniques are employed to prevent overfitting and improve generalization. Dropout and weight decay are common regularization methods used in transformer training.\n\nIn summary, the training of transformer models involves a series of processes and techniques that ensure optimal performance and generalization.\n\n### Methods for Stabilizing Training\n\nStabilizing the training of transformer models is crucial for achieving reliable and efficient learning. Several methods have been developed to address common issues such as vanishing gradients and instability during training.\n\n#### Learning Rate Warmup\nLearning rate warmup is a technique where the learning rate starts at a low value and gradually increases over the first few epochs. This helps the model converge more smoothly and prevents overshooting during the initial training phase.\n\n#### Modifications to Layer Normalization\nLayer normalization is a technique that normalizes the activations within a layer. Modifications to layer normalization, such as group normalization and layer scaling, can help stabilize training by reducing internal covariate shift.\n\nIn summary, learning rate warmup and modifications to layer normalization are effective methods for stabilizing the training of transformer models.\n\n### Pretrain-Finetune\n\nThe pretrain-finetune approach is a fundamental strategy in transformer models, leveraging self-supervised learning on large datasets followed by supervised fine-tuning on smaller, task-specific datasets. This approach has proven highly effective in tackling various natural language processing (NLP) tasks.\n\n#### Self-Supervised Learning\nSelf-supervised learning involves training the model on unlabeled data using auxiliary tasks that provide supervision signals. For example, masked language modeling (MLM) involves predicting masked tokens in a sequence, while next sentence prediction (NSP) involves predicting whether two sentences are consecutive in a document.\n\n#### Supervised Fine-Tuning\nAfter pretraining, the model is fine-tuned on labeled data specific to the task at hand. This involves adjusting the model's parameters to optimize performance on the target task. Fine-tuning is typically done using a smaller dataset and often requires fewer epochs compared to pretraining.\n\n#### Advantages\nThe pretrain-finetune approach offers several advantages:\n- **Generalization**: Pretraining on large datasets helps the model learn general patterns and representations, which can then be fine-tuned for specific tasks.\n- **Scalability**: Large pretrained models can be fine-tuned on smaller datasets, making them more practical for a wide range of applications.\n- **Transfer Learning**: The pretrained model can transfer knowledge from one domain to another, reducing the need for extensive training on each individual task.\n\nIn summary, the pretrain-finetune approach leverages self-supervised learning and supervised fine-tuning to achieve state-of-the-art performance on various NLP tasks.\n\n### Tasks\n\nTransformer models are applied to a wide range of language modeling tasks, each with its own unique characteristics and training approaches. Here are some key tasks and their associated training methods:\n\n#### Masked Language Modeling (MLM)\nMasked language modeling involves predicting masked tokens in a sequence. This task helps the model learn contextual representations by forcing it to predict missing words based on the surrounding context. The loss function typically used is cross-entropy loss.\n\n#### Autoregressive Language Modeling (ALM)\nAutoregressive language modeling involves predicting the next token in a sequence given the preceding tokens. This is commonly used in tasks like text generation and text summarization. The loss function is again cross-entropy loss, but it is computed sequentially.\n\n#### Prefix Language Modeling (PLM)\nPrefix language modeling involves predicting the next token in a sequence given a prefix of tokens. This task is useful for tasks like code generation and structured prediction. The loss function is similar to MLM and ALM, but the model is trained on partial sequences.\n\n#### Next Sentence Prediction (NSP)\nNext sentence prediction involves predicting whether two sentences are consecutive in a document. This task helps the model learn to understand the coherence and context of sentences. The loss function is typically binary cross-entropy loss.\n\n#### Training Approaches\nEach of these tasks requires a specific training approach:\n- **MLM**: Focuses on predicting masked tokens, encouraging the model to learn rich contextual representations.\n- **ALM**: Involves sequential prediction, helping the model generate coherent and contextually relevant text.\n- **PLM**: Trains the model to predict next tokens given prefixes, useful for structured prediction tasks.\n- **NSP**: Helps the model understand sentence coherence, improving its ability to handle context and meaning.\n\nIn summary, transformer models are versatile and can be applied to a wide range of language modeling tasks, each with its own training approach and loss function.\n\n### Architecture\n\nThe architecture of the transformer model is designed to enable efficient and effective sequence processing. It consists of several key components that work together to transform text into vector representations and generate output sequences.\n\n#### Components\n\n1. **Tokenizer**\n   - Converts text into tokens using a vocabulary.\n   - Handles out-of-vocabulary (OOV) tokens by mapping them to a special OOV token.\n\n2. **Embedding Layer**\n   - Transforms tokens into dense embedding vectors using a lookup table.\n   - Combines embeddings with positional encodings to account for token positions.\n\n3. **Transformer Layers**\n   - **Encoder Layers**:\n     - **Self-Attention Mechanism**: Computes attention scores between all pairs of tokens.\n     - **Feed-Forward Network (FFN)**: Processes the attended tokens through a fully connected layer.\n     - **Residual Connections**: Adds the input to the output of the FFN to preserve information.\n     - **Layer Normalization**: Normalizes the output to stabilize training.\n\n   - **Decoder Layers**:\n     - **Causally Masked Self-Attention**: Ensures that the decoder only attends to past tokens.\n     - **Cross-Attention**: Allows the decoder to attend to the encoder's output.\n     - **FFN**: Similar to the encoder's FFN.\n     - **Residual Connections**: Similar to the encoder's residual connections.\n     - **Layer Normalization**: Similar to the encoder's layer normalization.\n\n4. **Un-Embedding Layer**\n   - Maps the final output of the decoder to the vocabulary space.\n   - Often shares weights with the embedding layer (weight tying).\n\n5. **Positional Encoding**\n   - Provides information about token positions within a sequence.\n   - Enables the model to handle relative positions and attention mechanisms effectively.\n\n#### How Components Work Together\n\n1. **Tokenizer**: Converts text into tokens.\n2. **Embedding Layer**: Transforms tokens into dense vectors.\n3. **Positional Encoding**: Adds positional information to the embeddings.\n4. **Transformer Layers**: Process the embeddings through self-attention, feed-forward networks, and residual connections.\n5. **Un-Embedding Layer**: Generates the final output probabilities over the vocabulary.\n\nIn summary, the transformer architecture is composed of multiple components that work together to transform text into vector representations and generate output sequences.\n\n### Tokenization\n\nTokenization is a critical step in the transformer architecture, converting raw text into a sequence of tokens that the model can process. This process involves several important aspects:\n\n1. **Conversion to Tokens**\n   - **Word Tokenization**: Breaks down text into words or subwords.\n   - **Subword Tokenization**: Uses techniques like Byte Pair Encoding (BPE) or SentencePiece to handle rare or unknown words.\n\n2. **Role of Tokenizer**\n   - Manages the conversion of text into tokens.\n   - Ensures consistency and efficiency in the tokenization process.\n\n3. **Handling Out-of-Vocabulary (OOV) Tokens**\n   - Maps OOV tokens to a special token (e.g., `<unk>`).\n   - Helps the model handle unseen words gracefully.\n\nIn summary, tokenization is a crucial step in preparing text for transformer models, ensuring that the model can process and understand the input data effectively.\n\n### Embedding\n\nThe embedding layer in the transformer architecture transforms tokens into dense vector representations, enabling the model to capture semantic and syntactic information. This process involves several key steps:\n\n1. **Lookup Table**\n   - Maps each token to a corresponding embedding vector using a lookup table.\n   - Each token is assigned a unique index in the vocabulary.\n\n2. **Positional Encodings**\n   - Adds positional information to the embeddings to account for the order of tokens.\n   - Enables the model to understand the relative positions of tokens within a sequence.\n\n3. **Combining Embeddings and Positional Encodings**\n   - Concatenates the token embeddings with positional encodings.\n   - Ensures that the model can process sequences of varying lengths.\n\nIn summary, the embedding layer plays a critical role in transforming tokens into meaningful vector representations, which are essential for the transformer's ability to understand and generate text.\n\n### Un-Embedding\n\nThe un-embedding layer in the transformer architecture serves to map the final output of the model back to the vocabulary space, generating a probability distribution over possible tokens. This process is crucial for producing coherent and contextually relevant text.\n\n1. **Relationship with Embedding Layer**\n   - Shares weights with the embedding layer (weight tying).\n   - Ensures that the same linear transformation is applied in both directions.\n\n2. **Concept of Weight Tying**\n   - The same weights are used for both the embedding and un-embedding processes.\n   - Reduces the number of parameters and improves model efficiency.\n\nIn summary, the un-embedding layer is essential for generating the final output of the transformer model, ensuring that the model can produce meaningful and contextually relevant text.\n\n### Positional Encoding\n\nPositional encoding is a critical component of the transformer architecture, providing information about the position of tokens within a sequence. This is necessary because the model does not inherently know the order of tokens.\n\n1. **Concept of Positional Encoding**\n   - Adds positional information to the embeddings to account for the order of tokens.\n   - Enables the model to understand the relative positions of tokens within a sequence.\n\n2. **Mathematical Formulation**\n   - Typically involves sine and cosine functions of different frequencies.\n   - The positional encoding for position \\( p \\) and dimension \\( d \\) is given by:\n     \\[\n     PE(p, d) = \\begin{cases} \n     \\sin\\left(\\frac{p}{10000^{d/2}}\\right) & \\text{if } d \\text{ is even} \\\\\n     \\cos\\left(\\frac{p}{10000^{(d-1)/2}}\\right) & \\text{if } d \\text{ is odd}\n     \\end{cases}\n     \\]\n\n3. **Significance**\n   - Allows the model to capture long-range dependencies.\n   - Enables the model to understand the order of tokens without relying on recurrence.\n\nIn summary, positional encoding is a key mechanism in the transformer architecture, providing positional information to the model and enabling it to understand the relative positions of tokens within a sequence.\n\n### Encoder-Decoder (Overview)\n\nThe encoder-decoder architecture in the original transformer model processes input tokens and generates output by utilizing self-attention and cross-attention mechanisms, while incorporating feed-forward networks, residual connections, and layer normalization.\n\n1. **Encoder**\n   - Processes the input sequence through multiple encoder layers.\n   - Each layer includes self-attention and feed-forward networks.\n   - Residual connections and layer normalization ensure numerical stability and training efficiency.\n\n2. **Decoder**\n   - Processes the input sequence through multiple decoder layers.\n   - Each layer includes causally masked self-attention, cross-attention, and feed-forward networks.\n   - Residual connections and layer normalization ensure numerical stability and training efficiency.\n\n3. **Self-Attention Mechanism**\n   - Computes attention scores between all pairs of tokens within the same sequence.\n   - Allows the model to weigh the importance of different tokens independently of their positions.\n\n4. **Cross-Attention Mechanism**\n   - Allows the decoder to attend to the encoder's output.\n   - Enables the model to incorporate information from the encoder into the generated output.\n\n5. **Feed-Forward Network**\n   - Processes the attended tokens through a fully connected layer.\n   - Adds nonlinearity to the model.\n\n6. **Residual Connections**\n   - Adds the input to the output of the feed-forward network to preserve information.\n   - Helps the model learn additive transformations.\n\n7. **Layer Normalization**\n   - Normalizes the output of each layer to stabilize training.\n   - Ensures that the model remains numerically stable during training.\n\nIn summary, the encoder-decoder architecture in the transformer model processes input tokens and generates output through a series of self-attention, cross-attention, and feed-forward operations, ensuring efficient and effective sequence processing.\n\n### Feedforward Network\n\nThe feedforward network module in a transformer model plays a crucial role in processing attended tokens through a fully connected layer. This module is essential for adding nonlinearity and capturing complex relationships between tokens.\n\n1. **Structure**\n   - Consists of two linear transformations separated by an activation function.\n   - The intermediate size (hidden size) is typically larger than the embedding size.\n\n2. **Role of Weight Matrices and Bias Vectors**\n   - **Weight Matrices**: Define the linear transformations.\n   - **Bias Vectors**: Shift the output of the linear transformations.\n\n3. **Activation Functions**\n   - Common choices include ReLU, GELU, and SwiGLU.\n   - ReLU introduces nonlinearity but can cause dead neurons.\n   - GELU and SwiGLU provide smoother nonlinearities and better performance in some cases.\n\n4. **Intermediate Size**\n   - The intermediate size is usually larger than the embedding size to capture more complex patterns.\n   - The ratio of the intermediate size to the embedding size is often around 4:1.\n\nIn summary, the feedforward network in a transformer model adds nonlinearity and captures complex relationships between tokens, enhancing the model's ability to learn intricate patterns in the data.\n\n### Scaled Dot-Product Attention\n\nScaled dot-product attention is a key mechanism in the transformer architecture, enabling the model to weigh the importance of different tokens in a sequence. This mechanism is crucial for capturing dependencies between tokens and improving the efficiency and effectiveness of the attention mechanism.\n\n1. **Function**\n   - Computes attention scores between query, key, and value vectors.\n   - Normalizes these scores to obtain attention weights.\n   - Uses the attention weights to compute a weighted sum of the value vectors.\n\n2. **Mathematical Formulation**\n   - Given query \\( Q \\), key \\( K \\), and value \\( V \\), the scaled dot-product attention is defined as:\n     \\[\n     \\text{Attention}(Q, K, V) = \\text{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V\n     \\]\n   - \\( d_k \\) is the dimensionality of the key vectors.\n\n3. **Significance**\n   - Allows the model to focus on relevant tokens.\n   - Enables the model to capture long-range dependencies.\n   - Improves the efficiency and effectiveness of the attention mechanism.\n\nIn summary, scaled dot-product attention is a fundamental mechanism in the transformer architecture, enabling the model to weigh the importance of different tokens and capture long-range dependencies efficiently.\n\n### Attention Head\n\nAn attention head in the transformer architecture utilizes scaled dot-product attention to compute attention weights and output vectors. This mechanism is crucial for capturing various relevance relations and improving the model's ability to understand complex token dependencies.\n\n1. **Query, Key, and Value Matrices**\n   - **Query Matrix (Q)**: Represents the tokens to be attended.\n   - **Key Matrix (K)**: Represents the tokens that are being attended.\n   - **Value Matrix (V)**: Contains the values to be weighted.\n\n2. **Softmax Normalization**\n   - Computes the attention weights using the formula:\n     \\[\n     \\text{Attention}(Q, K, V) = \\text{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V\n     \\]\n   - \\( d_k \\) is the dimensionality of the key vectors.\n\n3. **Matrix Operations**\n   - The attention weights are used to compute a weighted sum of the value vectors:\n     \\[\n     \\text{Output} = \\text{Attention}(Q, K, V)\n     \\]\n\n4. **Significance**\n   - Allows the model to focus on relevant tokens.\n   - Captures various relevance relations between tokens.\n   - Improves the model's ability to understand complex token dependencies.\n\nIn summary, the attention head in the transformer architecture computes attention weights and output vectors using scaled dot-product attention, enabling the model to capture various relevance relations and improve its understanding of complex token dependencies.\n\n### Multiheaded Attention\n\nMultiheaded attention in the transformer architecture involves using multiple attention heads in parallel to capture various relevance relations and improve the model's ability to understand complex token dependencies. This mechanism is crucial for enhancing the model's performance and robustness.\n\n1. **Parallel Attention Heads**\n   - Multiple attention heads are used in parallel.\n   - Each head focuses on different aspects of the input sequence.\n\n2. **Linear Projections**\n   - The query, key, and value matrices are projected using linear transformations.\n   - This allows each head to focus on different dimensions of the input sequence.\n\n3. **Concatenation of Outputs**\n   - The outputs of all heads are concatenated.\n   - A final linear projection combines the outputs into a single vector.\n\n4. **Advantages**\n   - Captures different relevance relations between tokens.\n   - Improves the model's ability to understand complex token dependencies.\n   - Enhances the model's performance on tasks requiring nuanced understanding.\n\nIn summary, multiheaded attention in the transformer architecture uses multiple attention heads in parallel to capture various relevance relations and improve the model's ability to understand complex token dependencies, enhancing its performance and robustness.\n\n### Masked Attention\n\nMasked attention in transformer architectures ensures autoregressive properties by preventing the model from attending to future tokens during training. This is crucial for tasks like autoregressive language modeling, where the model must generate text in a sequential manner.\n\n1. **Causal Masking**\n   - Masks the upper triangular part of the attention matrix.\n   - Ensures that the model only attends to past tokens.\n   - Prevents information leakage from future tokens.\n\n2. **Structure of Mask Matrix**\n   - The mask matrix is a square matrix with ones below the diagonal and zeros above.\n   - The shape of the mask matrix is the same as the attention matrix.\n\n3. **Variations**\n   - Some models, like XLNet, use more complex mask matrices to allow bidirectional attention.\n   - These variations enable the model to consider both past and future contexts, enhancing its understanding of the input sequence.\n\n4. **Impact on Positional Encoding**\n   - Causal masking affects the positional encoding, as the model needs to understand the relative positions of tokens within the sequence.\n   - Positional encodings are adjusted to account for the masked attention.\n\nIn summary, masked attention in transformer architectures ensures autoregressive properties by preventing the model from attending to future tokens, making it suitable for tasks like autoregressive language modeling.\n\n### Encoder\n\nThe encoder in a transformer architecture processes the input sequence through multiple encoder layers, each consisting of self-attention and feed-forward networks. This structure enables the model to capture complex dependencies and generate meaningful representations.\n\n1. **Self-Attention Mechanism**\n   - Computes attention scores between all pairs of tokens within the same sequence.\n   - Allows the model to weigh the importance of different tokens independently of their positions.\n\n2. **Feed-Forward Network**\n   - Processes the attended tokens through a fully connected layer.\n   - Adds nonlinearity to the model.\n\n3. **Residual Connections**\n   - Adds the input to the output of the feed-forward network to preserve information.\n   - Helps the model learn additive transformations.\n\n4. **Layer Normalization**\n   - Normalizes the output of each layer to stabilize training.\n   - Ensures that the model remains numerically stable during training.\n\n5. **Output**\n   - The output of the encoder is passed to the decoder as the encoder's output.\n\nIn summary, the encoder in a transformer architecture processes the input sequence through multiple layers, each containing self-attention and feed-forward networks, to generate meaningful representations.\n\n### Decoder\n\nThe decoder in a transformer architecture processes the input sequence through multiple decoder layers, each consisting of causally masked self-attention, cross-attention, and feed-forward networks. This structure enables the model to generate output sequences while preventing reverse information flow.\n\n1. **Causally Masked Self-Attention**\n   - Ensures that the decoder only attends to past tokens.\n   - Prevents the model from using future information during training.\n\n2. **Cross-Attention**\n   - Allows the decoder to attend to the encoder's output.\n   - Enables the model to incorporate information from the encoder into the generated output.\n\n3. **Feed-Forward Network**\n   - Processes the attended tokens through a fully connected layer.\n   - Adds nonlinearity to the model.\n\n4. **Residual Connections**\n   - Adds the input to the output of the feed-forward network to preserve information.\n   - Helps the model learn additive transformations.\n\n5. **Layer Normalization**\n   - Normalizes the output of each layer to stabilize training.\n   - Ensures that the model remains numerically stable during training.\n\n6. **Output**\n   - The output of the decoder is used to generate the final sequence.\n\nIn summary, the decoder in a transformer architecture processes the input sequence through multiple layers, each containing causally masked self-attention, cross-attention, and feed-forward networks, to generate output sequences while preventing reverse information flow.\n\n### Adapted Architectures\n\nLarge language models often adapt the original transformer architecture by using either the encoder or decoder components, depending on the specific task requirements. Two prominent examples are GPT (Generative Pre-trained Transformer) and BERT (Bidirectional Encoder Representations from Transformers).\n\n1. **GPT**\n   - Uses only the decoder component.\n   - Focuses on generating text conditioned on a context.\n   - Examples include text generation and language modeling.\n\n2. **BERT**\n   - Uses both the encoder and decoder components.\n   - Focuses on understanding text in a bidirectional manner.\n   - Examples include masked language modeling and next sentence prediction.\n\nIn summary, large language models adapt the original transformer architecture by using either the encoder or decoder components, tailored to specific task requirements.\n\n### Full Transformer Architecture\n\nThe full transformer architecture combines the encoder and decoder components to process input tokens and generate output sequences. This architecture is designed to handle a wide range of sequence-to-sequence tasks, including machine translation, text summarization, and dialogue generation.\n\n1. **Components**\n   - **Tokenizer**: Converts text into tokens.\n   - **Embedding Layer**: Transforms tokens into dense vector representations.\n   - **Positional Encoding**: Adds positional information to the embeddings.\n   - **Encoder Layers**: Process the embeddings through self-attention and feed-forward networks.\n   - **Decoder Layers**: Process the embeddings through causally masked self-attention, cross-attention, and feed-forward networks.\n   - **Un-Embedding Layer**: Maps the final output of the decoder to the vocabulary space.\n\n2. **Functionality**\n   - **Encoder**: Processes the input sequence to generate a fixed-length representation.\n   - **Decoder**: Generates the output sequence based on the encoder's representation and the input sequence.\n\n3. **Overall Operation**\n   - The encoder processes the input sequence to generate a fixed-length representation.\n   - The decoder generates the output sequence based on the encoder's representation and the input sequence.\n\nIn summary, the full transformer architecture combines the encoder and decoder components to process input tokens and generate output sequences, enabling the model to handle a wide range of sequence-to-sequence tasks.\n\n### Sublayers\n\nThe sublayers in Transformer encoder and decoder layers play a crucial role in ensuring numerical stability and training efficiency. These sublayers include residual connections and layer normalization, which are essential for the model's overall performance.\n\n1. **Residual Connections**\n   - Add the input to the output of the sublayer to preserve information.\n   - Help the model learn additive transformations.\n   - Enable the model to learn more complex patterns.\n\n2. **Layer Normalization**\n   - Normalize the output of each sublayer to stabilize training.\n   - Ensure that the model remains numerically stable during training.\n   - Reduce internal covariate shift.\n\nIn summary, the sublayers in Transformer encoder and decoder layers, including residual connections and layer normalization, are essential for ensuring numerical stability and training efficiency.\n\n### Pseudocode\n\nThe pre-LN (pre-layer normalization) encoder-decoder Transformer architecture can be described using pseudocode, detailing how the encoder and decoder processes work. This pseudocode highlights the roles of tokenization, embedding, multi-headed attention, and layer normalization.\n\n1. **Preprocessing**\n   - Tokenize the input sequence.\n   - Embed the tokens into dense vectors.\n   - Add positional encodings to the embeddings.\n\n2. **Encoder**\n   - For each encoder layer:\n     - Compute self-attention.\n     - Apply residual connection.\n     - Normalize the output.\n     - Apply feed-forward network.\n     - Apply residual connection.\n     - Normalize the output.\n\n3. **Decoder**\n   - For each decoder layer:\n     - Compute causally masked self-attention.\n     - Apply residual connection.\n     - Normalize the output.\n     - Compute cross-attention.\n     - Apply residual connection.\n     - Normalize the output.\n     - Apply feed-forward network.\n     - Apply residual connection.\n     - Normalize the output.\n\n4. **Final Output**\n   - Un-embed the final output of the decoder to get the probability distribution over the vocabulary.\n\nIn summary, the pseudocode for the pre-LN encoder-decoder Transformer architecture provides a detailed overview of the encoder and decoder processes, including tokenization, embedding, multi-headed attention, and layer normalization.\n\n### Terminology\n\nThe transformer architecture has several variations and related concepts that are important to understand. Here is an explanation of these terminologies:\n\n1. **Encoder-Only Models**\n   - Models that use only the encoder component.\n   - Examples include GPT and BERT.\n\n2. **Decoder-Only Models**\n   - Models that use only the decoder component.\n   - Examples include T5 and XLM-R.\n\n3. **Encoder-Decoder Models**\n   - Models that use both the encoder and decoder components.\n   - Examples include Transformer and BART.\n\n4. **PrefixLM (Prefix Language Modeling)**\n   - Models that predict the next token given a prefix of tokens.\n   - Useful for tasks like code generation and structured prediction.\n\n5. **Mixed Seq2Seq Models**\n   - Models that combine elements of encoder-only and decoder-only architectures.\n   - Examples include M2M-100 and Unicoder.\n\nIn summary, the transformer architecture has several variations and related concepts, each tailored to specific task requirements.\n\n### Subsequent Work\n\nSince the introduction of the transformer architecture, there have been numerous advancements and variations that have emerged in the field of deep learning. These innovations have significantly impacted various applications and pushed the boundaries of what is possible with transformer models.\n\n1. **Efficient Implementations**\n   - Techniques like FlashAttention and KV caching have been developed to optimize inference and training.\n   - These optimizations have made transformer models more efficient and scalable.\n\n2. **Alternative Activation Functions**\n   - Alternatives like SwiGLU and GELU have been integrated to enhance performance in models such as Llama, PaLM, GPT-1, and BERT.\n\n3. **Alternative Normalizations**\n   - Techniques like RMSNorm, CapsuleNorm, ScaleNorm, and FixNorm have been explored to improve training stability and efficiency.\n\n4. **Alternative Positional Encodings**\n   - Methods like learned positional encodings and causal masking have been used to enhance positional encoding capabilities.\n\n5. **Rotary Positional Embedding (RoPE)**\n   - RoPE encodes positional information using trigonometric transformations and complex numbers, maintaining relative positional relationships between vectors.\n\n6. **Attention with Linear Biases (ALiBi)**\n   - ALiBi incorporates a linear bias matrix to enhance the attention mechanism, improving pretraining and compatibility with various positional encoders.\n\n7. **Relative Position Encodings**\n   - Relative position encodings differ from absolute positional encodings by using a Toeplitz matrix, impacting attention mechanisms.\n\n8. **Speculative Decoding**\n   - Speculative decoding accelerates token decoding by using a smaller model or heuristic for initial token generation and a larger model for verification.\n\n9. **Sub-Quadratic Transformers**\n   - Techniques like the Swin Transformer, SepTr, and Long Range Arena aim to improve efficiency in processing long inputs across various domains.\n\n10. **Alternative Attention Graphs**\n    - Models like Reformer and BigBird address computational inefficiencies by reducing complexity and memory requirements.\n\n11. **Random Feature Attention**\n    - Random Feature Attention approximates traditional attention mechanisms using Fourier random features, offering linear time complexity and improved performance.\n\n12. **Multimodal Transformers**\n    - Transformers have been adapted for multimodal applications, including vision, speech, and image generation, with models like Vision Transformers, Conformer, Whisper, and various image generation architectures.\n\nIn summary, subsequent work in the transformer architecture has led to numerous advancements and variations, pushing the boundaries of what is possible in deep learning and expanding the scope of applications.\n\n### Alternative Activation Functions\n\nThe transformer architecture has seen the integration of various activation functions to enhance performance and efficiency. These alternatives include SwiGLU and GELU, which have been used in models like Llama, PaLM, GPT-1, and BERT.\n\n1. **SwiGLU (Swish-Gated Linear Unit)**\n   - Combines the Swish activation function with a gating mechanism.\n   - Improves the model's ability to learn complex patterns and reduces computational cost.\n\n2. **GELU (Gaussian Error Linear Unit)**\n   - Smoothly approximates the ReLU activation function.\n   - Provides a better fit for the distribution of activations and improves training stability.\n\n3. **Benefits**\n   - Enhanced model performance and efficiency.\n   - Reduced computational cost compared to traditional activation functions.\n\nIn summary, the use of alternative activation functions like SwiGLU and GELU has improved the performance and efficiency of transformer models.\n\n### Alternative Normalizations\n\nTransformer architectures have incorporated various normalization techniques to improve training stability and efficiency. These include RMSNorm, CapsuleNorm, ScaleNorm, and FixNorm.\n\n1. **RMSNorm**\n   - Normalizes the output using the root mean square (RMS) of the activations.\n   - Reduces internal covariate shift and improves training stability.\n\n2. **CapsuleNorm**\n   - Normalizes the output based on the capsule norm.\n   - Enhances the model's ability to handle complex patterns and improves training efficiency.\n\n3. **ScaleNorm**\n   - Normalizes the output by scaling the activations.\n   - Simplifies the normalization process and improves training stability.\n\n4. **FixNorm**\n   - Normalizes the output using a fixed scaling factor.\n   - Reduces the need for adaptive scaling and improves training efficiency.\n\n5. **Benefits**\n   - Enhanced training stability and efficiency.\n   - Reduced computational cost compared to traditional normalization techniques.\n\nIn summary, alternative normalization techniques have improved the training stability and efficiency of transformer models.\n\n### Alternative Positional Encodings\n\nTransformer architectures have experimented with various methods of positional encoding to enhance the model's ability to understand the order of tokens. These methods include learned positional encodings and causal masking.\n\n1. **Learned Positional Encodings**\n   - Learnable embeddings that capture positional information.\n   - Provide flexibility and can adapt to different sequence lengths.\n\n2. **Causal Masking**\n   - Masks the upper triangular part of the attention matrix.\n   - Ensures that the model only attends to past tokens, preventing information leakage from future tokens.\n\n3. **Benefits**\n   - Enhanced ability to understand the order of tokens.\n   - Improved model performance on tasks requiring sequential understanding.\n\nIn summary, alternative positional encoding methods have improved the transformer's ability to understand the order of tokens and enhance model performance.\n\n### Rotary Positional Embedding (RoPE)\n\nRotary positional embedding (RoPE) is a method used in transformer architectures to encode positional information using trigonometric transformations and complex numbers. This technique maintains relative positional relationships between vectors, enhancing the model's ability to understand the order of tokens.\n\n1. **Concept**\n   - Rotates the input embeddings along the frequency axis.\n   - Uses trigonometric functions to encode positional information.\n\n2. **Mathematical Formulation**\n   - The rotated embeddings are given by:\n     \\[\n     \\text{RoPE}(x) = \\begin{pmatrix} \\cos(x) & -\\sin(x) \\\\ \\sin(x) & \\cos(x) \\end{pmatrix} \\begin{pmatrix} x_1 \\\\ x_2 \\end{pmatrix}\n     \\]\n   - Where \\( x \\) is the input embedding and the rotation angle is determined by the position.\n\n3. **Advantages**\n   - Maintains relative positional relationships between vectors.\n   - Improves the model's ability to understand the order of tokens.\n   - Enhances performance on tasks requiring sequential understanding.\n\nIn summary, RoPE provides a flexible and effective method for encoding positional information in transformer architectures.\n\n### Attention with Linear Biases (ALiBi)\n\nAttention with Linear Biases (ALiBi) is a technique used in transformer architectures to enhance the attention mechanism by incorporating a linear bias matrix. This method improves pretraining and compatibility with various positional encoders.\n\n1. **Concept**\n   - ALiBi uses a linear bias matrix to adjust the attention scores.\n   - The bias matrix ensures that the model can attend to past tokens without explicit masking.\n\n2. **Mathematical Formulation**\n   - The attention scores are adjusted using the linear bias matrix:\n     \\[\n     \\text{ALiBi}(Q, K) = \\text{softmax}\\left(QK^T + B\\right)\n     \\]\n   - Where \\( B \\) is the linear bias matrix.\n\n3. **Advantages**\n   - Improves pretraining and compatibility with various positional encoders.\n   - Reduces the need for explicit masking, simplifying the model architecture.\n   - Enhances the model's ability to understand the order of tokens.\n\nIn summary, ALiBi provides a flexible and efficient method for enhancing the attention mechanism in transformer architectures.\n\n### Relative Position Encodings\n\nRelative position encodings in transformer architectures differ from absolute position encodings by using a Toeplitz matrix. This method impacts the attention mechanism by capturing the relative positions between tokens.\n\n1. **Concept**\n   - Relative position encodings use a Toeplitz matrix to represent the relative positions between tokens.\n   - The matrix is designed to capture the relationship between tokens without explicit positional information.\n\n2. **Mathematical Formulation**\n   - The relative position encodings are given by:\n     \\[\n     \\text{Relative Position Encodings}(p) = \\begin{pmatrix} e_{p-1}, e_{p-2}, \\dots, e_0, e_{-1}, \\dots, e_{-(p-1)} \\end{pmatrix}\n     \\]\n   - Where \\( e_i \\) are the learned embeddings for relative positions.\n\n3. **Advantages**\n   - Captures the relative positions between tokens.\n   - Reduces the need for explicit positional information.\n   - Enhances the model's ability to understand the order of tokens.\n\nIn summary, relative position encodings provide a flexible and efficient method for capturing the relative positions between tokens in transformer architectures.\n\n### Efficient Implementation\n\nThe transformer model has been efficiently implemented in popular deep learning frameworks, with Hugging Face's Transformers library providing transformer-based architectures and pretrained models. This library simplifies the implementation and deployment of transformer models.\n\n1. **Efficient Implementation in Frameworks**\n   - PyTorch and TensorFlow provide efficient implementations of transformer models.\n   - Libraries like Hugging Face's Transformers offer optimized versions of transformer models.\n\n2. **Hugging Face's Transformers Library**\n   - Provides a wide range of transformer-based architectures.\n   - Offers pretrained models for various tasks.\n   - Simplifies model training, evaluation, and deployment.\n\n3. **Benefits**\n   - Enhanced efficiency and performance.\n   - Simplified implementation and deployment.\n   - Access to a wide range of pretrained models.\n\nIn summary, efficient implementation in popular deep learning frameworks and the use of libraries like Hugging Face's Transformers have made transformer models more accessible and efficient.\n\n### KV Caching\n\nKV caching optimizes the inference process in autoregressive transformers, particularly in scenarios with repeated prompt use. This technique improves the efficiency and speed of inference by reusing previously computed key-value pairs.\n\n1. **Concept**\n   - KV caching stores the key-value pairs of previously computed attention scores.\n   - These pairs are reused during inference for repeated prompts.\n\n2. **Benefits**\n   - Reduces the computational cost of repeated prompts.\n   - Improves the speed of inference.\n   - Enhances the efficiency of online chatbots and similar applications.\n\nIn summary, KV caching optimizes the inference process in autoregressive transformers, making it more efficient and faster for repeated prompt use.\n\n### FlashAttention\n\nFlashAttention is an advanced implementation of the attention mechanism that aims to handle longer context lengths and improve efficiency on GPUs. FlashAttention-2 builds upon the original FlashAttention and offers further improvements.\n\n1. **Concept**\n   - FlashAttention uses a novel algorithm to compute attention scores in parallel.\n   - This approach reduces the computational cost and memory requirements.\n\n2. **Performance Improvements**\n   - Handles longer context lengths more efficiently.\n   - Improves performance on GPUs.\n   - Provides better memory utilization.\n\n3. **Impact**\n   - Enhances the efficiency of transformer models.\n   - Enables the use of larger models and longer sequences.\n\nIn summary, FlashAttention and FlashAttention-2 provide significant improvements in the efficiency and performance of transformer models, particularly on GPUs.\n\n### Multi-Query Attention\n\nMulti-Query Attention modifies the traditional multiheaded attention mechanism in transformer models, affecting model quality, training speed, and inference speed. This method introduces grouped-query attention and relates to Multihead Latent Attention.\n\n1. **Concept**\n   - Multi-Query Attention uses a single query to attend to multiple keys and values.\n   - This reduces the number of parameters and computations.\n\n2. **Impact on Model Quality**\n   - Can improve model quality by focusing on relevant tokens.\n   - May lead to better performance on certain tasks.\n\n3. **Training Speed**\n   - Reduces the number of parameters and computations, improving training speed.\n   - Simplifies the model architecture.\n\n4. **Inference Speed**\n   - Faster inference due to reduced computations.\n   - Suitable for real-time applications.\n\n5. **Grouped-Query Attention**\n   - Divides the queries into groups to attend to different subsets of keys and values.\n   - Enhances the model's ability to capture complex dependencies.\n\n6. **Multihead Latent Attention**\n   - A related method that combines multiple query heads to capture latent dependencies.\n   - Improves the model's ability to understand complex token interactions.\n\nIn summary, Multi-Query Attention modifies the traditional multiheaded attention mechanism, affecting model quality, training speed, and inference speed, while Grouped-Query Attention and Multihead Latent Attention further enhance the model's ability to capture complex dependencies.\n\n### Speculative Decoding\n\nSpeculative decoding in transformer models accelerates token decoding by using a smaller model or heuristic for initial token generation and a larger model for verification. This method balances speed and accuracy in both greedy and non-greedy decoding scenarios.\n\n1. **Concept**\n   - Uses a smaller model for initial token generation.\n   - Employs heuristics to generate candidate tokens.\n   - Verifies the candidate tokens using a larger model.\n\n2. **Greedy Decoding**\n   - Generates tokens one by one using the smaller model.\n   - Verifies the generated tokens using the larger model.\n\n3. **Non-Greedy Decoding**\n   - Generates multiple candidate tokens using the smaller model.\n   - Verifies the best candidates using the larger model.\n\n4. **Benefits**\n   - Accelerates token decoding.\n   - Balances speed and accuracy.\n   - Suitable for applications requiring fast responses.\n\nIn summary, speculative decoding in transformer models accelerates token decoding by using a smaller model for initial token generation and a larger model for verification, balancing speed and accuracy in both greedy and non-greedy decoding scenarios.\n\n### Sub-Quadratic Transformers\n\nSub-quadratic transformers aim to improve efficiency in processing long inputs across various domains. Notable architectures and benchmarks include the Swin Transformer, SepTr, and Long Range Arena.\n\n1. **Swin Transformer**\n   - Designed for vision tasks, particularly image classification and object detection.\n   - Uses shifted window attention to process local regions of the input.\n   - Improves efficiency and performance on large images.\n\n2. **SepTr**\n   - A sub-quadratic transformer architecture for sequence processing.\n   - Uses separable convolutions to reduce the computational complexity.\n   - Enhances efficiency and scalability for long sequences.\n\n3. **Long Range Arena**\n   - A benchmark for evaluating the performance of long-range transformers.\n   - Tests models on tasks requiring long-range dependencies.\n   - Provides a standardized evaluation framework.\n\n4. **Benefits**\n   - Improved efficiency and performance.\n   - Enhanced scalability for long inputs.\n   - Better handling of complex dependencies.\n\nIn summary, sub-quadratic transformers like Swin Transformer, SepTr, and Long Range Arena improve efficiency and scalability for processing long inputs, making them suitable for various domains.\n\n### Alternative Attention Graphs\n\nAlternative attention graphs, such as those used in Reformer and BigBird, address the computational inefficiencies of standard attention mechanisms in transformers by reducing complexity and memory requirements.\n\n1. **Reformer**\n   - Uses linear attention to reduce the quadratic complexity of standard attention.\n   - Employs hashing techniques to approximate the attention scores.\n   - Improves efficiency and scalability for long sequences.\n\n2. **BigBird**\n   - Combines random and local attention to reduce the computational complexity.\n   - Uses a mixture of global and local attention mechanisms.\n   - Enhances efficiency and performance on long sequences.\n\n3. **Benefits**\n   - Reduced computational complexity and memory requirements.\n   - Improved efficiency and scalability.\n   - Better handling of long-range dependencies.\n\nIn summary, alternative attention graphs like Reformer and BigBird reduce the computational complexity and memory requirements of standard attention mechanisms, improving efficiency and scalability for long sequences.\n\n### Random Feature Attention\n\nRandom Feature Attention approximates traditional attention mechanisms in transformers using Fourier random features, offering linear time complexity and improved performance. This method is particularly useful in models like the Performer.\n\n1. **Concept**\n   - Random Feature Attention uses random features to approximate the attention scores.\n   - The random features are derived from Fourier transforms.\n   - Provides linear time complexity for computing attention scores.\n\n2. **Mathematical Formulation**\n   - The attention scores are approximated using random features:\n     \\[\n     \\text{Attention}(Q, K, V) \\approx \\text{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V\n     \\]\n   - Where the attention scores are approximated using random features.\n\n3. **Advantages**\n   - Linear time complexity for computing attention scores.\n   - Improved performance and efficiency.\n   - Reduced computational cost.\n\nIn summary, Random Feature Attention provides a flexible and efficient method for approximating traditional attention mechanisms in transformers, offering linear time complexity and improved performance.\n\n### Multimodality\n\nTransformers have been adapted for multimodal applications beyond text, including vision, speech, and image generation. Specific models and techniques like Vision Transformers (ViTs), Conformer, Whisper, and various image generation architectures have been developed.\n\n1. **Vision Transformers (ViTs)**\n   - Adapted from text-based transformers to process image data.\n   - Treat images as sequences of patches.\n   - Use self-attention mechanisms to capture spatial dependencies.\n\n2. **Conformer**\n   - Combines convolutional and self-attention mechanisms.\n   - Enhances the model's ability to capture local and global dependencies.\n   - Improves performance on speech recognition tasks.\n\n3. **Whisper**\n   - A transformer-based model for speech recognition and text generation.\n   - Combines speech and text processing.\n   - Enables end-to-end speech-to-text and text-to-speech tasks.\n\n4. **Image Generation**\n   - Models like StyleGAN and DALL-E use transformers for generating images.\n   - Combine text and visual information to generate coherent images.\n   - Improve the quality and diversity of generated images.\n\n5. **Benefits**\n   - Enhanced ability to process and generate multimodal data.\n   - Improved performance on tasks requiring cross-modal understanding.\n   - Broader applicability in various domains.\n\nIn summary, transformers have been adapted for multimodal applications, including vision, speech, and image generation, with specific models and techniques like ViTs, Conformer, Whisper, and image generation architectures.\n\n### Applications\n\nThe transformer architecture has been successfully applied in various fields, demonstrating its versatility and impact. Key applications include:\n\n1. **Natural Language Processing (NLP)**\n   - Language modeling and text generation.\n   - Machine translation and text summarization.\n   - Question answering and dialogue systems.\n\n2. **Biological Sequence Analysis**\n   - Protein and DNA sequence analysis.\n   - Predicting protein structures and functions.\n   - Genomic data analysis.\n\n3. **Computer Vision**\n   - Image classification and object detection.\n   - Semantic segmentation and instance segmentation.\n   - Generative models for image synthesis.\n\n4. **Chess Evaluation**\n   - Evaluating chess positions and move predictions.\n   - Improving the performance of chess engines.\n\n5. **Other Domains**\n   - Finance: Sentiment analysis and risk assessment.\n   - Healthcare: Biomedical text mining and drug discovery.\n   - Autonomous Vehicles: Natural language understanding for vehicle control systems.\n\nIn summary, the transformer architecture has been successfully applied in various fields, demonstrating its versatility and impact in tasks ranging from natural language processing to computer vision and beyond.\n\n### See Also\n\nThe Transformer architecture is closely related to several other machine learning models and techniques, differing in design and application for various tasks:\n\n1. **Recurrent Neural Networks (RNNs)**\n   - Sequential processing models.\n   - Handle long-range dependencies through recurrence.\n   - Less efficient than transformers for parallel processing.\n\n2. **Long Short-Term Memory Networks (LSTMs)**\n   - Improved RNNs with cell states and gates.\n   - Better handling of long-range dependencies.\n   - Still less efficient than transformers for parallel processing.\n\n3. **Convolutional Neural Networks (CNNs)**\n   - Local connectivity and shared weights.\n   - Effective for spatial hierarchies.\n   - Not designed for sequential data processing.\n\n4. **Self-Attention Mechanisms**\n   - Core mechanism in transformers.\n   - Enables parallel processing and handling of long-range dependencies.\n   - Used in various models beyond transformers.\n\n5. **Bidirectional Transformers**\n   - Models like BERT that incorporate bidirectional training.\n   - Better understanding of context.\n   - More complex than unidirectional transformers.\n\n6. **Multimodal Transformers**\n   - Models that process multiple modalities (e.g., text, vision).\n   - Combine information from different sources.\n   - Used in tasks like image captioning and video description.\n\nIn summary, the Transformer architecture is closely related to other machine learning models and techniques, each with its own strengths and applications.\n\n### Notes\n\nThe key points and references supporting the understanding and application of the Transformer architecture in deep learning include:\n\n1. **Core Concepts**\n   - Self-attention mechanisms.\n   - Positional encodings.\n   - Encoder-decoder architecture.\n   - Pretrain-finetune approach.\n\n2. **Influential Works**\n   - Vaswani et al. (2017): \"Attention Is All You Need.\"\n   - Devlin et al. (2018): \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.\"\n   - Radford et al. (2019): \"Language Models are Few-Shot Learners.\"\n\n3. **Technical Details**\n   - Scaled dot-product attention.\n   - Multiheaded attention.\n   - Causal masking.\n\n4. **Applications**\n   - Language modeling.\n   - Machine translation.\n   - Text summarization.\n   - Speech recognition.\n\nIn summary, the key points and references provide a comprehensive understanding of the Transformer architecture and its applications in deep learning.\n\n### References\n\nKey academic papers and influential works that have contributed to the development and understanding of the Transformer architecture in deep learning include:\n\n1. **Vaswani, A., et al. (2017)**: \"Attention Is All You Need.\" *Neural Information Processing Systems Conference (NeurIPS)*.\n2. **Devlin, J., et al. (2018)**: \"BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.\" *Conference of the North American Chapter of the Association for Computational Linguistics (NAACL)*.\n3. **Radford, A., et al. (2019)**: \"Language Models are Few-Shot Learners.\" *arXiv preprint*.\n4. **Lin, Q., et al. (2020)**: \"Improving Transformer for Long Sequences.\" *International Conference on Learning Representations (ICLR)*.\n5. **Shaw, K., et al. (2020)**: \"Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer.\" *Journal of Machine Learning Research*.\n\nIn summary, these references provide a solid foundation for understanding the development and application of the Transformer architecture in deep learning."}]